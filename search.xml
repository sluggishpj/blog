<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>自动化构建并部署hexo博客</title>
    <url>/blog/2019/10/23/auto-build-and-deploy-hexo-blog/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>记录如何使用 travis-ci 自动化构建 hexo 博客并部署到 github pages。<br>最终效果：只需编写 markdown，然后推送到 github，之后会通过 travis-ci 自动化构建并部署到指定仓库的 github pages。</p>
<a id="more"></a>

<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol>
<li>install node.js</li>
<li>install yarn</li>
<li>install git</li>
<li>install hexo</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>

<blockquote>
<p>node.js, git 自行安装</p>
</blockquote>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h3><h4 id="初始化博客文件夹"><a href="#初始化博客文件夹" class="headerlink" title="初始化博客文件夹"></a>初始化博客文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure>

<h4 id="将博客文件夹初始化-git-项目"><a href="#将博客文件夹初始化-git-项目" class="headerlink" title="将博客文件夹初始化 git 项目"></a>将博客文件夹初始化 git 项目</h4><ol>
<li>初始化</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加目标远程仓库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:sluggishpj/blog.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440" target="_blank" rel="noopener">Git 教程</a></p>
</blockquote>
<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p>按官网说明配置下根目录下的 _config.yml</p>
<blockquote>
<p>官网：<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a><br>可对比参照<a href="https://github.com/sluggishpj/blog/blob/master/_config.yml" target="_blank" rel="noopener">本博客的_config.yml</a>，注意配置中的<code>主题配置</code>稍后会说明。</p>
</blockquote>
<h3 id="添加主题模块"><a href="#添加主题模块" class="headerlink" title="添加主题模块"></a>添加主题模块</h3><p>可以添加自己看上的的主题模块，这里使用 next 主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes\</span><br><span class="line">$ git submodule add https://github.com/theme-next/hexo-theme-next next</span><br></pre></td></tr></table></figure>

<h4 id="为什么使用-git-submodule"><a href="#为什么使用-git-submodule" class="headerlink" title="为什么使用 git submodule"></a>为什么使用 git submodule</h4><ol>
<li>主题是一个独立的仓库，本博客也是一个独立的项目。但是 git 项目里面不能直接包含另一个 git 项目，但是可以使用 submodule 达到同样的效果</li>
<li>可根据需要更新主题仓库。如果把主题仓库复制过来，移除其<code>.git</code>文件夹，则不方便更新。</li>
</ol>
<h4 id="git-submodule-常用命令"><a href="#git-submodule-常用命令" class="headerlink" title="git submodule 常用命令"></a>git submodule 常用命令</h4><p>以下均在目标项目中操作，而不是在子模块目录中。</p>
<ol>
<li>添加子模块</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git submodule [--quiet] add [&lt;options&gt;] [--] &lt;repository&gt; [&lt;path&gt;]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>clone 包含子模块的项目，需进行子模块的初始化</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git submodule init</span><br><span class="line">$ git submodule update</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>更新子模块</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git submodule update --remote</span><br></pre></td></tr></table></figure>

<blockquote>
<p>git submodule 更多请参考：<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git 工具-子模块</a></p>
</blockquote>
<ol start="4">
<li>删除子模块</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逆初始化模块，其中&#123;MOD_NAME&#125;为模块目录，执行后可发现模块目录被清空</span></span><br><span class="line">$ git submodule deinit &#123;MOD_NAME&#125;</span><br><span class="line"><span class="comment"># 删除.gitmodules中记录的模块信息（--cached选项清除.git/modules中的缓存）</span></span><br><span class="line">$ git rm --cached &#123;MOD_NAME&#125;</span><br><span class="line"><span class="comment"># 提交更改到代码库，可观察到'.gitmodules'内容发生变更</span></span><br><span class="line">$ git commit -am <span class="string">"Remove a submodule."</span></span><br></pre></td></tr></table></figure>

<h3 id="新增博客所需功能"><a href="#新增博客所需功能" class="headerlink" title="新增博客所需功能"></a>新增博客所需功能</h3><p>这里新增搜索、评论、分类、标签</p>
<h4 id="新增页面搜索"><a href="#新增页面搜索" class="headerlink" title="新增页面搜索"></a>新增页面搜索</h4><p>本博客使用 Local Search</p>
<ol>
<li>安装所需依赖</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置根目录下的_config.yml，新增主题配置。内容是从 next/_config.yml 复制过来，修改 enable 为 true 而已。</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主题配置</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">    <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">    <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">    <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">    <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="新增评论"><a href="#新增评论" class="headerlink" title="新增评论"></a>新增评论</h4><p>本博客使用 gitalk</p>
<ol>
<li><p>获取 client_id 和 client_secret。<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击新增一个 Github APP</a></p>
</li>
<li><p>新增完后保存 client_id 和 client_secret，下面的配置要用到。<br><img src="https://s2.ax1x.com/2019/10/23/KJ5IN8.png" alt="KJ5IN8.png"></p>
</li>
<li><p>修改项目根目录的_config.yml，在主题配置 theme_config 中新增 gitalk 相关配置，其实也是 next/_config.yml 中复制过来的，更改 enable 为 true 而已。</p>
</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主题配置</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">    <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">    <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">    <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">    <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">gitalk:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">github_id:</span> <span class="string">sluggishpj</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">blog</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="string">dd946c3d0eb6bxxxxxxxx</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="string">5051b237a867f9673700xxxxxxxx</span></span><br><span class="line">    <span class="attr">admin_user:</span> <span class="string">sluggishpj</span></span><br><span class="line">    <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">    <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">    <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">    <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">    <span class="attr">language:</span></span><br></pre></td></tr></table></figure>

<h4 id="添加分类和标签"><a href="#添加分类和标签" class="headerlink" title="添加分类和标签"></a>添加分类和标签</h4><h5 id="创建分类和标签-page"><a href="#创建分类和标签-page" class="headerlink" title="创建分类和标签 page"></a>创建分类和标签 page</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>

<p>此时会在 source 中出现 categories 和 tags 文件夹。<br>依次进修改 2 个文件夹中的 index.md。categories 中的 index.md 添加 type 字段，并设置为 categories；tags 中的 index.md 添加 type 字段，并设置为 tags。</p>
<p>以下是 categories/index.md 的内容</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-10-13 20:38:19</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>以下是 tags/index.md 的内容</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-10-13 20:58:33</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h5 id="修改根目录下的-config-yml，在主题配置-theme-config-中新增相关配置。其实也是从-next-config-yml-中复制过来的。"><a href="#修改根目录下的-config-yml，在主题配置-theme-config-中新增相关配置。其实也是从-next-config-yml-中复制过来的。" class="headerlink" title="修改根目录下的_config.yml，在主题配置 theme_config 中新增相关配置。其实也是从 next/_config.yml 中复制过来的。"></a>修改根目录下的_config.yml，在主题配置 theme_config 中新增相关配置。其实也是从 next/_config.yml 中复制过来的。</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主题配置</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="comment"># 本地搜索</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">    <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">    <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">    <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">    <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 评论</span></span><br><span class="line">  <span class="attr">gitalk:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">github_id:</span> <span class="string">sluggishpj</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">blog</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="string">dd946c3d0eb6bxxxxxxxx</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="string">5051b237a867f9673700xxxxxxxx</span></span><br><span class="line">    <span class="attr">admin_user:</span> <span class="string">sluggishpj</span></span><br><span class="line">    <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">    <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">    <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">    <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">    <span class="attr">language:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 添加分类和标签</span></span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">    <span class="comment">#about: /about/ || user</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">    <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">    <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">    <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">    <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>到此可以先将项目 push 到 github 上，之后配置自动化构建及部署</p>
</blockquote>
<h3 id="自动化构建及部署"><a href="#自动化构建及部署" class="headerlink" title="自动化构建及部署"></a>自动化构建及部署</h3><h4 id="接入-Travis-ci"><a href="#接入-Travis-ci" class="headerlink" title="接入 Travis-ci"></a>接入 Travis-ci</h4><ol>
<li>使用 github 账户进行注册：<a href="https://travis-ci.org/" target="_blank" rel="noopener">https://travis-ci.org</a></li>
<li>在 github 新增一个 access token，并保存在你看得到的地方：<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a><br><img src="https://s2.ax1x.com/2019/10/23/KJqORf.png" alt="KJqORf.png"></li>
<li>在 travis-ci 中对应的博客项目配置该 token。下方.travis.yml 中的<code>$GITHUB_TOKEN</code>引用的就是刚配置的变量<code>GITHUB_TOKEN</code><br><img src="https://s2.ax1x.com/2019/10/23/KJLKoR.png" alt="KJLKoR.png"></li>
</ol>
<h4 id="新增-travis-yml-配置文件"><a href="#新增-travis-yml-配置文件" class="headerlink" title="新增.travis.yml 配置文件"></a>新增.travis.yml 配置文件</h4><p>在项目根目录下新增.travis.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建的分支</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="comment"># Repo for Yarn</span></span><br><span class="line">  <span class="comment"># RF：https://yarnpkg.com/lang/en/docs/install-ci/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sudo</span> <span class="string">apt-key</span> <span class="string">adv</span> <span class="string">--fetch-keys</span> <span class="string">http://dl.yarnpkg.com/debian/pubkey.gpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"deb http://dl.yarnpkg.com/debian/ stable main"</span> <span class="string">|</span> <span class="string">sudo</span> <span class="string">tee</span> <span class="string">/etc/apt/sources.list.d/yarn.list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">update</span> <span class="string">-qq</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">-qq</span> <span class="string">yarn</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 安装对应版本的 theme next</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="string">--init</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GITHUB_TOKEN</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">target-branch:</span> <span class="string">gh-pages</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">yarn:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>push 到 github 上，完毕</p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<p><a href="https://www.jianshu.com/p/ed0cb6c75e25" target="_blank" rel="noopener">简书-删除子模块</a> &gt; <a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git 工具-子模块</a> &gt; <a href="https://troyyang.com/2017/06/24/Travis_Auto_Build_Deploy_Github_Projects/" target="_blank" rel="noopener">Travis-ci 自动编译部署 github 上的项目</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CI&amp;CD</category>
      </categories>
      <tags>
        <tag>travis</tag>
        <tag>ci</tag>
        <tag>hexo</tag>
        <tag>git submodule</tag>
      </tags>
  </entry>
  <entry>
    <title>修改NexT Pisces主题样式</title>
    <url>/blog/2017/10/14/change-hexo-next-theme-pisces-style/</url>
    <content><![CDATA[<h2 id="修改nexT-Pisces主题内容区宽度"><a href="#修改nexT-Pisces主题内容区宽度" class="headerlink" title="修改nexT Pisces主题内容区宽度"></a>修改nexT Pisces主题内容区宽度</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>默认的宽度觉得有点窄，想改宽一点</p>
<a id="more"></a>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在<a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="noopener">官网</a>的指引下找到了<a href="https://github.com/iissnan/hexo-theme-next/issues/759#issuecomment-202242848" target="_blank" rel="noopener">方案</a><br>在测试后发现布局乱了，蓝瘦。。。</p>
<blockquote>
<p>测试版本为，hexo:v3.3.8，hexo-theme-next:v5.1.2<br>上面的方案如下：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*对于 Pisces Scheme，需要同时修改 header 的宽度、.main-inner 的宽度以及 .content-wrap 的宽度。</span></span><br><span class="line"><span class="comment">例如，使用百分比（Pisces 的布局定义在 source/css/_schemes/Picses/_layout.styl 中）：*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span>&#123; <span class="attribute">width</span>: <span class="number">90%</span>; &#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123; <span class="attribute">width</span>: <span class="number">90%</span>; &#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">260px</span>); &#125;</span><br></pre></td></tr></table></figure>

<h3 id="改进方法"><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h3><p>没办法，手动修改样式。。。<br>以下代码受上面方案启发，经过试验，在<code>source/css/_schemes/Picses/_layout.styl</code>文件末尾添加如下代码。</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下为新增代码！！</span></span><br><span class="line"><span class="comment">// 白色区域的最大宽度</span></span><br><span class="line"><span class="variable">$white_max_width</span> = <span class="number">1200px</span></span><br><span class="line"></span><br><span class="line">header&#123; </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span> !important;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="variable">$white_max_width</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span><span class="selector-class">.post-header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="variable">$white_max_width</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: calc(<span class="number">100%</span> - <span class="number">260px</span>); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="comment">// 为了在手机访问时，内边距不至于太大</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> !important;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改样式后，需要 hexo clean 后再部署才会生效</p>
</blockquote>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><blockquote class="blockquote-center"><p> Till I reach the end, then I’ll start again<br>《Try Everything》</p>
</blockquote>]]></content>
      <categories>
        <category>tools</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>NexT主题</tag>
      </tags>
  </entry>
  <entry>
    <title>css-secrets-note</title>
    <url>/blog/2018/03/02/css-secrets-note/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>内容参考自《CSS揭秘》，本博文只记录CSS的用途，不做详细解析，详细请看书</p>
<a id="more"></a>

<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>CSS编码技巧</p>
<h3 id="尽量减少代码重复"><a href="#尽量减少代码重复" class="headerlink" title="尽量减少代码重复"></a>尽量减少代码重复</h3><p>代码可维护性的最大要素是尽量减少改动时要编辑的地方</p>
<p>当某些值相互依赖时，应该把它们的相互关系用代码表达出来。例如，行高和字号的关系。把字号改为相对于行高而不是绝对高度，可以避免再修改一个值。同理字体尺寸的样式，如果改用百分比或 <code>em</code> 单位就好多了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-size</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span><br></pre></td></tr></table></figure>

<p>需要重新审视到底哪些效果应该跟着按钮一起放大（使用em或rem或百分比），而哪些效果是保持不变的（使用px）。</p>
<h3 id="HSLA-H-S-L-A"><a href="#HSLA-H-S-L-A" class="headerlink" title="HSLA(H,S,L,A)"></a>HSLA(H,S,L,A)</h3><p>取值：</p>
<ul>
<li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li>
<li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li>
<li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li>
<li>A：Alpha透明度。取值0~1之间。</li>
</ul>
<h3 id="尽量减少代码重复-1"><a href="#尽量减少代码重复-1" class="headerlink" title="尽量减少代码重复"></a>尽量减少代码重复</h3><h3 id="代码易维护vs代码量少"><a href="#代码易维护vs代码量少" class="headerlink" title="代码易维护vs代码量少"></a>代码易维护vs代码量少</h3><p>我们要为一个元素添加一道 10px 宽的边框，但左侧不加边框。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-width</span>: 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 0;</span><br><span class="line"><span class="comment">/* 改成下面两条可读性和可维护性更好 */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-left-width</span>: 0;</span><br></pre></td></tr></table></figure>



<h3 id="currentColor：CSS有史以来第一个变量"><a href="#currentColor：CSS有史以来第一个变量" class="headerlink" title="currentColor：CSS有史以来第一个变量"></a>currentColor：CSS有史以来第一个变量</h3><p>假设我们想让所有的水平分割线（所有<code>&lt;hr&gt;</code> 元素）自动与文本的颜色保持一致。有了 currentColor 之后，我们只需要这样写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hr</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: .<span class="number">5em</span>;</span><br><span class="line">    <span class="attribute">background</span>: currentColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="inherit-关键字"><a href="#inherit-关键字" class="headerlink" title="inherit 关键字"></a>inherit 关键字</h3><p>对于背景色同样非常有用。举个例子，在创建提示框的时候，你可能希望它的小箭头能够自动继承背景和边框的样式：<br><img src="https://gitee.com/sluggish/music/raw/master/css-secrets-inherit.png" alt="css-secrets-inherit.png"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.callout</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.callout</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -.<span class="number">4em</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">35em</span>;</span><br><span class="line">    <span class="attribute">background</span>: inherit;</span><br><span class="line">    <span class="attribute">border</span>: inherit;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="关于响应式网页设计"><a href="#关于响应式网页设计" class="headerlink" title="关于响应式网页设计"></a>关于响应式网页设计</h3><p>下面还有一些建议，可能会帮你避免不必要的媒体查询</p>
<ul>
<li>使用百分比长度来取代固定长度。如果实在做不到这一点，也应该尝试使用与<strong>视口</strong>相关的单位（ vw 、 vh 、 vmin 和 vmax ），它们的值解析为视口宽度或高度的百分比。</li>
<li>当你需要在较大分辨率下得到固定宽度时，使用 max-width 而不是width ，因为它可以适应较小的分辨率，而无需使用媒体查询。</li>
<li>不要忘记为替换元素（比如 img 、 object 、 video 、 iframe 等）设置一个 max-width ，值为 100% 。</li>
<li>假如背景图片需要完整地铺满一个容器，不管容器的尺寸如何变化，background-size: cover 这个属性都可以做到。但是，我们也要时刻牢记——带宽并不是无限的，因此在移动网页中通过 CSS 把一张大图缩小显示往往是不太明智的。</li>
<li>当图片（或其他元素）以行列式进行布局时，让视口的宽度来决定列的数量。弹性盒布局（即 Flexbox）或者 display: inline-block加上常规的文本折行行为，都可以实现这一点。</li>
<li>在使用多列文本时，指定 column-width （列宽）而不是指定column-count （列数），这样它就可以在较小的屏幕上自动显示为单列布局。</li>
</ul>
<p>总的来说，我们的思路是尽最大努力实现弹性可伸缩的布局，并在媒体查询的各个断点区间内指定相应的尺寸。</p>
<h3 id="合理使用简写"><a href="#合理使用简写" class="headerlink" title="合理使用简写"></a>合理使用简写</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">rebeccapurple</span>;</span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">rebeccapurple</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 合理使用简写是一种良好的防卫性编码方式，可以抵御未来的风险。当然，如果我们要明确地去覆盖某个具体的展开式属性并保留其他相关样式，那就需要用展开式属性</p>
</blockquote>
<h2 id="背景与边框"><a href="#背景与边框" class="headerlink" title="背景与边框"></a>背景与边框</h2><h3 id="半透明边框"><a href="#半透明边框" class="headerlink" title="半透明边框"></a>半透明边框</h3><p>默认状态下，背景会延伸到边框的区域下层。 如果不希望背景侵入边框所在的范围，我们要做的就是把它的<code>background-clip</code>设为 <code>padding-box</code></p>
<h3 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h3><h4 id="box-shadow方案"><a href="#box-shadow方案" class="headerlink" title="box-shadow方案"></a>box-shadow方案</h4><p>一个正值的扩张半径加上两个为零的偏移量以及为零的模糊值，得到的“投影”其实就像一道实线边框 box-shadow 的好处在于，它支持逗号分隔语法，我们 可以创建任意数量的投影</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mydiv</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#655</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>box-shadow 是层层叠加的，第一层投影位于最顶 层，依次类推。因此，你需要按此规律调整扩张半径</li>
</ul>
<ul>
<li>投影的行为跟边框不完全一致，因为它不会影响布局，而且也不会 受到 box-sizing 属性的影响。不过，你还是可以通过内边距或外边 距（这取决于投影是内嵌和还是外扩的）来额外模拟出边框所需要 占据的空间</li>
<li>上述方法所创建出的假“边框”出现在元素的外圈。它们并不会响 应鼠标事件，比如悬停或点击。如果这一点非常重要，你可以给 box-shadow 属性加上 inset 关键字，来使投影绘制在元素的内圈。 请注意，此时你需要增加额外的内边距来腾出足够的空隙</li>
</ul>
</blockquote>
<h4 id="outline方案"><a href="#outline方案" class="headerlink" title="outline方案"></a>outline方案</h4><ul>
<li>box-shadow只能模拟实线边框</li>
<li>outline可以模拟虚线边框<ul>
<li>outline-offset控制元素与元素边缘的间距</li>
<li>只适用于双层“边框”场景，不支持逗号分隔的多个值</li>
</ul>
</li>
</ul>
<h3 id="灵活的背景定位"><a href="#灵活的背景定位" class="headerlink" title="灵活的背景定位"></a>灵活的背景定位</h3><p>目标：灵活控制背景图片位置</p>
<h4 id="background-position扩张语法"><a href="#background-position扩张语法" class="headerlink" title="background-position扩张语法"></a>background-position扩张语法</h4><p>允许我们指定<strong>背景图片距离任意角的偏移量</strong>，只要我们在偏移量前面指定关键字。举例来说，让背景图片跟右边缘保持 20px 的偏移量，同时跟底边保持 10px 的偏移量，可以这样做</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>(<span class="selector-tag">code-pirate</span><span class="selector-class">.svg</span>)</span><br><span class="line">            <span class="selector-tag">no-repeat</span> <span class="selector-tag">bottom</span> <span class="selector-tag">right</span> <span class="selector-id">#58a</span>; <span class="comment">/* bottom right提供回退*/</span></span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">right</span> 20<span class="selector-tag">px</span> <span class="selector-tag">bottom</span> 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>


<h4 id="background-origin方案"><a href="#background-origin方案" class="headerlink" title="background-origin方案"></a>background-origin方案</h4><ul>
<li>目的：设置背景图片偏移量与容器的内边距一致</li>
</ul>
<p><code>background-position</code> 默认是以 <code>padding box</code> 为准的，因此， top left 默认指的是 padding box 的<strong>左上角</strong></p>
<p><code>background-origin</code> ，可以用它来<strong>改变</strong>这种行为，默认为<code>padding-box</code>，可以将其设置为<code>content-box</code>，则<code>background-position</code>就会以<strong>内容区</strong>的边缘为标准</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>("<span class="selector-tag">code-pirate</span><span class="selector-class">.svg</span>") <span class="selector-tag">no-repeat</span> <span class="selector-id">#58a</span> <span class="selector-tag">bottom</span> <span class="selector-tag">right</span>; <span class="comment">/* 或 100% 100% */</span></span><br><span class="line"><span class="selector-tag">background-origin</span>: <span class="selector-tag">content-box</span>;</span><br></pre></td></tr></table></figure>



<h4 id="calc-方案"><a href="#calc-方案" class="headerlink" title="calc()方案"></a>calc()方案</h4><p>可以在<code>background-position</code>中使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>("<span class="selector-tag">code-pirate</span><span class="selector-class">.svg</span>") <span class="selector-tag">no-repeat</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 20<span class="selector-tag">px</span>) <span class="selector-tag">cal</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：calc() 函数内部的 - 和 + 运算符的两侧要加 一个<strong>空白符</strong>，否则会产生解析错 误！这个规则如此怪异，是为了向前兼容：未来，在 calc() 内部 可能会允许使用关键字，而这些 关键字可能会包含连字符（即减号）</p>
</blockquote>
<h3 id="边框内圆角"><a href="#边框内圆角" class="headerlink" title="边框内圆角"></a>边框内圆角</h3><p>目标：如下图</p>
<p><img src="https://gitee.com/sluggish/music/raw/master/css-secrect-inner-border-circle.png" alt="css-secrect-inner-border-circle.png"></p>
<p>解决方案：</p>
<ul>
<li>两个元素（不展开）</li>
<li>一个元素</li>
</ul>
<p>描边（outline）不会跟着元素的圆角走，box-shadow会。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">tan</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: <span class="selector-class">.8em</span>;</span><br><span class="line"><span class="selector-tag">padding</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0 0 0 <span class="selector-class">.6em</span> <span class="selector-id">#655</span>;</span><br><span class="line"><span class="selector-tag">outline</span>: <span class="selector-class">.6em</span> <span class="selector-tag">solid</span> <span class="selector-id">#655</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>扩张半径需要比描边的宽度值小，但它同时又要比<code> ( √2-1)*border-radius</code> 大，可以直接设置为其一半</p>
</blockquote>
<h3 id="条纹背景"><a href="#条纹背景" class="headerlink" title="条纹背景"></a>条纹背景</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">red</span> 25%, <span class="selector-tag">orange</span> 0, <span class="selector-tag">orange</span> 50%, <span class="selector-tag">yellow</span> 0, <span class="selector-tag">yellow</span> 75%, <span class="selector-tag">blue</span> 75%);</span><br></pre></td></tr></table></figure>

<script async src="//jsfiddle.net/sluggishpj/xodcp2t6/embed/html,css,result/dark/"></script>

<blockquote>
<p>产生4色块</p>
<p><code>red 25%</code>表示结束位置是在25%，因为是第一个颜色，所以开始位置默认是0%</p>
<p>如果某个色标的位置比整个列表中它之前的色标的位置都要小，则该色标的位置会被设置为它前面所有色标位置值的最大值。所以上面的<code>orange 0</code>相当于<code>orange 25%</code></p>
<p><code>orange 0</code>此处表示开始位置为25%</p>
<p><code>orange 50%</code>表示结束为值为50%</p>
<p><code>yellow 0</code> 此处表示开始位置为50%</p>
<p><code>yellow 75%</code>表示结束为值为75%</p>
<p><code>blue 75%</code>表示开始位置为75%，又因为是最后一个，其结束位置为100%</p>
</blockquote>
<h4 id="垂直条纹"><a href="#垂直条纹" class="headerlink" title="垂直条纹"></a>垂直条纹</h4><h4 id="斜向条纹"><a href="#斜向条纹" class="headerlink" title="斜向条纹"></a>斜向条纹</h4><h4 id="灵活的同色系条纹"><a href="#灵活的同色系条纹" class="headerlink" title="灵活的同色系条纹"></a>灵活的同色系条纹</h4><h3 id="复杂的背景图案"><a href="#复杂的背景图案" class="headerlink" title="复杂的背景图案"></a>复杂的背景图案</h3><h4 id="网格"><a href="#网格" class="headerlink" title="网格"></a>网格</h4><h4 id="波点和棋盘"><a href="#波点和棋盘" class="headerlink" title="波点和棋盘"></a>波点和棋盘</h4><p>通过<code>background-position</code>调整</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#655</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">tan</span> 30%, <span class="selector-tag">transparent</span> 0), <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">tan</span> 30%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: 0 0, 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<p>处于可读性考虑，需要把一句CSS代码打断为多行，只需要用反斜杠(\)来转义每行末尾的换行就可以了</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background: #eee url('data:image/svg+xml,\</span><br><span class="line">        &lt;svg xmlns="http://www.w3.org/2000/svg" \</span><br><span class="line">        width="100" height="100" \</span><br><span class="line">        fill-opacity=".25"&gt;\</span><br><span class="line">        &lt;rect x="50" width="50" height="50" /&gt; \</span><br><span class="line">        &lt;rect y="50" width="50" height="50" /&gt; \</span><br><span class="line">&lt;/svg&gt;');</span><br></pre></td></tr></table></figure>

<h3 id="伪随机背景"><a href="#伪随机背景" class="headerlink" title="伪随机背景"></a>伪随机背景</h3><h3 id="连续的图像边框"><a href="#连续的图像边框" class="headerlink" title="连续的图像边框"></a>连续的图像边框</h3><ul>
<li>两元素实现（看书）</li>
<li>单元素实现</li>
</ul>
<p>思路：在图片之上，再叠加一层纯白的实色背景，给两层背景指定不同的<code>background-clip</code>，注意的是，我们只能在多重背景的最底层设置背景色，因此需要用一道从白色过渡到白色的CSS渐变来模拟纯白色背景</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">em</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">white</span>, <span class="selector-tag">white</span>), <span class="selector-tag">url</span>(<span class="selector-tag">stone-art</span><span class="selector-class">.jpg</span>);</span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">padding-box</span>, <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="selector-tag">background-origin</span>: <span class="selector-tag">border-box</span>;</span><br></pre></td></tr></table></figure>



<h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><h3 id="自适应椭圆"><a href="#自适应椭圆" class="headerlink" title="自适应椭圆"></a>自适应椭圆</h3><blockquote>
<p>当任意两个相邻圆角的半径之和超过border box的尺寸时，用户代理必须按比例减小各个边框半径所使用的值，直到它们不会相互重叠</p>
</blockquote>
<p>解决方案</p>
<ul>
<li>border-radius可以单独指定水平和垂直半径，只要用一个斜杠(/)分隔这两个值即可。因此可以创建椭圆圆角</li>
<li>创建一个自适应的椭圆</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border-radius: 50%/50%;</span><br></pre></td></tr></table></figure>



<h4 id="半椭圆"><a href="#半椭圆" class="headerlink" title="半椭圆"></a>半椭圆</h4><p>border-radius是一个简写属性，可以展开如下：</p>
<ul>
<li>border-top-left-radius</li>
<li>border-top-right-radius</li>
<li>border-bottom-right-radius</li>
<li>border-bottom-left-radius</li>
</ul>
<p>可以给border-radius设置四个值，以空格隔开，分别从左上角开始以顺时针应用到各个角。如果忽略设置某个值，会以CSS的常规方式重复，第一个值和第三个值相同，第二个字和第四个值相同</p>
<p>可以为所有四个角提供完全不同的水平和垂直半径，方法是在斜杠前指定1<del>4个值（水平），在斜杠后指定另外1</del>4个值（垂直）。这两组值是单独展开为四个值的。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border-radius: 10px / 5px 20px;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line">border-radius: 10px 10px 10px 10px / 5px 20px 5px 20px;</span><br></pre></td></tr></table></figure>



<h4 id="四分之一椭圆"><a href="#四分之一椭圆" class="headerlink" title="四分之一椭圆"></a>四分之一椭圆</h4><h3 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a>平行四边形</h3><h4 id="嵌套元素解决方案"><a href="#嵌套元素解决方案" class="headerlink" title="嵌套元素解决方案"></a>嵌套元素解决方案</h4><p>容器使用skew()，对内容再应用一次反向的skew()，从而抵消到容器的变形</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">transform</span>: <span class="built_in">skewX</span>(-<span class="number">45deg</span>); &#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123; <span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">45deg</span>); &#125;</span><br></pre></td></tr></table></figure>



<h4 id="伪元素解决方案"><a href="#伪元素解决方案" class="headerlink" title="伪元素解决方案"></a>伪元素解决方案</h4><p>把所有样式（背景，边框等）应用到伪元素上，然后再对伪元素进行变形</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>; <span class="comment">/* 用伪元素来生成一个矩形 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>; <span class="comment">/* 宿主元素之后 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="菱形图片"><a href="#菱形图片" class="headerlink" title="菱形图片"></a>菱形图片</h3><h4 id="基于变形的方案"><a href="#基于变形的方案" class="headerlink" title="基于变形的方案"></a>基于变形的方案</h4><ul>
<li>通过rotate和scale</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.picture</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.picture</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>) <span class="built_in">scale</span>(<span class="number">1.42</span>); <span class="comment">/* 1.42 &gt; √2*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="裁切路径方案"><a href="#裁切路径方案" class="headerlink" title="裁切路径方案"></a>裁切路径方案</h4><ul>
<li>使用clip-path属性，还可以参与动画</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="切角效果"><a href="#切角效果" class="headerlink" title="切角效果"></a>切角效果</h3><h4 id="渐变解决"><a href="#渐变解决" class="headerlink" title="渐变解决"></a>渐变解决</h4><p>使用预处理器sass</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> beveled-corners(<span class="variable">$bg</span>, <span class="variable">$tl</span>:<span class="number">0</span>, <span class="variable">$tr</span>:<span class="variable">$t1</span>, <span class="variable">$br</span>:<span class="variable">$t1</span>, <span class="variable">$bl</span>:<span class="variable">$tr</span>) &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$bg</span>;</span><br><span class="line">    <span class="attribute">background</span>: </span><br><span class="line">        linear-gradient(<span class="number">135deg</span>, transparent <span class="variable">$t1</span>, <span class="variable">$bg</span> <span class="number">0</span>) top left,</span><br><span class="line">        linear-gradient(<span class="number">225deg</span>, transparent <span class="variable">$tr</span>, <span class="variable">$bg</span> <span class="number">0</span>) top left,</span><br><span class="line">        linear-gradient(-<span class="number">45deg</span>, transparent <span class="variable">$br</span>, <span class="variable">$bg</span> <span class="number">0</span>) top left,</span><br><span class="line">        linear-gradient(<span class="number">45deg</span>, transparent <span class="variable">$b1</span>, <span class="variable">$bg</span> <span class="number">0</span>) top left,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@include beveled-corners(<span class="number">#58</span>, <span class="number">15px</span>, <span class="number">5px</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tl：上左角(top left)，tr：上右角，br：下右角，bl：下左角</p>
</blockquote>
<h5 id="弧形切角"><a href="#弧形切角" class="headerlink" title="弧形切角"></a>弧形切角</h5><h4 id="内联SVG与border-image方案"><a href="#内联SVG与border-image方案" class="headerlink" title="内联SVG与border-image方案"></a>内联SVG与border-image方案</h4><h4 id="裁切路径方案-1"><a href="#裁切路径方案-1" class="headerlink" title="裁切路径方案"></a>裁切路径方案</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#58a</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">polygon</span>(20<span class="selector-tag">px</span> 0, <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 20<span class="selector-tag">px</span>) 0, 100% 20<span class="selector-tag">px</span>, 100% <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 20<span class="selector-tag">px</span>), <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 20<span class="selector-tag">px</span>) 100%, 20<span class="selector-tag">px</span> 100%, 0 <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 20<span class="selector-tag">px</span>), 0 20<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>好处：可以使用任意类型的背景。</p>
<p>缺点：当内边距不够宽时，它会裁切掉文本</p>
</blockquote>
<h4 id="CSS4-corner-shape"><a href="#CSS4-corner-shape" class="headerlink" title="CSS4 corner-shape"></a>CSS4 corner-shape</h4><h3 id="梯形标签页"><a href="#梯形标签页" class="headerlink" title="梯形标签页"></a>梯形标签页</h3><ul>
<li>对伪元素使用3D变形（如果对自身元素使用3D变形，其内部元素不可逆转）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tab</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span> .<span class="number">35em</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">''</span>; <span class="comment">/* 用伪元素生成一个矩形 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="comment">/* 旋转后高度会变小，需适当放大 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">1.3</span>) <span class="built_in">perspective</span>(.<span class="number">5em</span>) <span class="built_in">rotateX</span>(<span class="number">5deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom; <span class="comment">/* 旋转时底边固定住 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>缺点：斜边的角度依赖于元素的宽度。适用于宽度基本一致的元素</p>
</blockquote>
<h3 id="简单的饼图"><a href="#简单的饼图" class="headerlink" title="简单的饼图"></a>简单的饼图</h3><h4 id="基于伪元素transform的解决方案"><a href="#基于伪元素transform的解决方案" class="headerlink" title="基于伪元素transform的解决方案"></a>基于伪元素transform的解决方案</h4><h4 id="SVG解决方案"><a href="#SVG解决方案" class="headerlink" title="SVG解决方案"></a>SVG解决方案</h4><h2 id="视觉效果"><a href="#视觉效果" class="headerlink" title="视觉效果"></a>视觉效果</h2><h3 id="单侧投影"><a href="#单侧投影" class="headerlink" title="单侧投影"></a>单侧投影</h3><ul>
<li>使用box-shadow的第四个长度参数，这个参数会根据你指定的值去扩大或（当指定负值时）缩小投影的尺寸。eg、一个-5px的扩展半径会把投影的宽度和高度各减少10px（每边各5px）</li>
<li>如果应用一个负的扩张半径，而它的值刚好等于模糊半径，那么投影的尺寸就会与投影所属元素的尺寸完全一致。除非用偏移量（前两个参数）来移动它，<br>实现单侧投影如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 0 5<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> <span class="selector-tag">-4px</span> <span class="selector-tag">black</span>;</span><br></pre></td></tr></table></figure>



<h4 id="邻边投影"><a href="#邻边投影" class="headerlink" title="邻边投影"></a>邻边投影</h4><h4 id="双侧投影"><a href="#双侧投影" class="headerlink" title="双侧投影"></a>双侧投影</h4><ul>
<li>把单侧投影的技巧运用两次</li>
</ul>
<h3 id="不规则投影"><a href="#不规则投影" class="headerlink" title="不规则投影"></a>不规则投影</h3><p>问题：border-radius会忽略透明的部分。这类情况包括：</p>
<ul>
<li>半透明图像、背景图像、或者border-image</li>
<li>点状、虚线或半透明的边框，但没有背景（或者当backgroud-clip不是border-box时）</li>
<li>对话气泡</li>
<li>切角形状</li>
<li>折角效果</li>
<li>菱形图片</li>
</ul>
<p>解决方案：使用filter属性，指定drop-shadow滤镜</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">drop-shadow</span>(2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.5</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可参考：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/filter</a></p>
</blockquote>
<h3 id="染色效果"><a href="#染色效果" class="headerlink" title="染色效果"></a>染色效果</h3><h4 id="基于滤镜的方案"><a href="#基于滤镜的方案" class="headerlink" title="基于滤镜的方案"></a>基于滤镜的方案</h4><p>通过filter属性，参考上面链接</p>
<h4 id="基于混合模式的方案"><a href="#基于混合模式的方案" class="headerlink" title="基于混合模式的方案"></a>基于混合模式的方案</h4><h3 id="毛玻璃效果"><a href="#毛玻璃效果" class="headerlink" title="毛玻璃效果"></a>毛玻璃效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"trigger.jpg"</span>) <span class="number">0</span> / cover fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>, .<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">30px</span>; <span class="comment">/* 修复边缘模糊消退的问题 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="折角效果"><a href="#折角效果" class="headerlink" title="折角效果"></a>折角效果</h3><h2 id="字体排印"><a href="#字体排印" class="headerlink" title="字体排印"></a>字体排印</h2><h3 id="连字符断行"><a href="#连字符断行" class="headerlink" title="连字符断行"></a>连字符断行</h3><p>使用新属性hyphens，接收参数：none | manual | auto</p>
<ul>
<li>manual：默认值，可以手工插入软连字符，来实现断词折行的效果</li>
<li>none：禁用手工插入软连字符</li>
<li>auto：自动帮你插入连字符，仍可以手工插入软连字符（<code>&amp;shy;</code> )来辅助浏览器断词。需要在HTML标签的lang属性中指定合适的语言</li>
</ul>
<h3 id="插入断行"><a href="#插入断行" class="headerlink" title="插入断行"></a>插入断行</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Lea Verou<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>lea@verou.me<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Location：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Earc<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">dd</span> + <span class="selector-tag">dt</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'\A'</span>, <span class="comment">/* 相当于换行符 */</span></span><br><span class="line">    white-space: pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">dd</span> + <span class="selector-tag">dd</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">','</span>,</span><br><span class="line">    font-weight: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="文本行的斑马条纹"><a href="#文本行的斑马条纹" class="headerlink" title="文本行的斑马条纹"></a>文本行的斑马条纹</h3><ul>
<li>传统做法：使用:nth-child()实现</li>
<li>可以对整个元素设置统一的背景图像，一次性加上所有的斑马条纹</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>: <span class="selector-class">.5em</span>;</span><br><span class="line"><span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">beige</span>; <span class="comment">/* 米色 */</span></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">auto</span> 3<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">background-origin</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.2</span>) 50% <span class="selector-tag">transparent</span> 0);</span><br></pre></td></tr></table></figure>



<h3 id="调整tab的宽度"><a href="#调整tab的宽度" class="headerlink" title="调整tab的宽度"></a>调整tab的宽度</h3><p>通常使用<code>&lt;pre&gt;</code>和<code>&lt;code&gt;</code>元素来显示代码。通过<code>tab-size</code>属性设置tab宽度</p>
<h3 id="连字"><a href="#连字" class="headerlink" title="连字"></a>连字</h3><p>原有的font-varient被升级成了一个简写属性，由很多新的展开式属性组合而成。其中之一叫做<code>font-variant-ligatures</code>，用来控制连字符的开启和关闭。如果要启用所有可能的连字，需要同时制定这三个标识符</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-variant-ligatures</span>: <span class="selector-tag">common-ligatures</span> <span class="selector-tag">discretionary-ligatures</span> <span class="selector-tag">historical-ligatures</span>;</span><br></pre></td></tr></table></figure>



<h3 id="华丽的-amp-字符"><a href="#华丽的-amp-字符" class="headerlink" title="华丽的&amp;字符"></a>华丽的&amp;字符</h3><h3 id="自定义下划线"><a href="#自定义下划线" class="headerlink" title="自定义下划线"></a>自定义下划线</h3><p>通过CSS渐变生成所需的图像</p>
<h3 id="现实中的文字效果"><a href="#现实中的文字效果" class="headerlink" title="现实中的文字效果"></a>现实中的文字效果</h3><h4 id="凸版印刷效果"><a href="#凸版印刷效果" class="headerlink" title="凸版印刷效果"></a>凸版印刷效果</h4><h4 id="空心字效果"><a href="#空心字效果" class="headerlink" title="空心字效果"></a>空心字效果</h4><h4 id="文字外发光效果"><a href="#文字外发光效果" class="headerlink" title="文字外发光效果"></a>文字外发光效果</h4><p>几层重叠的text-shadow即可，不需要考虑偏移量，颜色也只需跟文字保持一致</p>
<h4 id="文字凸起效果"><a href="#文字凸起效果" class="headerlink" title="文字凸起效果"></a>文字凸起效果</h4><p>给文字添加一系列逐渐加深的<code>text-shadow</code></p>
<h3 id="环形文字"><a href="#环形文字" class="headerlink" title="环形文字"></a>环形文字</h3><h2 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h2><h3 id="选用合适的鼠标"><a href="#选用合适的鼠标" class="headerlink" title="选用合适的鼠标"></a>选用合适的鼠标</h3><ul>
<li><p>提示禁用状态</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:disable</span>, <span class="selector-attr">[disable]</span>, <span class="selector-attr">[aria-disable=<span class="string">"true"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>隐藏鼠标光标</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">cursor: url('transparent.gif'); /* 回退方案 */</span><br><span class="line"><span class="selector-tag">cursor</span>: <span class="selector-tag">none</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="扩大可点击区域"><a href="#扩大可点击区域" class="headerlink" title="扩大可点击区域"></a>扩大可点击区域</h3><ul>
<li>目标：扩张点击区域，但要<strong>透明</strong>的。可以为其设置一圈<strong>透明边框</strong>，因为鼠标对元素边框的交互也会触发鼠标事件</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">padding-box</span>; <span class="comment">/* 避免背景色扩张到边框 */</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0 0 0 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.3</span>) <span class="selector-tag">inset</span>; <span class="comment">/* 使用box-shadow模拟实线边框 */</span></span><br></pre></td></tr></table></figure>

<p>如果要再设置按钮<strong>外部投影</strong>，可以使用<strong>伪元素</strong>，伪元素同样可以代替其宿主元素来响应鼠标交互。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* [其余样式] */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>; <span class="attribute">right</span>:-<span class="number">10px</span>; <span class="attribute">bottom</span>:-<span class="number">10px</span>; <span class="attribute">left</span>:-<span class="number">10px</span>; <span class="comment">/* 减去边框厚度 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="自定义复选框"><a href="#自定义复选框" class="headerlink" title="自定义复选框"></a>自定义复选框</h3><p>没有多少样式能够对复选框起作用，不过可以基于复选框的勾选状态借助组合选择符来给其他元素设置样式。</p>
<p>可以借助label元素，当label元素与复选框关联之后，也可以起到触发开关的作用。可以为它添加生成性内容（伪元素），并基于复选框的状态为其设置样式，然后就可以把真正的复选框隐藏起来（并不能把它从tab键切换焦点的队列中完全删除），然后把生成性内容美化一番，用来顶替原来的复选框！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"awesome"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"awesome"</span>&gt;</span>Awesome!<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 隐藏原来的复选框 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"checkbox"</span>]</span> &#123; </span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 未选中样式 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"checkbox"</span>]</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123; </span><br><span class="line">    <span class="attribute">content</span>:<span class="string">'\a0'</span>; <span class="comment">/* 不换行空格 */</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: .<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">width</span>: .<span class="number">8em</span>;</span><br><span class="line">    <span class="attribute">height</span>: .<span class="number">8em</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: .<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">background</span>: silver;</span><br><span class="line">    <span class="attribute">text-indent</span>: .<span class="number">15em</span>;</span><br><span class="line">   	<span class="attribute">line-height</span>: .<span class="number">65</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选中样式 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"checkbox"</span>]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123; </span><br><span class="line">    <span class="attribute">content</span>:<span class="string">'\2713'</span>; <span class="comment">/* 对勾 */</span></span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 聚焦样式 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"checkbox"</span>]</span><span class="selector-pseudo">:focus</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="comment">/* style content */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用样式 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"checkbox"</span>]</span><span class="selector-pseudo">:disabled</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="comment">/* style content */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>隐藏原始复选框不能使用<code>display:none</code>是因为那样会把它从键盘tab键切换焦点的队列中完全删除</p>
</blockquote>
<h4 id="开关式按钮"><a href="#开关式按钮" class="headerlink" title="开关式按钮"></a>开关式按钮</h4><h3 id="通过阴影弱化背景"><a href="#通过阴影弱化背景" class="headerlink" title="通过阴影弱化背景"></a>通过阴影弱化背景</h3><h4 id="传统方案"><a href="#传统方案" class="headerlink" title="传统方案"></a>传统方案</h4><p>两个元素，遮罩层和目标元素。设置不同的z-index</p>
<h4 id="伪元素方案"><a href="#伪元素方案" class="headerlink" title="伪元素方案"></a>伪元素方案</h4><p>把遮罩层交给元素自己的::before伪元素来实现，并设置不同的z-index。</p>
<p>缺点：伪元素无法绑定独立的JavaScript事件处理函数</p>
<h4 id="box-shadow方案-1"><a href="#box-shadow方案-1" class="headerlink" title="box-shadow方案"></a>box-shadow方案</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 0 0 0 50<span class="selector-tag">vmax</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.8</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>无法分开指定水平和垂直方向上的扩张半径，所以此处最合适的视口单位是vmax。1vmax相当于1vw和1vh两者中的较大值。100vw等于整个视口的宽度，100vh就是视口的高度</p>
</blockquote>
<p>缺点1：当滚动页面时，遮罩层的边缘就露出来了，除非给它加上<code>position:fixed</code>。</p>
<p>缺点2：遮罩层无法阻止用户的鼠标与页面的其他部分发生交互</p>
<h4 id="backdrop方案"><a href="#backdrop方案" class="headerlink" title="backdrop方案"></a>backdrop方案</h4><p>如果你想引导用户关注的元素就是一个模态的<code>&lt;dialog&gt;</code>元素（<code>&lt;dialog&gt;</code>元素可以由它的showModal()方法显示出来），那么根据浏览器的默认样式，它会自带一个遮罩层。借助<code>::backdrop</code>伪元素，这个原生的遮罩层也是可以设置样式的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">dialog</span><span class="selector-pseudo">::backdrop</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>缺点：浏览器支持极为有限（18.3.1）</p>
</blockquote>
<h3 id="通过模糊弱化背景"><a href="#通过模糊弱化背景" class="headerlink" title="通过模糊弱化背景"></a>通过模糊弱化背景</h3><p>通过滤镜</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>this is the main content<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dialog</span>&gt;</span>This is dialog<span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    main &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-class">.6s</span> <span class="selector-tag">filter</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">main</span><span class="selector-class">.de-emphasized</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(5<span class="selector-tag">px</span>) <span class="selector-tag">contrast</span>(<span class="selector-class">.8</span>) <span class="selector-tag">brightness</span>(<span class="selector-class">.8</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一旦滤镜不被支持，将没有任何回退方案。因此不妨使用前一篇中的box-shadow来实现阴影。</p>
<p>页面背景还可以通过scale()变形属性来产生缩小效果，从而进一步增强景深效果</p>
</blockquote>
<h3 id="滚动提示"><a href="#滚动提示" class="headerlink" title="滚动提示"></a>滚动提示</h3><p>效果类似如下：</p>
<p><img src="https://gitee.com/sluggish/music/raw/master/css-secrect-scroll.png" alt="css-secrect-scroll.png"></p>
<p>原理：两层背景：一层用来生成那条阴影，另一层基本上就是<strong>一个用来遮挡阴影的白色矩形</strong>，其作用类似于遮罩层。生成阴影的那层背景将具有默认的background-attachment值（scroll），因为它总是保持在原位。把遮罩背景的<code>background-attachment</code>属性设置为local，这样它就会在我们滚动到最顶部时盖住阴影，在向下滚动时跟着滚动，从而露出阴影。</p>
<blockquote>
<p>背景跟着内容滚动，将<code>background-attachment</code>设置为<code>local</code></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">white</span> 30%, <span class="selector-tag">transparent</span>),</span><br><span class="line">			<span class="selector-tag">radial-gradient</span>(<span class="selector-tag">at</span> 50% 0, <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.2</span>), <span class="selector-tag">transparent</span> 70%);</span><br><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>;</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 50<span class="selector-tag">px</span>, 100% 15<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-attachment</span>: <span class="selector-tag">local</span>, <span class="selector-tag">scroll</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面只是一边，完整请参考：<a href="http://dabblet.com/gist/20205b5fcdd834461e80" target="_blank" rel="noopener">http://dabblet.com/gist/20205b5fcdd834461e80</a></p>
</blockquote>
<h3 id="交互式的图片对比控件"><a href="#交互式的图片对比控件" class="headerlink" title="交互式的图片对比控件"></a>交互式的图片对比控件</h3><h2 id="结构与布局"><a href="#结构与布局" class="headerlink" title="结构与布局"></a>结构与布局</h2><h3 id="自适应内部元素"><a href="#自适应内部元素" class="headerlink" title="自适应内部元素"></a>自适应内部元素</h3><ul>
<li>目标：希望width自适应其内容的宽度</li>
<li>方法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">figure</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: min-content;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>min-content</code>这个关键字将解析为这个容器内部最大的不可断行元素的宽度（即最宽的单词、图片或具有固定宽度的盒元素）</p>
</blockquote>
<h3 id="精确控制表格列宽"><a href="#精确控制表格列宽" class="headerlink" title="精确控制表格列宽"></a>精确控制表格列宽</h3><p>来自CSS2.1中的属性，叫做<code>table-layout</code>，它的默认值是auto，其行为模式被称为自动表格布局算法。不过它可以接受另一个值<code>fixed</code>，这个值的行为要明显可控一些。它把更多的控制权交给了网页开发者。</p>
<p>我们设置的（宽度）样式会直接起作用，而不仅仅作为一种提示；同时溢出行为（包括text-overflow）与其他元素行为也是一样的，因此表格的内容将只能影响表格行的高度了。</p>
<h3 id="根据兄弟元素的数量来设置样式"><a href="#根据兄弟元素的数量来设置样式" class="headerlink" title="根据兄弟元素的数量来设置样式"></a>根据兄弟元素的数量来设置样式</h3><ul>
<li>问题1：在列表项的总数为4时，选中每一项</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(4)</span>,</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(4)</span>~<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="comment">/* 当列表项正好包含四项时，命中所有列表项 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>问题2：在列表项的总数是4或更多时选中所有列表项</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(n+4)</span>,</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(n+4)</span>~<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="comment">/* 当列表至少包含四项时，命中所有列表项 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>问题3：但列表中有4个或更少的列表项时，选中所有的列表项</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(-n+4)</span>,</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(-n+4)</span> ~ <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="comment">/* 当列表最多包含四项时，命中所有列表项 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="满幅的背景，定宽的内容"><a href="#满幅的背景，定宽的内容" class="headerlink" title="满幅的背景，定宽的内容"></a>满幅的背景，定宽的内容</h3><h4 id="传统做法"><a href="#传统做法" class="headerlink" title="传统做法"></a>传统做法</h4><p>为每个区块准备两层元素：外层用来实现满幅的背景，内容用来实现定宽的内容</p>
<h4 id="单元素做法"><a href="#单元素做法" class="headerlink" title="单元素做法"></a>单元素做法</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>; <span class="comment">/* 向后兼容 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span> <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">450px</span>); <span class="comment">/* 此处说明内容宽度最大为900px */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果屏幕的宽度比内容的宽度还要窄，这个解决方案所产生的效果就是没有内边距。可以用媒体查询修复</p>
</blockquote>
<h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><h4 id="基于绝对定位的解决方案"><a href="#基于绝对定位的解决方案" class="headerlink" title="基于绝对定位的解决方案"></a>基于绝对定位的解决方案</h4><ol>
<li>使用margin</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">9em</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用calc()函数</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">3em</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">9em</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用translate</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 缺点：</p>
<ul>
<li>有时不能使用绝对定位，它对整个布局的影响太过强烈</li>
<li>如果需要居中的元素已经在高度上超过了视口，那它的顶部会被视口裁切掉</li>
<li>在某些浏览器，这个方法可能会导致元素的显示有一些模糊，因为元素可能被放置在半个像素上。这个问题可以用<code>transform-style: perserve-3d</code>来修复</li>
</ul>
</blockquote>
<h4 id="基于视口单位的解决方案"><a href="#基于视口单位的解决方案" class="headerlink" title="基于视口单位的解决方案"></a>基于视口单位的解决方案</h4><ul>
<li>margin的百分比是以父元素的宽度作为解析基准的。即使对于margin-top和margin-bottom也是如此</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50vh</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只适用于在视口中居中的场景</p>
</blockquote>
<h4 id="基于Flex的解决方案"><a href="#基于Flex的解决方案" class="headerlink" title="基于Flex的解决方案"></a>基于Flex的解决方案</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto; <span class="comment">/* main自身水平垂直居中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以设置如下，让main中的文本也水平垂直居中</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">10em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="紧贴底部的页脚-sticky-footer"><a href="#紧贴底部的页脚-sticky-footer" class="headerlink" title="紧贴底部的页脚(sticky-footer)"></a>紧贴底部的页脚(sticky-footer)</h3><h4 id="固定高度的解决方案"><a href="#固定高度的解决方案" class="headerlink" title="固定高度的解决方案"></a>固定高度的解决方案</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 把header，main包在wrapper容器中，</span></span><br><span class="line"><span class="comment">	只需考虑页脚的高度 */</span></span><br><span class="line"><span class="selector-id">#wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">7em</span>); <span class="comment">/* 页脚高度为7em */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：不仅要求我们确保页脚内的文本永远不会折行，而且每当我们改变页脚的尺寸时，都需要跟着跳转min-height值</p>
<h4 id="flex解决方案"><a href="#flex解决方案" class="headerlink" title="flex解决方案"></a>flex解决方案</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-flow</span>: column;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页头和页脚的高度由其内部因素决定，而内容main的高度</span></span><br><span class="line"><span class="comment">	应该可以自动伸展并占满所有的可用空间 */</span></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><h3 id="缓动效果"><a href="#缓动效果" class="headerlink" title="缓动效果"></a>缓动效果</h3><h3 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h3><ul>
<li>把所有帧拼合到一张图片中。使用setp()调速函数，而不是基于贝塞尔曲线的调速函数。step()会根据你指定吧步进数量，把整个动画切分为多帧，而且整个动画会在帧与帧之间硬切，不会做任何处理</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> loader &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">background-position</span>: -<span class="number">800px</span> <span class="number">0</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.loader</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(img/loader.png) <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">animation</span>: loader <span class="number">1s</span> infinite <span class="built_in">steps</span>(<span class="number">8</span>); <span class="comment">/* 8帧 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 把文本隐藏起来 */</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>steps()还可以接收可选的第二个参数，其值可以是start或end（默认值）。这个参数用于指定动画在每个循环周期的什么位置发生帧的切换动作</p>
</blockquote>
<h3 id="闪烁效果"><a href="#闪烁效果" class="headerlink" title="闪烁效果"></a>闪烁效果</h3><h3 id="打字动画"><a href="#打字动画" class="headerlink" title="打字动画"></a>打字动画</h3><ul>
<li>核心思路：让容器的宽度成为动画的主体：把所有文本包裹在这个容器中，然后让它的宽度从0开始以步进的方式、一个字一个字地扩张到它应有的宽度</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> typing &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">from</span>: &#123;<span class="attribute">width</span>: <span class="number">0</span>&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> caret &#123; <span class="comment">/* 光标 */</span></span></span><br><span class="line"><span class="css">        50% &#123;<span class="attribute">border-color</span>: currentColor;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    h1 &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">width</span>: 15<span class="selector-tag">ch</span>; <span class="comment">/* 文本的宽度 */</span></span></span><br><span class="line">        overflow: hidden;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">        animation: typing 6s steps(15),</span><br><span class="line">            	   caret 1s steps(1) inifinite;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>ch</code>单位是CSS3引入的新单位，表示“0”字形的宽度。在等宽字体中，所有字形的宽度是一样的，因此取值就是字符的数量（这里是15）</p>
</blockquote>
<h3 id="状态平滑的动画"><a href="#状态平滑的动画" class="headerlink" title="状态平滑的动画"></a>状态平滑的动画</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> panoramic &#123;</span><br><span class="line">	<span class="selector-tag">to</span> &#123; <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panoramic</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">150px</span>; <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'http://c3.staticflickr.com/3/2671/3904743709_74bc76d5ac_b.jpg'</span>);</span><br><span class="line">	<span class="attribute">background-size</span>: auto <span class="number">100%</span>;	</span><br><span class="line">	<span class="attribute">animation</span>: panoramic <span class="number">10s</span> linear infinite alternate;</span><br><span class="line">	<span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panoramic</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.panoramic</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">	<span class="attribute">animation-play-state</span>: running;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="沿环形路径平移的动画"><a href="#沿环形路径平移的动画" class="headerlink" title="沿环形路径平移的动画"></a>沿环形路径平移的动画</h3>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS部分知识点汇总</title>
    <url>/blog/2018/01/18/css-summary-1/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>记录CSS的知识点，方便查阅</p>
<a id="more"></a>

<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="标准模式-amp-混杂模式"><a href="#标准模式-amp-混杂模式" class="headerlink" title="标准模式&amp;混杂模式"></a>标准模式&amp;混杂模式</h3><ul>
<li>在标准模式中，浏览器根据规范呈现页面；</li>
<li>在混杂模式中，页面以一种比较宽松的向后兼容方式显示，混杂模式通常模拟老式浏览器的行为防止老站点无法工作</li>
</ul>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ul>
<li>使用特殊符号开头作为注释，避免找选择器时找到样式内容里去。比如以@开头</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @body styles */</span></span><br></pre></td></tr></table></figure>



<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><ul>
<li><p>id选择器（#id）</p>
<ul>
<li>类选择器（.class）</li>
</ul>
</li>
<li><p>标签选择器（p）</p>
</li>
<li><p>相邻选择器（h1+p）(h1的下一个元素且它为p)</p>
</li>
<li><p>相邻兄弟选择器（B~E） (B元素后面的拥有共同父元素的兄弟元素E)</p>
</li>
<li><p>子选择器（li &gt; a）</p>
</li>
<li><p>后代选择器（li a）</p>
</li>
<li><p>通配符选择器（*）</p>
</li>
<li><p>属性选择器</p>
<ul>
<li><p>简单的属性选择</p>
<ul>
<li>选择有class属性（值不限）的所有p元素<code>p[class]</code></li>
<li>对所有带有alt属性的图形：<code>img[alt]</code></li>
</ul>
</li>
<li><p>根据具体属性值选择</p>
<ul>
<li><code>a[href=&quot;https://www.google.com&quot;]</code></li>
</ul>
</li>
<li><p>根据部分属性值选择</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>[attr]</td>
<td>带有以 attr 命名的属性的元素</td>
</tr>
<tr>
<td>[attr=value]</td>
<td>表示带有以 attr 命名的，且值为”value”的属性的元素</td>
</tr>
<tr>
<td>[attr~=value]</td>
<td>表示带有以 attr 命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少一个值为”value”</td>
</tr>
<tr>
<td>[attr|=value]</td>
<td>表示带有以 attr 命名的属性的元素，属性值为“value”或是以“value-”为前缀。 典型的应用场景是用来来匹配语言简写代码（如zh-CN，zh-TW可以用zh作为value）</td>
</tr>
<tr>
<td>[attr^=value]</td>
<td>表示带有以 attr 命名的，且值是以”value”开头的属性的元素</td>
</tr>
<tr>
<td>[attr$=value]</td>
<td>表示带有以 attr 命名的，且值是以”value”结尾的属性的元素</td>
</tr>
<tr>
<td>[attr*=value]</td>
<td>表示带有以 attr 命名的，且值包含有”value”的属性的元素</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span>世界您好！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">lang</span>=<span class="string">"zh-TW"</span>&gt;</span>世界您好！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-lang</span>=<span class="string">"zh-TW"</span>&gt;</span>?世界您好！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[lang|=<span class="string">"zh"</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[data-lang=<span class="string">"zh-TW"</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>伪类选择器</p>
<ul>
<li><p>a:link, a:visited, a:hover, a:active</p>
</li>
<li><p>根选择器， :root{…}【等价于：html {}】</p>
</li>
<li><p>not，input:not([type=”submit”])</p>
</li>
<li><p>:target</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#test</span><span class="selector-pseudo">:target</span> &#123;</span></span><br><span class="line">    background: yellow;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#test"</span>&gt;</span>跳到标题一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>点击a链接后，页面跳到h1处，且h1背景变为黄色</p>
</blockquote>
<p>​</p>
</li>
<li><p>E:first-child：选择作为第一个子元素的E元素，:last-child与之同理</p>
</li>
<li><p>E:nth-child(f(n))：f(n)是关于n的表达式，n的值从0开始直到再无匹配元素。</p>
<p>选择<strong>同一层第f(n)个元素且为E元素</strong>。（子元素序号从1开始），:nth-last-child(f(n))与之同理</p>
</li>
<li><p>E:nth-of-type(f(n))：f(n)同上。选择<strong>同一层第f(n)个类型为E的元素</strong></p>
<p>同样有:nth-last-of-type(f(n))，:first-of-type，:last-of-type</p>
</li>
<li><p>:enabled、:disabled：针对表单可用和不可用状态设置样式</p>
</li>
<li><p>:checked：用于已选中的checkbox, radio, select</p>
</li>
</ul>
<p>​</p>
</li>
</ul>
<h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><ul>
<li>!important &gt; 内联样式 &gt; id &gt; class &gt; tag</li>
<li>权重<ul>
<li>id:100</li>
<li>class，属性选择或伪类:10</li>
<li>tag:1</li>
<li>结合符和通配符“*”以及”:not()”没有任何的加分权。</li>
<li>对于行内样式，加为“1,0,0,0”</li>
<li>对于”!important”加分高于上面的一切，将变成“1,0,0,0,0”</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">	<span class="comment">/* 权重为2*/</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span><span class="selector-id">#awesome</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-tag">red</span>; <span class="comment">/*0,1,0,1*/</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span><span class="selector-class">.shopping-list</span> <span class="selector-tag">li</span><span class="selector-class">.favorite</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-tag">blue</span>; <span class="comment">/*0,0,2,3*/</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"shopping-list"</span> <span class="attr">id</span>=<span class="string">"awesome"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"favorite"</span> <span class="attr">id</span>=<span class="string">"must-buy"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"highlight"</span>&gt;</span>Sausage<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Sausage是蓝色，主要是他们作用的是不在同一个元素之上</p>
</blockquote>
<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><h3 id="border-style"><a href="#border-style" class="headerlink" title="border-style"></a>border-style</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">border-style：[ none | hidden | dotted | dashed | solid | double | groove | ridge | inset| outset ]&#123;<span class="number">1</span>,<span class="number">4</span>&#125; | inherit （可以分别使用不同样式，按照上右下左）</span><br></pre></td></tr></table></figure>





<h3 id="阴影box-shadow"><a href="#阴影box-shadow" class="headerlink" title="阴影box-shadow"></a>阴影box-shadow</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">offset-x</span>, <span class="selector-tag">offset-y</span>, <span class="selector-tag">blur-radius</span>, <span class="selector-tag">extend-radius</span>, <span class="selector-tag">color</span>, <span class="selector-attr">[inset/outset]</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>投影方式：可选。inset为内部投影，默认外部投影</li>
</ul>
<h4 id="多个阴影"><a href="#多个阴影" class="headerlink" title="多个阴影"></a>多个阴影</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box_shadow</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">4px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">#f00</span>, -<span class="number">4px</span> -<span class="number">2px</span> <span class="number">6px</span> <span class="number">#000</span>, <span class="number">0px</span> <span class="number">0px</span> <span class="number">12px</span> <span class="number">5px</span> <span class="number">#33CC00</span> inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="边框应用图片border-image"><a href="#边框应用图片border-image" class="headerlink" title="边框应用图片border-image"></a>边框应用图片border-image</h3><p>使用 border-image 时，其将会替换掉 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-style" target="_blank" rel="noopener">border-style</a> 属性所设置的边框样式。</p>
<p>round会压缩（或伸展）图片大小使其正好在区域内显示，而repeat是一直接重复的</p>
<p><img src="https://gitee.com/sluggish/music/raw/master/border-image1.png" alt="border-image1.png"></p>
<p><img src="https://gitee.com/sluggish/music/raw/master/border-image2.jpeg" alt="border-image2.jpeg"></p>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><h3 id="rgba-R-G-B-A"><a href="#rgba-R-G-B-A" class="headerlink" title="rgba(R,G,B,A)"></a>rgba(R,G,B,A)</h3><p>R、G、B三个参数，正整数值的取值范围为：0 - 255。百分数值的取值范围为：0.0% - 100.0%。超出范围的数值将被截至其最接近的取值极限。并非所有浏览器都支持使用百分数值。A为透明度参数，取值在0~1之间，不可为负值</p>
<h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:linear-gradient(to</span> <span class="selector-tag">left</span>, <span class="selector-tag">red</span>, <span class="selector-tag">orange</span>,<span class="selector-tag">yellow</span>,<span class="selector-tag">green</span>,<span class="selector-tag">blue</span>,<span class="selector-tag">indigo</span>,<span class="selector-tag">violet</span>);</span><br></pre></td></tr></table></figure>



<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">font-style：italic（斜体） | oblique（倾斜） | normal | inherit，默认值是normal</span><br></pre></td></tr></table></figure>



<h3 id="font-variant"><a href="#font-variant" class="headerlink" title="font-variant"></a>font-variant</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">font-variant：small-caps | normal | inherit</span><br></pre></td></tr></table></figure>

<ul>
<li>small-caps：小型大写字母原来大写依旧大写，原来小写变成小个的大写</li>
</ul>
<h3 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a>@font-face</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family </span>: 字体名称;</span><br><span class="line">    <span class="attribute">src </span>: 字体文件在服务器上的相对或绝对路径;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'myfont'</span>;</span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">'wwt.TTF'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size </span>:<span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-family </span>: <span class="string">"myfont"</span>;</span><br><span class="line">    <span class="comment">/*必须项，设置@font-face中font-family同样的值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><h3 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a>text-indent</h3><ul>
<li>缩进文本</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">text-indent：&lt;length&gt; | &lt;percentage&gt; | inherit</span><br></pre></td></tr></table></figure>



<h3 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">text-decoration: &lt;'text-decoration-line'&gt; || &lt;'text-decoration-style'&gt; || &lt;'text-decoration-color'&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>underline：下划线</li>
<li>overline：上划线</li>
<li>line-through： 横穿线</li>
<li>none：啥线也没有</li>
<li>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-decoration" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-decoration</a></li>
</ul>
<h3 id="字间隔和字母间隔"><a href="#字间隔和字母间隔" class="headerlink" title="字间隔和字母间隔"></a>字间隔和字母间隔</h3><ul>
<li>字间隔：word-spacing</li>
<li>字母间隔：letter-spacing</li>
</ul>
<h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">white-space：normal | nowrap | pre | pre-wrap | pre-line | inherit</span><br></pre></td></tr></table></figure>

<ul>
<li>normal，也就是丢掉多余的空白符（空格、换行和tab字符）</li>
<li>pre：空白符不会被忽略（浏览器中不会自动换行）</li>
<li>nowrap：防止元素中的文本换行，除非使用br元素</li>
<li>pre-wray：保留空白符，正常地换行（指的是到达浏览器边界自动换行）</li>
<li>pre-line：合并空白符（保留换行符），正常地换行（同上）</li>
</ul>
<h3 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a>text-transform</h3><ul>
<li><strong>uppercase</strong>和<strong>lowercase</strong>将文本转换为<strong>全大写</strong>或者<strong>全小写</strong></li>
<li><strong>capitalize</strong>只对每个单词的<strong>首字母大写</strong></li>
</ul>
<h3 id="direction"><a href="#direction" class="headerlink" title="direction"></a>direction</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">direction：ltr | rtl | inherit</span><br></pre></td></tr></table></figure>

<ul>
<li>ltr：左对齐</li>
<li>rtl：右对齐</li>
</ul>
<h3 id="text-overflow"><a href="#text-overflow" class="headerlink" title="text-overflow"></a>text-overflow</h3><p>实现溢出文本显示省略号的效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>; </span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>; </span><br><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</span><br></pre></td></tr></table></figure>



<h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a>word-wrap</h3><p>设置文本行为，当前行超过指定容器的边界时是否断开转行</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">word-wrap: normal | break-word;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>normal：默认</p>
<p>break-word：在长单词或 URL地址内部进行换行</p>
</blockquote>
<h3 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a>text-shadow</h3><p>文本的阴影</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>: <span class="selector-tag">X-Offset</span> <span class="selector-tag">Y-Offset</span> <span class="selector-tag">blur</span> <span class="selector-tag">color</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-shadow</span>: 0 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#fff</span></span><br></pre></td></tr></table></figure>



<h2 id="浮动和定位"><a href="#浮动和定位" class="headerlink" title="浮动和定位"></a>浮动和定位</h2><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ul>
<li>依旧是文档流中的一部分，不像absolute脱离文档流</li>
<li>可以取值left, right, none, inherit</li>
<li>如果父级元素内只有浮动元素，会发生坍塌。可以通过清除浮动解决</li>
<li>一个浮动元素会尽可能靠近父级元素的top和left/right</li>
</ul>
<blockquote>
<p><a href="https://bitsofco.de/how-floating-works/" target="_blank" rel="noopener">参考链接</a></p>
</blockquote>
<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><ul>
<li>只对position不是static（默认）的元素生效</li>
<li>如果元素B堆叠在元素A的上方，那么元素A中的任意子元素都不可能堆叠在元素B的上方</li>
<li>相邻兄弟元素才可以直接通过z-index比较前后，如果不是，则看父元素</li>
</ul>
<h2 id="表布局"><a href="#表布局" class="headerlink" title="表布局"></a>表布局</h2><h3 id="border-collapse"><a href="#border-collapse" class="headerlink" title="border-collapse"></a>border-collapse</h3><table>
<thead>
<tr>
<th align="left">值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">separate</td>
<td>默认值。边框会被分开。不会忽略 border-spacing 和 empty-cells 属性。</td>
</tr>
<tr>
<td align="left">collapse</td>
<td>如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td>规定应该从父元素继承 border-collapse 属性的值。</td>
</tr>
</tbody></table>
<h3 id="分隔单元格边框"><a href="#分隔单元格边框" class="headerlink" title="分隔单元格边框"></a>分隔单元格边框</h3><h3 id="border-spacing"><a href="#border-spacing" class="headerlink" title="border-spacing"></a>border-spacing</h3><p>指定相邻单元格边框之间的距离。相当于 HTML 中的 cellspacing 属性，第二个可选的值可以用来设置不同于水平间距的垂直间距。设置在table中，如果设置在td会被忽略</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border-spacing：horizontal [vertical] | inherit;</span><br></pre></td></tr></table></figure>



<h3 id="border-collapse-1"><a href="#border-collapse-1" class="headerlink" title="border-collapse"></a>border-collapse</h3><p>用来决定表格的边框是分开的还是合并的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border-collapse: collapse(合并) | separate(默认) | inherit;</span><br></pre></td></tr></table></figure>



<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="list-style-type"><a href="#list-style-type" class="headerlink" title="list-style-type"></a>list-style-type</h3><ul>
<li>列表类型</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">list-type:  disc | circle | square | decimal | decimal-leading-zero | upper-alpha | lower-alpha | lower-roman | upper-roman | lower-greek | lower-latin |</span><br><span class="line">upper-latin | armenian | georgian | none | inherit</span><br></pre></td></tr></table></figure>



<h3 id="list-style-image"><a href="#list-style-image" class="headerlink" title="list-style-image"></a>list-style-image</h3><ul>
<li>列表项图像</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;<span class="attribute">list-style-image</span>: <span class="built_in">url</span>(ohio.gif);&#125;</span><br></pre></td></tr></table></figure>



<h3 id="list-style-position"><a href="#list-style-position" class="headerlink" title="list-style-position"></a>list-style-position</h3><ul>
<li>列表项标志位置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">list-style-position:  inside | outside | inherit;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>outside：默认样式</p>
<p>inside：相当于列表标志作为li的内容</p>
</blockquote>
<h3 id="list-style"><a href="#list-style" class="headerlink" title="list-style"></a>list-style</h3><ul>
<li>上面3者的简写</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">list-style: &lt;list-style-type&gt; || &lt;list-style-image&gt; || &lt;list-style-position&gt;</span><br></pre></td></tr></table></figure>



<h3 id="CSS计数器"><a href="#CSS计数器" class="headerlink" title="CSS计数器"></a>CSS计数器</h3><p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Counters" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Counters</a></p>
<h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><h3 id="媒介类型"><a href="#媒介类型" class="headerlink" title="媒介类型"></a>媒介类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>screen</td>
<td>彩色计算机显示</td>
</tr>
<tr>
<td>print</td>
<td>打印（分页式媒体）</td>
</tr>
<tr>
<td>projection</td>
<td>投影</td>
</tr>
<tr>
<td>all</td>
<td>所有媒体 (默认)</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">599px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"print.css"</span> <span class="attr">media</span>=<span class="string">"print"</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h3><p>设置元素背景图片的原始起始位置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-origin ： border-box | padding-box | content-box;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/sluggish/music/raw/master/background-origin.jpeg" alt="background-origin.jpeg"></p>
<h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h3><p>将背景图片做适当的裁剪</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-clip ： border-box | padding-box | content-box | no-clip</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/sluggish/music/raw/master/background-clip.jpeg" alt="background-clip.jpeg"></p>
<h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><p>设置背景图片的大小，以长度值或百分比显示，还可以通过cover和contain来对图片进行伸缩</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-size: auto | &lt;长度值&gt; | &lt;百分比&gt; | cover | contain</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1、auto：默认值，不改变背景图片的原始高度和宽度；</p>
<p>2、&lt;长度值&gt;：成对出现如200px 50px，将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放；</p>
<p>3、&lt;百分比&gt;：0％~100％之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上；</p>
<p>4、cover：顾名思义为覆盖，即将背景图片等比缩放以填满整个容器，等比例放大直到容器被覆盖。</p>
<p>5、contain：容纳，即将背景图片等比缩放至某一边紧贴容器边缘为止。等比例放大直到有三条边接触到容器为止</p>
</blockquote>
<p><img src="https://gitee.com/sluggish/music/raw/master/background-size.png" alt="background-size.png"></p>
<h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-attachment: scroll | fixed | inherit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>scroll：默认值。背景图像会随着页面其余部分的滚动而移动</p>
<p>fixed：当页面的其余部分滚动时，背景图像不会移动</p>
</blockquote>
<h3 id="CSS3背景-multiple-backgrounds"><a href="#CSS3背景-multiple-backgrounds" class="headerlink" title="CSS3背景 multiple backgrounds"></a>CSS3背景 multiple backgrounds</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-image:url1,url2,...,urlN; //多重背景图可以是url()或gradient的混合方式</span><br><span class="line"><span class="selector-tag">background-repeat</span> : <span class="selector-tag">repeat1</span>,<span class="selector-tag">repeat2</span>,...,<span class="selector-tag">repeatN</span>;</span><br><span class="line"><span class="selector-tag">backround-position</span> : <span class="selector-tag">position1</span>,<span class="selector-tag">position2</span>,...,<span class="selector-tag">positionN</span>;</span><br><span class="line"><span class="selector-tag">background-size</span> : <span class="selector-tag">size1</span>,<span class="selector-tag">size2</span>,...,<span class="selector-tag">sizeN</span>;</span><br><span class="line"><span class="selector-tag">background-attachment</span> : <span class="selector-tag">attachment1</span>,<span class="selector-tag">attachment2</span>,...,<span class="selector-tag">attachmentN</span>;</span><br><span class="line"><span class="selector-tag">background-clip</span> : <span class="selector-tag">clip1</span>,<span class="selector-tag">clip2</span>,...,<span class="selector-tag">clipN</span>;</span><br><span class="line"><span class="selector-tag">background-origin</span> : <span class="selector-tag">origin1</span>,<span class="selector-tag">origin2</span>,...,<span class="selector-tag">originN</span>;</span><br><span class="line"><span class="selector-tag">background-color</span> : <span class="selector-tag">color</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 缩写 */</span></span><br><span class="line">background ： [background-color] | [background-image] | [background-position][/background-size] | [background-repeat] | [background-attachment] | [background-clip] | [background-origin],...</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>用逗号隔开每组 background 的缩写值</li>
<li>如果有 size 值，需要紧跟 position 并且用 “/“ 隔开</li>
<li>如果有多个背景图片，而其他属性只有一个（例如 background-repeat 只有一个），表明所有背景图片应用该属性值</li>
<li>background-color 只能设置一个</li>
</ol>
</blockquote>
<h2 id="变形-transform"><a href="#变形-transform" class="headerlink" title="变形 transform"></a>变形 transform</h2><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate()"></a>rotate()</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure>



<h3 id="skew"><a href="#skew" class="headerlink" title="skew()"></a>skew()</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(30<span class="selector-tag">deg</span>,10<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewX</span>(5<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewY</span>(5<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/sluggish/music/raw/master/skew.jpeg" alt="skew.jpeg"></p>
<h3 id="scale"><a href="#scale" class="headerlink" title="scale()"></a>scale()</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(2);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleX</span>(2);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(2);</span><br></pre></td></tr></table></figure>



<h3 id="translate"><a href="#translate" class="headerlink" title="translate()"></a>translate()</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">-50</span>%, <span class="selector-tag">-50</span>%);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-tag">-50</span>%);</span><br></pre></td></tr></table></figure>



<h3 id="matrix"><a href="#matrix" class="headerlink" title="matrix()"></a>matrix()</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,<span class="selector-tag">c</span>,<span class="selector-tag">d</span>,<span class="selector-tag">e</span>,<span class="selector-tag">f</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>matrix(scaleX(), skewX(), skewY(), scaleY(), translateX(), translateY());</p>
</blockquote>
<h3 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a>transform-origin</h3><p>在没有重置<code>transform-origin</code>改变元素原点位置的情况下，CSS变形进行的旋转、位移、缩放，扭曲等操作都是以元素自己中心位置进行变形。但很多时候，我们可以通过<code>transform-origin</code>来对元素进行原点位置改变，使元素原点不在元素的中心位置，以达到需要的原点位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform-origin</span>: <span class="selector-tag">top</span> <span class="selector-tag">right</span>;</span><br></pre></td></tr></table></figure>



<h2 id="动画-transition"><a href="#动画-transition" class="headerlink" title="动画 transition"></a>动画 transition</h2><p>CSS3的过度transition属性是一个复合属性，主要包括以下几个子属性：</p>
<ul>
<li><code>transition-property</code>:指定过渡或动态模拟的CSS属性</li>
<li><code>transition-duration</code>:指定完成过渡所需的时间</li>
<li><code>transition-timing-function</code>:指定过渡函数</li>
<li><code>transition-delay</code>:指定开始出现的延迟时间</li>
</ul>
<h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><p><img src="https://gitee.com/sluggish/music/raw/master/transition-property.png" alt="transition-property.png"></p>
<h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3><p><img src="https://gitee.com/sluggish/music/raw/master/transition-timing-function.png" alt="transition-timing-function.png"></p>
<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123; <span class="attribute">transition</span>: background <span class="number">0.8s</span> ease-in <span class="number">0.3</span>,color <span class="number">0.6s</span> ease-out <span class="number">0.3</span>;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="动画-animation"><a href="#动画-animation" class="headerlink" title="动画 animation"></a>动画 animation</h2><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="keyframes"></a>keyframes</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> changecolor &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">background</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: changecolor <span class="number">5s</span> ease-out .<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中0%和100%还可以使用关键词from和to来代表</p>
</blockquote>
<h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">animation-name</span>: around; <span class="comment">/*动画名，即keyframes名*/</span></span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">10s</span>; <span class="comment">/* 动画播放时间 */</span></span><br><span class="line">    <span class="attribute">animation-timing-function</span>: ease; <span class="comment">/* 同transition */</span></span><br><span class="line">    <span class="attribute">animation-delay</span>: <span class="number">1s</span>; <span class="comment">/* 开始执行动画之前等待的时间 */</span></span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">    <span class="attribute">animation-direction</span>:alternate;</span><br><span class="line">    <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">    <span class="attribute">animation-play-state</span>:paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h4><p>播放次数</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">animation-iteration-count: infinite | &lt;number&gt; [, infinite | &lt;number&gt;]*</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其值通常为整数，但也可以使用带有小数的数字，其默认值为1，这意味着动画将从开始到结束只播放一次。</p>
<p>如果取值为infinite，动画将会无限次的播放</p>
</blockquote>
<h4 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h4><p>设置动画播放方向</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">animation-direction:normal | alternate [, normal | alternate]*</span><br></pre></td></tr></table></figure>



<h4 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h4><p>控制元素动画的播放状态</p>
<p>有两个值：running和paused</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: move;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-in;</span><br><span class="line">  <span class="attribute">animation-delay</span>: .<span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line">  <span class="attribute">animation-direction</span>:alternate;</span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">  <span class="attribute">animation-play-state</span>:paused;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>:running;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h4><p>定义在动画开始之前和结束之后发生的操作。主要具有四个属性值：none、forwards、backwords和both。其四个属性值对应效果如下</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td><strong>默认值</strong>，表示动画将按预期进行和结束，在动画完成其最后一帧时，动画会反转到初始帧处</td>
</tr>
<tr>
<td>forwards</td>
<td>表示动画在结束后继续应用最后的关键帧的位置</td>
</tr>
<tr>
<td>backwards</td>
<td>会在向元素应用动画样式时迅速应用动画的初始帧</td>
</tr>
<tr>
<td>both</td>
<td>元素动画同时具有forwards和backwards效果</td>
</tr>
</tbody></table>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><ul>
<li><p>对于行内非替换（inline）元素：</p>
<p>上下外边距对行高没有任何影响，能改变行间距离的只有line-height、font-size和vertical-align。左右外边距则会有影响</p>
</li>
<li><p>对于行内替换（inline-block）元素：</p>
<p>上下左右外边距都会产生影响！</p>
</li>
</ul>
<h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><ul>
<li><p>内边距和行内非替换（inline）元素</p>
<p>上下内边距不影响行高，但<strong>背景会被延伸</strong></p>
<p>左右内边距会起作用，挤开两边</p>
</li>
<li><p>对于行内替换（inline-block）元素</p>
<p>上下左右内边距都会产生影响</p>
</li>
</ul>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效</p>
<h4 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h4><ul>
<li><p><strong>flex-direction</strong>：row | row-reverse | column | column-reverse;【主轴方向，项目的排列方向】</p>
</li>
<li><p><strong>flex-wrap</strong>：nowrap | wrap | wrap-reverse; 【换行方式，默认不换行】</p>
</li>
<li><p><strong>flex-flow</strong>：<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p>
</li>
<li><p><strong>justify-content</strong>：flex-start | flex-end | center | space-between | space-around;【项目在主轴的对齐方式】</p>
<ul>
<li>space-between：两端对齐，项目之间的间隔相等</li>
<li>space-around: 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</li>
<li><p><strong>align-items</strong>：flex-start | flex-end | center | baseline | stretch;【项目在交叉轴的对齐方式】</p>
<ul>
<li>baseline: 项目的第一行文字的基线对齐</li>
<li>stretch（默认值）:如果项目未设置高度或设为auto，将占满整个容器的高度</li>
</ul>
</li>
<li><p><strong>align-content</strong>：flex-start | flex-end | center | space-between | space-around | stretch;【定义了多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用】</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt="来自阮一峰老师日志"></p>
</li>
</ul>
<h4 id="子项目属性"><a href="#子项目属性" class="headerlink" title="子项目属性"></a>子项目属性</h4><ul>
<li><strong>order</strong>： <code>&lt;integer&gt;</code>; 【定义项目的排列顺序。数值越小，排列越靠前，默认为0】</li>
<li><strong>flex-grow</strong>：<code>&lt;number&gt;</code>; 【项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大】</li>
<li><strong>flex-shrink</strong>：<code>&lt;number&gt;</code>;【项目的缩小比例，默认为1，即如果空间不足，该项目将缩小】</li>
<li><strong>flex-basis</strong>： <code>&lt;length&gt; | auto</code>;【在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小】</li>
<li><strong>flex</strong>：<code>flex-grow, flex-shrink 和 flex-basis</code>的简写，默认值为0 1 auto。后两个属性可选。</li>
<li><strong>align-self</strong>：auto | flex-start | flex-end | center | baseline | stretch;【允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>】</li>
</ul>
<blockquote>
<p>内容来源：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
</blockquote>
<h2 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h2><h3 id="定制光标"><a href="#定制光标" class="headerlink" title="定制光标"></a>定制光标</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">cursor</span>: <span class="built_in">url</span>(xxx.gif), pointer;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在定制的语法中，URL必须跟有一个逗号和某个通用关键字</p>
</blockquote>
<p>各种不同的光标：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor</a></p>
<h3 id="outline外轮廓属性"><a href="#outline外轮廓属性" class="headerlink" title="outline外轮廓属性"></a>outline外轮廓属性</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">outline: [outline-width] || [outline-style] || ［outline-color］</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>属性值说明</th>
</tr>
</thead>
<tbody><tr>
<td>outline-color</td>
<td>定义轮廓线的颜色，属性值为CSS中定义的颜色值。在实际应用中，可以将此参数省略，省略时此参数的默认值为黑色。</td>
</tr>
<tr>
<td>outline-style</td>
<td>定义轮廓线的样式，属性为CSS中定义线的样式。在实际应用中，可以将此参数省略，省略时此参数的默认值为none，省略后不对该轮廓线进行任何绘制。</td>
</tr>
<tr>
<td>outline-width</td>
<td>定义轮廓线的宽度，属性值可以为一个宽度值。在实际应用中，可以将此参数省略，省略时此参数的默认值为medium，表示绘制中等宽度的轮廓线。</td>
</tr>
<tr>
<td>outline-offset</td>
<td>定义轮廓边框的偏移位置的数值，此值可以取负数值。当此参数的值为正数值，表示轮廓边框向外偏离多少个像素；当此参数的值为负数值，表示轮廓边框向内偏移多少个像素。</td>
</tr>
<tr>
<td>inherit</td>
<td>元素继承父元素的outline效果。</td>
</tr>
</tbody></table>
<blockquote>
<p>outline不影响点击事件区域</p>
</blockquote>
<h3 id="生成内容"><a href="#生成内容" class="headerlink" title="生成内容"></a>生成内容</h3><p>通过CSS3的伪类“:before”，“:after”和CSS3的伪元素“::before”、“::after”来实现，其关键是依靠CSS3中的“content”属性来实现</p>
<p>content配合CSS的伪类或者伪元素，一般可以做以下四件事情：</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>不生成任何内容</td>
</tr>
<tr>
<td>attr</td>
<td>插入标签属性值</td>
</tr>
<tr>
<td>url</td>
<td>使用指定的绝对或相对地址插入一个外部资源（图像，声频，视频或浏览器支持的其他任何资源）</td>
</tr>
<tr>
<td>string</td>
<td>插入字符串</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">title</span>=<span class="string">"我是一个title属性值，我插在你的后面"</span>&gt;</span>我是元素<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可以通过”:after”和”content:attr(title)”将元素的”title”值插入到元素内容“我是元素”之后：--&gt;</span></span><br><span class="line">a:after &#123;</span><br><span class="line">  content:attr(title);</span><br><span class="line">       color:#f00;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>允许你控制一个元素的可调整大小性</p>
<p>适用元素：overflow不为visible的元素</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">resize: none | both | horizontal | vertical | inherit;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果一个block元素的 overflow 属性被设置成了<code>visible</code>，那么<code>resize</code>属性对该元素无效</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>为了提高页面的可访问性，在定义鼠标悬停状态时，最好在链接上添加<code>:focus</code>伪类。在通过键盘移动到链接上时，这让链接显示的样式与鼠标悬停时相同。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="移动端自适应"><a href="#移动端自适应" class="headerlink" title="移动端自适应"></a>移动端自适应</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js自动确定缩放比</span></span><br><span class="line"><span class="keyword">var</span> dpr, rem, scale;</span><br><span class="line"><span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="keyword">var</span> fontEl = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line"><span class="keyword">var</span> metaEl = <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// devicePixelRatio:设备像素比</span></span><br><span class="line">dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>;</span><br><span class="line"><span class="comment">// clientWidth:设备宽度</span></span><br><span class="line">rem = docEl.clientWidth * dpr / <span class="number">10</span>;</span><br><span class="line">scale = <span class="number">1</span> / dpr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置viewport，进行缩放，达到高清效果</span></span><br><span class="line">metaEl.setAttribute(<span class="string">'content'</span>, <span class="string">'width='</span> + dpr * docEl.clientWidth + <span class="string">',initial-scale='</span> + scale + <span class="string">',maximum-scale='</span> + scale + <span class="string">', minimum-scale='</span> + scale + <span class="string">',user-scalable=no'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置data-dpr属性，留作的css hack之用</span></span><br><span class="line">docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态写入样式</span></span><br><span class="line">docEl.firstElementChild.appendChild(fontEl);</span><br><span class="line">fontEl.innerHTML = <span class="string">'html&#123;font-size:'</span> + rem + <span class="string">'px!important;&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给js调用的，某一dpr下rem和px之间的转换函数</span></span><br><span class="line"><span class="built_in">window</span>.rem2px = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    v = <span class="built_in">parseFloat</span>(v);</span><br><span class="line">    <span class="keyword">return</span> v * rem;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    v = <span class="built_in">parseFloat</span>(v);</span><br><span class="line">    <span class="keyword">return</span> v / rem;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.dpr = dpr;</span><br><span class="line"><span class="built_in">window</span>.rem = rem;</span><br></pre></td></tr></table></figure>



<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scss定义rem及px转换函数</span></span><br><span class="line"><span class="keyword">@charset</span> <span class="string">"utf-8"</span>;</span><br><span class="line"><span class="keyword">@mixin</span> px2rem(<span class="variable">$name</span>, <span class="variable">$px</span>) &#123;</span><br><span class="line">    #&#123;<span class="variable">$name</span>&#125;:<span class="variable">$px</span>/<span class="number">75</span>*<span class="number">1rem</span>; <span class="comment">// 这个75是根据iPhone6设计稿（已放大2倍）来的，实际应根据对应的设计稿修改。</span></span><br><span class="line">    <span class="comment">// 75 = 375 * 2 / 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设计稿对应的手机的宽度为clientWidth，即设备CSS宽度</span></span><br><span class="line">    <span class="comment">// 设计稿放大的倍数为n</span></span><br><span class="line">    <span class="comment">// 除数75对应的位置为 n*clientWidth/10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于让不同设备显示的CSS像素(看起来的尺寸）一致，除以2是设计稿放大的倍数为2</span></span><br><span class="line"><span class="comment">// 不使用次函数的话，经过缩放后默认在不同设备显示的物理像素一样</span></span><br><span class="line"><span class="keyword">@mixin</span> px2px(<span class="variable">$name</span>, <span class="variable">$px</span>) &#123;</span><br><span class="line">    #&#123;<span class="variable">$name</span>&#125;: round(<span class="variable">$px</span> / <span class="number">2</span>) * <span class="number">1px</span>;</span><br><span class="line">    <span class="selector-attr">[data-dpr="2"]</span> &amp; &#123;</span><br><span class="line">        #&#123;<span class="variable">$name</span>&#125;: <span class="variable">$px</span> * <span class="number">1px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for mx3</span></span><br><span class="line">    <span class="selector-attr">[data-dpr="2.5"]</span> &amp; &#123;</span><br><span class="line">        #&#123;<span class="variable">$name</span>&#125;: round(<span class="variable">$px</span> * <span class="number">2.5</span> / <span class="number">2</span>) * <span class="number">1px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for 小米note</span></span><br><span class="line">    <span class="selector-attr">[data-dpr="2.75"]</span> &amp; &#123;</span><br><span class="line">        #&#123;<span class="variable">$name</span>&#125;: round(<span class="variable">$px</span> * <span class="number">2.75</span> / <span class="number">2</span>) * <span class="number">1px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-attr">[data-dpr="3"]</span> &amp; &#123;</span><br><span class="line">        #&#123;<span class="variable">$name</span>&#125;: round(<span class="variable">$px</span> * <span class="number">3</span> /<span class="number">2</span>) * <span class="number">1px</span></span><br><span class="line">    &#125;</span><br><span class="line">    // for 三星note4</span><br><span class="line">    [data-dpr=<span class="string">"4"</span>] &amp; &#123;</span><br><span class="line">        #&#123;<span class="variable">$name</span>&#125;: <span class="variable">$px</span> * <span class="number">2px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Reference" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/Reference</a></p>
<p><a href="https://www.imooc.com/learn/33" target="_blank" rel="noopener">https://www.imooc.com/learn/33</a></p>
<p><a href="https://div.io/topic/1092" target="_blank" rel="noopener">https://div.io/topic/1092</a></p>
</blockquote>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title>EffectiveJS笔记01之让自己习惯JavaScript</title>
    <url>/blog/2017/11/02/effective-js-1-accustoming-yourself-to-js/</url>
    <content><![CDATA[<h2 id="了解你使用的JavaScript版本"><a href="#了解你使用的JavaScript版本" class="headerlink" title="了解你使用的JavaScript版本"></a>了解你使用的JavaScript版本</h2><p>1、”use strict”指令只有在脚本或函数的顶部才能生效</p>
<p>2、合并多个不同模式下的js文件时。解决方案：将其自身包裹在立即的函数表达式（IIFE）中的方式连接多个文件。</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// no strict-mode directive</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// file1.js</span></span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// file2.js</span></span><br><span class="line">    <span class="comment">// no strict-mode directive</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要想构建代码以获得最大的兼容性，最简单的方法是在严格模式下编写代码，并显式地将代码内容包裹在本地启用了严格模式的函数中。</p>
</blockquote>
<h2 id="理解JavaScript的浮点数"><a href="#理解JavaScript的浮点数" class="headerlink" title="理解JavaScript的浮点数"></a>理解JavaScript的浮点数</h2><p>1、JavaScript中的所有数字都是双精度浮点数，都是64位编码数字</p>
<p>2、所有位运算符的工作方式都是相同的。它们将操作数转换为整数，然后使用整数位模式进行运算，最后将结果转换为标准的JavaScript浮点数</p>
<p>3、浮点数运算只能产生近似的结果，四舍五入到最接近的可表示的实数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="number">0.1</span> + <span class="number">0.2</span>) + <span class="number">0.3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.1</span> + (<span class="number">0.2</span> + <span class="number">0.3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 0.6000000000000001</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 0.6</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于整数运算，不必担心舍入误差，只需担心计算范围在**-2^(53) ~ 2^(53)**</p>
</blockquote>
<h2 id="担心隐式的强制转换"><a href="#担心隐式的强制转换" class="headerlink" title="担心隐式的强制转换"></a>担心隐式的强制转换</h2><p>1、算术运算符<code>-、*、/</code>和%在计算之前都会尝试将其转换为数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'17'</span>*<span class="number">3</span>; <span class="comment">// 51</span></span><br><span class="line"><span class="string">'8'</span>|<span class="string">'1'</span>; <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>

<p>2、标准的库函数也不是很可靠，因为它带有自己的隐式强制转换，会将参数转换为数字（isNaN函数的一个更精确的名称可能是coerecesToNaN）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">isNaN</span>(<span class="literal">NaN</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">isNaN</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">isNaN</span>(<span class="literal">undefined</span>);</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">isNaN</span>(&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> e = <span class="built_in">isNaN</span>(&#123; <span class="attr">valueOf</span>: <span class="string">'foo'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>更通用的方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isReallyNaN</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x !== x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、valueOf 与 toString</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'j'</span> + &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'s'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span> * &#123;</span><br><span class="line">    valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'[object MyObject]'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">66</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// js</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'object'</span> + obj); <span class="comment">// object66</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>valueOf 方法才是真正为那些代表数值的对象（如Number对象）而设计的。对于这些对象，toString和valueOf方法应返回一致的结果（相同数字的字符串或数值表示），因此，不管是对象的连接还是对象的相加，重载的运算符+总是一致的行为。最好避免使用valueOf方法，除非对象的确是一个数字的抽象，并且obj.toString() 能产生一个obj.valueOf()的字符串表示</p>
</blockquote>
<h2 id="原始类型优于封装对象"><a href="#原始类型优于封装对象" class="headerlink" title="原始类型优于封装对象"></a>原始类型优于封装对象</h2><p>1、不同于原始的字符串，String对象是一个真正的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">'world'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s1); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s2); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>

<p>2、每个String对象都是一个单独的对象，其总是只等于自身</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1 == s2); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(s3 === s4); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1 == s3); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(s1 === s3); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>3、当对原始值提取属性和进行方法调用时，它表现得就像已经使用了对应的对象类型封装了该值一样，隐式封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>.toUpperCase()); <span class="comment">// HELLO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span>;</span><br><span class="line">str.child = <span class="string">'world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.child); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>不可以对原始值设置属性，无效。因为每次隐式封装都会产生一个新的String对象，更新第一个封装对象并不会造成持久的影响。</p>
</blockquote>
<h2 id="避免对混合类型使用-运算符"><a href="#避免对混合类型使用-运算符" class="headerlink" title="避免对混合类型使用==运算符"></a>避免对混合类型使用==运算符</h2><p>1、== 运算符的强制转换规则</p>
<table>
<thead>
<tr>
<th align="left">参数类型1</th>
<th align="left">参数类型2</th>
<th align="left">强制转换</th>
</tr>
</thead>
<tbody><tr>
<td align="left">null</td>
<td align="left">undefined</td>
<td align="left">不转换，总是返回true</td>
</tr>
<tr>
<td align="left">null或undefined</td>
<td align="left">其他任何非null或undefined的类型</td>
<td align="left">不转换，总是返回false</td>
</tr>
<tr>
<td align="left">原始类型：string、number或boolean</td>
<td align="left">Date对象</td>
<td align="left">将Date对象转换为原始类型（优先尝试toString方法，再尝试valueOf方法）</td>
</tr>
<tr>
<td align="left">原始类型：string、number或boolean</td>
<td align="left">非Date对象</td>
<td align="left">将非Date对象转换为原始类型（优先尝试valueOf方法，再尝试toString方法）</td>
</tr>
<tr>
<td align="left">原始类型：string、number或boolean</td>
<td align="left">原始类型：string、number或boolean</td>
<td align="left">将原始类型转换为数字</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017/11/11'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date == <span class="string">'2017/11/11'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// 2017-11-10T16:00:00.000Z</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>不等是因为Date对象呗转换成一种不同格式的字符串，而不是本例所采用的格式。</p>
</blockquote>
<p>更好的策略是显式自定义应用程序转换的逻辑，并使用严格相等运算符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toYMD</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = date.getYear() + <span class="number">1900</span>,</span><br><span class="line">        m = date.getMonth() + <span class="number">1</span>,</span><br><span class="line">        d = date.getDate();</span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">'/'</span> + (m &lt; <span class="number">10</span> ? <span class="string">'0'</span> + m : m) + <span class="string">'/'</span> + (d &lt; <span class="number">10</span> ? <span class="string">'0'</span> + d : d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017/11/11'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(toYMD(date) === <span class="string">'2017/11/11'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h2 id="了解分号插入的局限"><a href="#了解分号插入的局限" class="headerlink" title="了解分号插入的局限"></a>了解分号插入的局限</h2><p>1、5个明确有问题的字符需要密切注意：<code>(、[、+、-</code>和<code>/</code>，每一个字符都能作为一个表达式运算符或者一条语句的前缀。如果下一行以这5个字符之一开始，那么本行不会自动插入分号。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> a = b</span><br><span class="line">[<span class="string">'r'</span>,<span class="string">'g'</span>,<span class="string">'b'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    color[key] = <span class="number">255</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：</span></span><br><span class="line"><span class="comment">// 'r','g','b'].forEach(function(key) &#123;</span></span><br><span class="line"><span class="comment">//              ^</span></span><br><span class="line"><span class="comment">// TypeError: Cannot read property 'forEach' of undefined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因在于第4行以<code>[</code>开始，因此和第三行一起被解析为一条语句，等价于：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b[<span class="string">'r'</span>,<span class="string">'g'</span>,<span class="string">'b'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    color[key] = <span class="number">255</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>中括号中是逗号分隔表达式，从左到右一次执行，并返回最后一个表达式的值，对于本例，返回字符”b”</p>
</blockquote>
<p>解决办法：在<code>(、[、+、-</code>和<code>/</code>字符的开始的前一行末尾加分号。最安全的是不要省略分号</p>
<h2 id="视字符串为16位的代码单元序列"><a href="#视字符串为16位的代码单元序列" class="headerlink" title="视字符串为16位的代码单元序列"></a>视字符串为16位的代码单元序列</h2><p>UFT-16的每个代码点编码需要一个或两个16位的代码单元，因此UTF-16是一种可变长度的编码。</p>
<p>JS已经采用16位的字符串元素。字符串属性和方法（如length、chatAt和charCodeAt）都是基于代码单元层级，而不是代码点层级。所以每当字符串包含辅助平面中的代码点时，JS将每个代码点表示为两个代码单元。</p>
<blockquote>
<p>Unicode标准从当时的2^16扩展到了超过2^20个代码点。新增加的范围被组织为17个大小为2^16个代码点。第一个子范围，称为<em>基本多文种平面（Basic Multilingual Plane，BMP）</em>，包含最初的2^16个代码点。余下的16个范围称为 <em>辅助平面（supplementary plane）</em>。</p>
</blockquote>
<p><img src="https://s2.ax1x.com/2019/10/13/uxgfpR.png" alt="一个包含来自辅助平面的代码点的JavaScript字符串"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'𠮷a'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'吉a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.length); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b.length); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.charCodeAt(<span class="number">0</span>)); <span class="comment">// 55362</span></span><br><span class="line"><span class="built_in">console</span>.log(a.charCodeAt(<span class="number">1</span>)); <span class="comment">// 57271</span></span><br><span class="line"><span class="built_in">console</span>.log(a.charCodeAt(<span class="number">2</span>)); <span class="comment">// 97</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.charAt(<span class="number">1</span>)); <span class="comment">// 乱码</span></span><br><span class="line"><span class="built_in">console</span>.log(a.charAt(<span class="number">2</span>)); <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log(b.charAt(<span class="number">1</span>)); <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/</span>.test(<span class="string">'𠮷'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^..$/</span>.test(<span class="string">'𠮷'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>正则表达式也工作于代码单元层级，其单字符模式（“ . ”）匹配一个单一的代码单元。</p>
<p>上面代码中，汉字<code>𠮷</code>的码点是0x20BB7，UTF-16编码为0xD842 0xDFB7（十进制为55362 57271），需要4个字节储存。</p>
<p>对于这种4个字节的字符，JavaScript不能正确处理，字符串长度会误判为2，而且charAt方法无法读取整个字符，charCodeAt方法只能分别返回前两个字节和后两个字节的值。</p>
</blockquote>
<h2 id="ES6-codePointAt方法"><a href="#ES6-codePointAt方法" class="headerlink" title="ES6 codePointAt方法"></a>ES6 codePointAt方法</h2><p>ES6提供了<strong>codePointAt</strong>方法，能够正确处理4个字节储存的字符，返回一个字符的码点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.codePointAt(<span class="number">0</span>)); <span class="comment">// 134071</span></span><br><span class="line"><span class="built_in">console</span>.log(s.codePointAt(<span class="number">1</span>)); <span class="comment">// 57271</span></span><br><span class="line"><span class="built_in">console</span>.log(s.codePointAt(<span class="number">2</span>)); <span class="comment">// 97</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>JavaScript将“𠮷a”视为三个字符，<code>codePointAt</code>方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点134071（即十六进制的20BB7）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，<code>codePointAt</code>方法的结果与<code>charCodeAt</code>方法相同。</p>
<p><code>codePointAt</code>方法的参数，仍然是不正确的。比如，上面代码中，字符a在字符串s的正确位置序号应该是1，但是必须向codePointAt方法传入2。解决这个问题的一个办法是使用for…of循环，因为它会正确识别32位的UTF-16字符。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 20bb7</span></span><br><span class="line"><span class="comment">// 61</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以用<code>codePointAt</code>方法是测试一个字符由两个字节还是由四个字节组成</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is32Bit</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c.codePointAt(<span class="number">0</span>) &gt; <span class="number">0xFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(is32Bit(<span class="string">"𠮷"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(is32Bit(<span class="string">"a"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<h2 id="ES6-fromCodePoint方法"><a href="#ES6-fromCodePoint方法" class="headerlink" title="ES6 fromCodePoint方法"></a>ES6 fromCodePoint方法</h2><p>ES6提供了<strong>String.fromCodePoint</strong>方法，可以识别大于<code>0xFFFF</code>的字符，弥补了<code>String.fromCharCode</code>方法的不足。在作用上，正好与<code>codePointAt</code>方法相反</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="number">0x20BB7</span>));</span><br><span class="line"><span class="comment">// "𠮷"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="number">0x78</span>, <span class="number">0x1f680</span>, <span class="number">0x79</span>) === <span class="string">'x\uD83D\uDE80y'</span>);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接：<a href="http://es6.ruanyifeng.com/#docs/string" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/string</a></p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>EffectiveJS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>EffectiveJavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>EffectiveJS笔记02之变量作用域</title>
    <url>/blog/2017/11/04/effective-js-2-variable-scope/</url>
    <content><![CDATA[<h2 id="理解变量声明提升"><a href="#理解变量声明提升" class="headerlink" title="理解变量声明提升"></a>理解变量声明提升</h2><p>1、变量的作用域是整个函数，但仅在var语句出现的位置进行赋值</p>
<a id="more"></a>

<p><img src="https://s2.ax1x.com/2019/10/13/ux2UHO.png" alt="变量声明提升"></p>
<p>2、同一函数中多次声明相同变量是合法的。这在写多个循环时会经常出现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trimSections</span>(<span class="params">header, body, footer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = header.length; i &lt; n; i++) &#123;</span><br><span class="line">        header[i] = header[i].trim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = body.length; i &lt; n; i++) &#123;</span><br><span class="line">        body[i] = body[i].trim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = footer.length; i &lt; n; i++) &#123;</span><br><span class="line">        footer[i] = footer[i].trim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>trimSections</code>函数好像声明了6个局部变量（3个变量i，3个变量n），但经过变量声明提升后其实只声明了2个。</p>
</blockquote>
<p>3、<code>try...catch</code>语句将捕获的异常绑定到一个变量，该变量的作用域只是<code>catch</code>语句块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">'var'</span>,</span><br><span class="line">        result = [];</span><br><span class="line">    result.push(x);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'exception'</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (x) &#123;</span><br><span class="line">        x = <span class="string">'catch'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result.push(x);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// [ 'var', 'var' ]</span></span><br></pre></td></tr></table></figure>

<p>4、闭包存储的是其外部变量的引用而不是值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapElements</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [],</span><br><span class="line">        i, n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, n = a.length; i &lt; n; i++) &#123;</span><br><span class="line">        result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a[i];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wrapped = wrapElements([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = wrapped[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(f()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>为了让<code>result[i]</code>执行后返回的是<code>a[i]</code>的值。解决办法是通过创建一个嵌套函数并立即调用它来强制创建一个局部作用域。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapElements</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [],</span><br><span class="line">        i, n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, n = a.length; i &lt; n; i++) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">            result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a[j]; </span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;)(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="担心命名函数表达式笨拙的作用域"><a href="#担心命名函数表达式笨拙的作用域" class="headerlink" title="担心命名函数表达式笨拙的作用域"></a>担心命名函数表达式笨拙的作用域</h2><p>1、匿名和命名函数表达式的官方区别在于后者会绑定到与其函数名相同的变量上，该变量将作为该函数内的一个局部变量。这可以用来写递归函数表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">tree, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tree) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree.key === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> find(tree.left, key) ||</span><br><span class="line">        find(tree.right, key);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">find(<span class="string">'tree'</span>,<span class="string">'foo'</span>); <span class="comment">// ReferenceError: find is not defined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，变量find的作用域只在其自身函数中。命名函数表达式不能通过其内部的函数名在外部被引用。</p>
<p>使用命名函数表达式进行递归似乎没有必要，因为使用外部作用域的函数名也可以达到同样的效果。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">tree, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tree) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree.key === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f(tree.left, key) ||</span><br><span class="line">           f(tree.right, key);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="担心局部块函数声明笨拙的作用域"><a href="#担心局部块函数声明笨拙的作用域" class="headerlink" title="担心局部块函数声明笨拙的作用域"></a>担心局部块函数声明笨拙的作用域</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'local'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        result.push(f());</span><br><span class="line">    &#125;</span><br><span class="line">    result.push(f());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="literal">true</span>)); <span class="comment">// ['local', 'local']</span></span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="literal">false</span>)); <span class="comment">// ['local']</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>JS没有块级作用域，所以内部函数f的作用域是整个test函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'global'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'local'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(f());</span><br><span class="line">    &#125;</span><br><span class="line">    result.push(f());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">//13行 result.push(f());</span></span><br><span class="line"><span class="comment">//TypeError: f is not a function</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>避免将函数置于局部块或子语句中。</p>
<p>如果需要有条件的选择函数，使用var声明和函数表达式来实现</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'global'</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> g = f,</span><br><span class="line">        result = [];</span><br><span class="line">    <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        g = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'local'</span>; &#125;</span><br><span class="line">        result.push(g());</span><br><span class="line">    &#125;</span><br><span class="line">    result.push(g());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="literal">true</span>)); <span class="comment">// [ 'local', 'local' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="literal">false</span>)); <span class="comment">// [ 'global' ]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
        <category>EffectiveJS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>EffectiveJavaScript</tag>
        <tag>作用域</tag>
      </tags>
  </entry>
  <entry>
    <title>EffectiveJS笔记03之使用函数</title>
    <url>/blog/2017/11/07/effective-js-3-working-with-functions/</url>
    <content><![CDATA[<h2 id="函数调用，方法调用，构造函数调用"><a href="#函数调用，方法调用，构造函数调用" class="headerlink" title="函数调用，方法调用，构造函数调用"></a>函数调用，方法调用，构造函数调用</h2><p>1、方法不过是对象的属性恰好是函数而已</p>
<p>2、一个非方法的函数调用会将全局对象作为接收者，将this绑定到全局对象上。而严格模式下会将this变量的默认值改为undefined</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello '</span> + <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi '</span> + <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    hello: hello,</span><br><span class="line">    hi: hi,</span><br><span class="line">    username: <span class="string">'bob'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.hello()); <span class="comment">// hello bob</span></span><br><span class="line"><span class="built_in">console</span>.log(hello()); <span class="comment">// hello undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.hi()); <span class="comment">// hi bob</span></span><br><span class="line"><span class="built_in">console</span>.log(hi());</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// return 'hi ' + this.username;</span></span><br><span class="line"><span class="comment">//                    ^</span></span><br><span class="line"><span class="comment">// TypeError: Cannot read property 'username' of undefined</span></span><br></pre></td></tr></table></figure>

<p>3、构造函数调用将一个全新的对象作为this变量的值，并隐式返回这个新对象作为调用结果。构造函数主要职责是初始化该新对象。</p>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>1、高阶函数无非是那些将函数作为参数或返回值的函数</p>
<p>2、使用数组<code>map</code>方法，可以完全消除循环，仅使用一个局部函数就可以实现对元素的逐个转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'fred'</span>,<span class="string">'Wilma'</span>,<span class="string">'Pebbles'</span>];</span><br><span class="line"><span class="keyword">var</span> upper = names.map(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name.toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(upper); <span class="comment">// [ 'FRED', 'WILMA', 'PEBBLES' ]</span></span><br></pre></td></tr></table></figure>

<p>3、使用<code>call、apply</code>去调用函数时，如果函数中没有引用this变量，则可以简单的将第一个参数设为<code>null</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ave</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>,</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum / len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ave.call(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(ave.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>



<h2 id="永远不要修改arguments对象"><a href="#永远不要修改arguments对象" class="headerlink" title="永远不要修改arguments对象"></a>永远不要修改arguments对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callMethod</span>(<span class="params">obj, method</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> shift = [].shift;</span><br><span class="line">    shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> obj[method].apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">callMethod(obj,<span class="string">'add'</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 报错：TypeError: Cannot read property 'apply' of undefined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>该函数出错的原因是<code>arguments</code>对象并不是函数参数的副本。所有的命名参数都是<code>arguments</code>对象中对应索引的别名。</p>
<p>即使通过shift方法移除<code>arguments</code>对象中的元素之后，<code>obj</code>仍然是<code>arguments[0]</code>的别名，<code>method</code>仍然是<code>arguments[1]</code>的别名。</p>
<p>这意味着我们似乎是在提取<code>obj[&#39;add&#39;]</code>，但实际上是在提取<code>17[25]</code>。引擎将<code>17</code>转换为Number对象并提取其<code>25</code>属性（该属性不存在），结果产生<code>undefined</code>，然后试图提取<code>undefined</code>的<code>apply</code>属性并将其作为方法来调用，因此报错。</p>
</blockquote>
<p>严格模式下，函数参数不支持对其<code>arguments</code>对象取别名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="string">'modified'</span>;</span><br><span class="line">    <span class="keyword">return</span> x === <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonstrict</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="string">'modified'</span>;</span><br><span class="line">    <span class="keyword">return</span> x === <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strict(<span class="string">'unmodified'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(nonstrict(<span class="string">'unmodified'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>也就是，在严格模式下，arguments对象只是参数的一个副本，之后的修改不影响参数值。</p>
<p>例外情况：传入的是对象（或数组）的引用，函数内<code>arguments</code>修改的是<strong>对象的属性</strong>，则参数会同时被修改【这点不管在严格模式还是非严格模式都一样】</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>].name = <span class="string">'hehe'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.name); <span class="comment">// 输出'hehe'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strict(&#123;<span class="attr">name</span>: <span class="string">'haha'</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>因此，永远不要修改arguments对象是更为安全的。通过一开始复制参数中的元素到一个真正的数组的方式，很容易避免修改arguments对象，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure>



<h2 id="bind方法"><a href="#bind方法" class="headerlink" title="bind方法"></a>bind方法</h2><p>1、**bind()**方法创建的是一个新的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> siteDomain = <span class="string">'baidu'</span>;</span><br><span class="line"><span class="keyword">var</span> paths = [<span class="string">'image'</span>, <span class="string">'music'</span>, <span class="string">'cloud'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleURL</span>(<span class="params">protocol, domain, path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> protocol + <span class="string">'://'</span> + domain + <span class="string">'/'</span> + path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> urls = paths.map(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> simpleURL(<span class="string">'http'</span>, siteDomain, path);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> urls2 = paths.map(simpleURL.bind(<span class="literal">null</span>, <span class="string">'http'</span>, siteDomain));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(simpleURL === simpleURL.bind(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(urls);</span><br><span class="line"><span class="built_in">console</span>.log(urls2);</span><br><span class="line"><span class="comment">// 两个输出的结果都是：</span></span><br><span class="line"><span class="comment">// [ 'http://baidu/image',</span></span><br><span class="line"><span class="comment">//   'http://baidu/music',</span></span><br><span class="line"><span class="comment">//   'http://baidu/cloud' ]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>传入null或undefined作为接收者的参数来实现函数柯里化</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>EffectiveJS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>EffectiveJavaScript</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>EffectiveJS笔记04之对象和原型</title>
    <url>/blog/2017/11/09/effective-js-4-objects-and-prototypes/</url>
    <content><![CDATA[<h2 id="prototype、getPrototype和-proto-之间的不同"><a href="#prototype、getPrototype和-proto-之间的不同" class="headerlink" title="prototype、getPrototype和__proto__之间的不同"></a><code>prototype</code>、<code>getPrototype</code>和<code>__proto__</code>之间的不同</h2><p>1、<code>C.prototype</code>用于建立由<code>new C()</code> 创建的对象的原型</p>
<a id="more"></a>

<p>2、<code>Object.getPrototypeOf(obj)</code> 是ES5 中用来获取obj对象的原型对象的标准方法</p>
<p>3、<code>obj. __proto__</code>是获取obj对象的原型对象的非标准方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> User(<span class="string">'hehe'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(u) === User.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(u.__proto__ === User.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用<code>Object.getPrototypeOf</code>函数而不要使用<code>__proto__</code>属性。因为在一些环境中<code>__proto__</code>实现不一致（拥有null原型的对象没有<code>__proto__</code>属性）。</p>
</blockquote>
<h2 id="使构造函数与new操作符无关"><a href="#使构造函数与new操作符无关" class="headerlink" title="使构造函数与new操作符无关"></a>使构造函数与new操作符无关</h2><p>1、如果调用者忘记使用new关键字，那么函数的接收者将是全局对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u = User(<span class="string">'hehe'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(global.name); <span class="comment">// hehe</span></span><br><span class="line"><span class="built_in">console</span>.log(u.hehe); <span class="comment">// TypeError: Cannot read property 'hehe' of undefined</span></span><br></pre></td></tr></table></figure>

<p>2、如果将User函数定义为严格模式，那么它的接收者默认为undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u = User(<span class="string">'hehe'</span>);</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// this.name = name;</span></span><br><span class="line"><span class="comment">//           ^</span></span><br><span class="line"><span class="comment">// TypeError: Cannot set property 'name' of undefined</span></span><br></pre></td></tr></table></figure>

<p>3、不管是否new都能正常工作的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> User)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u = User(<span class="string">'hehe'</span>);</span><br><span class="line"><span class="keyword">var</span> u2 = <span class="keyword">new</span> User(<span class="string">'haha'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(u.name); <span class="comment">// hehe</span></span><br><span class="line"><span class="built_in">console</span>.log(u2.name); <span class="comment">// haha</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span> <span class="keyword">instanceof</span> User ? <span class="keyword">this</span> : <span class="built_in">Object</span>.create(User.prototype);</span><br><span class="line">    self.name = name;</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u = User(<span class="string">'hehe'</span>);</span><br><span class="line"><span class="keyword">var</span> u2 = <span class="keyword">new</span> User(<span class="string">'haha'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(u.name); <span class="comment">// hehe</span></span><br><span class="line"><span class="built_in">console</span>.log(u2.name); <span class="comment">// haha</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Object.create需要一个原型对象作为参数，并返回一个继承自该原型对象的新对象。如下</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> people = <span class="built_in">Object</span>.create(animal);</span><br><span class="line">people.sayHi(); <span class="comment">// hi</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(people) === animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h2 id="只将实例状态存储在实例对象中"><a href="#只将实例状态存储在实例对象中" class="headerlink" title="只将实例状态存储在实例对象中"></a>只将实例状态存储在实例对象中</h2><p>1、理解原型对象与其实例之间是一对多的关系</p>
<h2 id="认识到this变量的隐式绑定问题"><a href="#认识到this变量的隐式绑定问题" class="headerlink" title="认识到this变量的隐式绑定问题"></a>认识到this变量的隐式绑定问题</h2><p>1、this变量的作用域总是由其最近的封闭函数所确定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CSV（逗号分隔型取值）文件格式是一种表格数据的简单文本表示，例</span></span><br><span class="line"><span class="comment">// 小明,1996,Beijing,China</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CSVReader</span>(<span class="params">separators</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.separators = separators || [<span class="string">','</span>];</span><br><span class="line">    <span class="keyword">this</span>.regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="keyword">this</span>.separators.map(<span class="function"><span class="keyword">function</span>(<span class="params">sep</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'\\'</span> + sep[<span class="number">0</span>];</span><br><span class="line">    &#125;).join(<span class="string">'|'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CSVReader.prototype.read = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = str.trim().split(<span class="regexp">/\n/</span>);</span><br><span class="line">    <span class="keyword">return</span> lines.map(<span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.regexp); <span class="comment">// undefined</span></span><br><span class="line">        <span class="keyword">return</span> line.split(<span class="keyword">this</span>.regexp); <span class="comment">// wrong this!</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> CSVReader();</span><br><span class="line"><span class="built_in">console</span>.log(reader.read(<span class="string">'a,b,c\nd,e,f\n'</span>)); <span class="comment">// [ [ 'a,b,c' ], [ 'd,e,f' ] ]</span></span><br></pre></td></tr></table></figure>

<p>2、解决方法一：数组的map方法可以传入一个可选的参数作为其回调函数的this绑定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">CSVReader.prototype.read = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = str.trim().split(<span class="regexp">/\n/</span>);</span><br><span class="line">    <span class="keyword">return</span> lines.map(<span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.regexp); <span class="comment">//  /\,/</span></span><br><span class="line">        <span class="keyword">return</span> line.split(<span class="keyword">this</span>.regexp);</span><br><span class="line">    &#125;,<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> CSVReader();</span><br><span class="line"><span class="built_in">console</span>.log(reader.read(<span class="string">'a,b,c\nd,e,f\n'</span>)); <span class="comment">// [ [ 'a', 'b', 'c' ], [ 'd', 'e', 'f' ] ]</span></span><br></pre></td></tr></table></figure>

<p>3、解决方法二：使用词法作用域的变量来存储额外的外部this绑定的引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">CSVReader.prototype.read = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = str.trim().split(<span class="regexp">/\n/</span>);</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> lines.map(<span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(self.regexp); <span class="comment">//  /\,/</span></span><br><span class="line">        <span class="keyword">return</span> line.split(self.regexp);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> CSVReader();</span><br><span class="line"><span class="built_in">console</span>.log(reader.read(<span class="string">'a,b,c\nd,e,f\n'</span>)); <span class="comment">// [ [ 'a', 'b', 'c' ], [ 'd', 'e', 'f' ] ]</span></span><br></pre></td></tr></table></figure>

<h2 id="避免继承标准类"><a href="#避免继承标准类" class="headerlink" title="避免继承标准类"></a>避免继承标准类</h2><p>Array是一个很好的例子，一个操作系统的库可能希望创建一个抽象的目录，该目录继承了数组的所有行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dir</span>(<span class="params">path, entries</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.path = path;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, n = entries.length; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>[i] = entries[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dir.prototype = <span class="built_in">Object</span>.create(<span class="built_in">Array</span>.prototype);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dir = <span class="keyword">new</span> Dir(<span class="string">'/web/project'</span>,[<span class="string">'index.html'</span>,<span class="string">'script.js'</span>,<span class="string">'style.css'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(dir.length); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(dir)); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([])); <span class="comment">// [object Array]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>失败的原因是length属性只对内部被标记为“真正的”数组的特殊对象起作用。ECMAScript标准规定它是一个不可见的内部属性，称为[[Class]]，仅仅作为一个标签。</p>
<p>同理，函数被加上了值为“Function”的[[Class]]属性，依此类推</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>EffectiveJS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>EffectiveJavaScript</tag>
        <tag>对象</tag>
        <tag>原型</tag>
      </tags>
  </entry>
  <entry>
    <title>EffectiveJS笔记05之数组和字典</title>
    <url>/blog/2017/11/10/effective-js-5-arrays-and-dictionaries/</url>
    <content><![CDATA[<h2 id="使用数组而不要使用字典来存储有序集合"><a href="#使用数组而不要使用字典来存储有序集合" class="headerlink" title="使用数组而不要使用字典来存储有序集合"></a>使用数组而不要使用字典来存储有序集合</h2><p>1、<code>for...in</code>循环除了枚举出对象“自身”的属性外，还会枚举出继承过来的属性</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'animal'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'eat ing...'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Animal();</span><br><span class="line">dog.age = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> dog) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(attr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// type</span></span><br><span class="line"><span class="comment">// age</span></span><br><span class="line"><span class="comment">// eat</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> <code>for...in</code> 循环的顺序不固定，如果需要依赖一个数据结构中的条目顺序，请使用数组</p>
</blockquote>
<p>2、使用<code>hasOwnProperty</code>方法可以排除继承过来的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其余代码同上</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> dog) &#123;</span><br><span class="line">    <span class="keyword">if</span>(dog.hasOwnProperty(attr)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(attr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// type</span></span><br><span class="line"><span class="comment">// age</span></span><br></pre></td></tr></table></figure>



<p>3、使用<code>Object.defineProperty</code>方法可以定义一个对象的属性并指定该属性的元数据。</p>
<p>可以设置其枚举属性为<code>false</code>使其在<code>for...in</code>循环中不可见</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'animal'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Animal.prototype, <span class="string">'eat'</span>, &#123;</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'eat ing...'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>, <span class="comment">// 设置为不可枚举</span></span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Animal();</span><br><span class="line">dog.age = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> dog) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(attr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// type</span></span><br><span class="line"><span class="comment">// age</span></span><br></pre></td></tr></table></figure>



<h2 id="避免在枚举期间修改对象"><a href="#避免在枚举期间修改对象" class="headerlink" title="避免在枚举期间修改对象"></a>避免在枚举期间修改对象</h2><p>1、如果被枚举的对象在枚举期间添加了新的属性，那么在枚举期间并不能保证新添加的属性能够被访问。</p>
<p>2、当迭代一个对象时，如果该对象的内容可能在循环期间被改变，应该使用while循环或经典的for循环来代替<code>for...in</code>循环</p>
<h2 id="数组迭代要优先使用for循环而不是for…in循环"><a href="#数组迭代要优先使用for循环而不是for…in循环" class="headerlink" title="数组迭代要优先使用for循环而不是for…in循环"></a>数组迭代要优先使用for循环而不是for…in循环</h2><p>使用<code>for...in</code>循环，对象的key始终是字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scores = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> score <span class="keyword">in</span> scores) &#123;</span><br><span class="line">    total += score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">// 001234</span></span><br></pre></td></tr></table></figure>



<h2 id="迭代方法优于循环"><a href="#迭代方法优于循环" class="headerlink" title="迭代方法优于循环"></a>迭代方法优于循环</h2><p>1、通过现有的数组建立一个新的数组。可以使用<code>Array.prototype.map</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> trimmedArr = oldArr.map(<span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.trim();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2、计算一个新的数组，该数组只包含现有数组的一些元素。可以使用<code>Array.prototype.filter</code>。如果元素应该存在于新数组则返回真值，如果元素应该被剔除则返回假值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldArr = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filteredArr = oldArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt;= <span class="number">100</span> &amp;&amp; item &lt;= <span class="number">10000</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filteredArr); <span class="comment">// [ 100, 1000, 10000 ]</span></span><br></pre></td></tr></table></figure>

<p>3、循环只有一点优于迭代函数，那就是循环有控制流操作，如<code>break</code>和<code>continue</code>。举例来说，使用<code>forEach</code>方法来实现<code>takeWhile</code>函数将是一个尴尬的尝试。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用for循环</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">takeWhile</span>(<span class="params">a, pred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = a.length; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!pred(a[i], i)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prefix = takeWhile([<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">30</span>], <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(prefix); <span class="comment">// [ 1, 2 ]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用forEach</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">takeWhile</span>(<span class="params">a, pred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!pred(x)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 此处无法使用break！</span></span><br><span class="line">        &#125;</span><br><span class="line">        result[i] = x;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prefix = takeWhile([<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">30</span>], <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(prefix); <span class="comment">// [ 1, 2, &lt;1 empty item&gt;, 3 ]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>return只是跳过了那一次循环，并没有终止掉循环。要想在<code>forEach</code>中终止循环，可以使用一个内部异常来提前终止该循环</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">takeWhile</span>(<span class="params">a, pred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> earlyExit = &#123;&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x, i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!pred(x)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> earlyExit;</span><br><span class="line">            &#125;</span><br><span class="line">            result[i] = x;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e !== earlyExit) &#123; <span class="comment">// only catch earlyExit</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prefix = takeWhile([<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">30</span>], <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(prefix); <span class="comment">// [ 1, 2 ]</span></span><br></pre></td></tr></table></figure>

<p>4、ES5的数组方法<code>some</code>和<code>every</code>可以用于提前终止循环</p>
<ul>
<li><code>some</code>方法返回一个布尔值表示其回调对数组的<strong>任何一个元素</strong>是否返回一个<strong>真值</strong></li>
<li><code>every</code>方法返回一个布尔值表示其回调是否对<strong>所有元素</strong>返回了一个<strong>真值</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>].some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x &gt; <span class="number">5</span>; &#125;); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>].some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span>; &#125;); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x &gt; <span class="number">0</span>; &#125;); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">3</span>; &#125;); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这两个方法都是短路循环。如果对some方法的回调一旦产生了一个真值，则some方法会直接返回，不会执行其余的元素。类似的，every方法的回调一旦产生了假值，则会立即返回</p>
</blockquote>
<p>可以使用<code>every</code>实现<code>takeWhile</code>函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">takeWhile</span>(<span class="params">a, pred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    a.every(<span class="function"><span class="keyword">function</span>(<span class="params">x, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!pred(x)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result[i] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// continue</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prefix = takeWhile([<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">30</span>], <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(prefix); <span class="comment">// [ 1, 2 ]</span></span><br></pre></td></tr></table></figure>



<h2 id="在类数组对象上复用通用的数组方法"><a href="#在类数组对象上复用通用的数组方法" class="headerlink" title="在类数组对象上复用通用的数组方法"></a>在类数组对象上复用通用的数组方法</h2><p>1、DOM的NodeList类是另一个类数组对象的实例</p>
<p>2、数组对象的基本契约总共有两个简单的规则，满足后能使一个对象“看起来像数组”</p>
<ul>
<li>具有一个范围在0到2^32-1的整型length属性</li>
<li>length属性大于该对象的最大索引。索引是一个范围在0到2^32-2的整数，它的字符串表示的是该对象的一个key</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayLike = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Array</span>.prototype.map.call(arrayLike, <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ 'A', 'B', 'C' ]</span></span><br></pre></td></tr></table></figure>

<p>3、字符串也表现为不可变的数组，因为它们是可索引的，并且其长度也可以通过length属性获取。因此，Array.prototype中的方法操作字符串时并不会修改原始数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">Array</span>.prototype.map.call(<span class="string">'abc'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [ 'A', 'B', 'C' ]</span></span><br></pre></td></tr></table></figure>



<h2 id="数组字面量优于数组构造函数"><a href="#数组字面量优于数组构造函数" class="headerlink" title="数组字面量优于数组构造函数"></a>数组字面量优于数组构造函数</h2><p>1、<code>[&#39;hello&#39;]</code>和<code>new Array(&quot;hello&quot;)</code>的行为相同，但<code>[17]</code>和<code>new Array[17]</code>的行为完全不同</p>
<p>2、如果使用单个数字参数来调用Array构造函数，它试图创建一个没有元素的数组，但其长度属性为给定的参数</p>
]]></content>
      <categories>
        <category>js</category>
        <category>EffectiveJS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>EffectiveJavaScript</tag>
        <tag>数组</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title>EffectiveJS笔记06之库和API设计</title>
    <url>/blog/2017/11/16/effective-js-6-library-and-api-design/</url>
    <content><![CDATA[<h2 id="将undefined看做“没有值”"><a href="#将undefined看做“没有值”" class="headerlink" title="将undefined看做“没有值”"></a>将undefined看做“没有值”</h2><p>在允许0、NaN或空字符串为有效参数的地方，绝不要通过真值测试来实现参数默认值</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x || <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">this</span>.y = y || <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> origin = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(origin.x); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(origin.y); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>



<h2 id="接收关键字参数的选项对象"><a href="#接收关键字参数的选项对象" class="headerlink" title="接收关键字参数的选项对象"></a>接收关键字参数的选项对象</h2><p>当传入函数的参数过多时，应考虑将其封装成对象</p>
<h2 id="区分数组对象和类数组对象"><a href="#区分数组对象和类数组对象" class="headerlink" title="区分数组对象和类数组对象"></a>区分数组对象和类数组对象</h2><p>测试一个对象是否是真数组，而不仅仅是类数组对象，Array.isArray方法比instanceof操作符更可靠</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在不支持ES5的环境中，可以使用标准的Object.prototype.toString方法测试一个对象是否为数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isArray(arr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h2 id="当心丢弃错误"><a href="#当心丢弃错误" class="headerlink" title="当心丢弃错误"></a>当心丢弃错误</h2><p>管理异步编程的一个比较困难的方面是对错误的处理，对于同步的代码，通过使用try语句块包装一段代码很容易一下子处理所有错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    f();</span><br><span class="line">    g();</span><br><span class="line">    h();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// handle any error that occurred...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于异步的代码，多步的处理器通常被分隔到事件队列的单词轮次中，因此，不可能将它们全部包装在一个try语句块中。事实上，异步的API甚至根本不可能抛出异常，因为，当一个异步的错误发生时，没有一个明显的执行上下文来抛出异常！相反，异步的API倾向于将错误表示为回调函数的特定参数，或使用一个附加的错误处理回调函数（有时被称为errbacks）。例如，异步下载文件的异步API可能会有一个额外的回调函数来处理错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">downloadAsync(<span class="string">'http://example.com/file.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'file content'</span> + text);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
        <category>EffectiveJS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>EffectiveJavaScript</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6学习笔记</title>
    <url>/blog/2017/12/09/es2015/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>系统记录 ES6 知识，方便学习查看~</p>
<a id="more"></a>

<h2 id="块级作用域绑定"><a href="#块级作用域绑定" class="headerlink" title="块级作用域绑定"></a>块级作用域绑定</h2><h3 id="let-const"><a href="#let-const" class="headerlink" title="let / const"></a>let / const</h3><ul>
<li>const 一旦声明变量，就必须<strong>立即初始化</strong>，不能留到以后赋值</li>
<li>const 命令只是保证<strong>变量名指向的地址</strong>不变，并不保证该地址的数据不变。如果真的想将对象冻结，应该使用 Object.freeze 方法</li>
<li><strong>不能重复声明</strong>，如果作用域已经存在某个声明过的标识符，则不能再使用 let / const 关键字声明它</li>
<li>在 <code>for-in</code> 或 <code>for-of</code> 循环中使用 <code>const</code> 时的行为与使用 <code>let</code> 一致</li>
<li>var 命令和 function 命令声明的全局变量，依旧是全局对象（window，不适用于 node 环境）的属性；另一方面规定， let 命令、 const 命令、 class 命令声明的全局变量，不属于全局对象的属性。变量没有声明就赋值，则自动添加到全局对象上（包括 node 环境）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 或者采用通用方法，写成 this.a</span></span><br><span class="line"><span class="built_in">window</span>.a; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.b; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>花括号内形成块级作用域，花括号外无法访问</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> bigData = <span class="string">'big data ...'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bigData); <span class="comment">// ReferenceError: bigData is not defined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>临时死区</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> value); <span class="comment">// ReferenceError: value is not defined</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="string">'blue'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> value); <span class="comment">// undefined</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="string">'blue'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 let / const 声明的作用域外对该变量使用 typeof 不会报错</p>
</blockquote>
<h2 id="字符串和正则表达式"><a href="#字符串和正则表达式" class="headerlink" title="字符串和正则表达式"></a>字符串和正则表达式</h2><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><h4 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h4><p>在 UTF-16 中，前 $2^{16}$ 个码位均以 16 位的编码单元表示，这个范围被称作 <em>基本多文种平面 (BMP)</em> 。超出这个范围的码位使用 _代理对_，用两个 16 位编码单元表示一个码位</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'𠮷'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.length); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/</span>.test(a)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.charAt(<span class="number">0</span>)); <span class="comment">// �</span></span><br><span class="line"><span class="built_in">console</span>.log(a.charAt(<span class="number">1</span>)); <span class="comment">// �</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.charCodeAt(<span class="number">0</span>)); <span class="comment">// 55362</span></span><br><span class="line"><span class="built_in">console</span>.log(a.charCodeAt(<span class="number">1</span>)); <span class="comment">// 57271</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.codePointAt(<span class="number">0</span>)); <span class="comment">// 134071，返回完整的码位</span></span><br><span class="line"><span class="built_in">console</span>.log(a.codePointAt(<span class="number">1</span>)); <span class="comment">// 57271</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(a.codePointAt(<span class="number">0</span>))); <span class="comment">// 𠮷</span></span><br></pre></td></tr></table></figure>

<h4 id="normalize-方法"><a href="#normalize-方法" class="headerlink" title="normalize() 方法"></a>normalize() 方法</h4><blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noopener">normalize | MDN</a></p>
</blockquote>
<ul>
<li>在对比字符串之前，一定先把他们标准化为同一种形式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">values.sort(<span class="function">(<span class="params">first, second</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> firstNormalized = first.normalize();</span><br><span class="line">  <span class="keyword">let</span> secondNormalized = second.normalize();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (firstNormalized &lt; secondNormalized) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstNormalized === secondNormalized) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="正则表达式-u-修饰符"><a href="#正则表达式-u-修饰符" class="headerlink" title="正则表达式 u 修饰符"></a>正则表达式 u 修饰符</h4><ul>
<li>添加 u 修饰符后，正则表达式就不会视代理对为两个字符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'𠮷'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/</span>.test(a)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/u</span>.test(a)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以通过正则来检测字符串的码位数量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">codePointLen</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = text.match(<span class="regexp">/[\s\S]/gu</span>);</span><br><span class="line">  <span class="keyword">return</span> result ? result.length : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(codePointLen(<span class="string">'𠮷'</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'𠮷'</span>.length); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>检测是否支持 u 修饰符，对于 y 修饰符也是同理</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasRegExpU</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'.'</span>, <span class="string">'u'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他字符串变更"><a href="#其他字符串变更" class="headerlink" title="其他字符串变更"></a>其他字符串变更</h4><ul>
<li><code>repeat()</code> 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'x'</span>.repeat(<span class="number">3</span>)); <span class="comment">// xxx</span></span><br></pre></td></tr></table></figure>

<h4 id="其他正则表达式变更"><a href="#其他正则表达式变更" class="headerlink" title="其他正则表达式变更"></a>其他正则表达式变更</h4><h5 id="正则表达式-y-修饰符"><a href="#正则表达式-y-修饰符" class="headerlink" title="正则表达式 y 修饰符"></a>正则表达式 y 修饰符</h5><ul>
<li>y 修饰符：影响正则表达式搜索过程中的 sticky 属性，当在字符串中开始字符匹配时，它会通知搜索从正则表达式的 <code>lastIndex</code> 属性开始进行，如果在指定位置没能成功匹配，则停止继续匹配。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">'hello1 hello2 hello3'</span>,</span><br><span class="line">  pattern = <span class="regexp">/hello\d\s?/</span>,</span><br><span class="line">  result = pattern.exec(text),</span><br><span class="line">  globalPattern = <span class="regexp">/hello\d\s?/g</span>,</span><br><span class="line">  globalResult = globalPattern.exec(text),</span><br><span class="line">  stickyPattern = <span class="regexp">/hello\d\s?/y</span>,</span><br><span class="line">  stickyResult = stickyPattern.exec(text);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">0</span>]); <span class="comment">// hello1</span></span><br><span class="line"><span class="built_in">console</span>.log(globalResult[<span class="number">0</span>]); <span class="comment">// hello1</span></span><br><span class="line"><span class="built_in">console</span>.log(stickyResult[<span class="number">0</span>]); <span class="comment">// hello1</span></span><br><span class="line"></span><br><span class="line">pattern.lastIndex = <span class="number">1</span>;</span><br><span class="line">globalPattern.lastIndex = <span class="number">1</span>;</span><br><span class="line">stickyPattern.lastIndex = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">result = pattern.exec(text);</span><br><span class="line">globalResult = globalPattern.exec(text);</span><br><span class="line">stickyResult = stickyPattern.exec(text);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">0</span>]); <span class="comment">// hello1</span></span><br><span class="line"><span class="built_in">console</span>.log(globalResult[<span class="number">0</span>]); <span class="comment">// hello2</span></span><br><span class="line"><span class="built_in">console</span>.log(stickyResult); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有调用 <code>exec()</code> 和 <code>test()</code> 这些正则表达式对象的方法才会涉及 <code>lastIndex</code> 属性。</p>
</blockquote>
<h5 id="正则表达式的复制"><a href="#正则表达式的复制" class="headerlink" title="正则表达式的复制"></a>正则表达式的复制</h5><ul>
<li>在 ES5 中抛出错误，在 ES6 中正常运行。可以通过第二个参数修改其修饰符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re1 = <span class="regexp">/ab/i</span>;</span><br><span class="line"><span class="keyword">var</span> re2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(re1, <span class="string">'g'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(re1.toString()); <span class="comment">// /ab/i</span></span><br><span class="line"><span class="built_in">console</span>.log(re2.toString()); <span class="comment">// /ab/g</span></span><br></pre></td></tr></table></figure>

<h4 id="flags-属性"><a href="#flags-属性" class="headerlink" title="flags 属性"></a>flags 属性</h4><ul>
<li>ES5：通过 source 属性获取正则表达式的文本</li>
<li>ES6 新增，新增 flags 属性，它与 source 属性都是只读的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/ab/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(re.source); <span class="comment">// ab</span></span><br><span class="line"><span class="built_in">console</span>.log(re.flags); <span class="comment">// g</span></span><br></pre></td></tr></table></figure>

<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><ul>
<li><strong>字符串可以被 for…of 循环遍历</strong>，最大的优点是可以识别大于 0xFFFF 的码点，传统的 for 循环无法识别这样的码点</li>
<li>字符串中嵌入变量，需要将<strong>变量名写在 ${}</strong> 之中</li>
<li><strong>多行</strong>模板字符串会在每一行的最后添加一个<strong>“\n”字面量</strong>，相当于使用 LF 换行符，所以在读取多行字符串的长度时，除最后一行以外，每一行的长度都会加 1，即增加了”\n”</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`A</span></span><br><span class="line"><span class="string">B</span></span><br><span class="line"><span class="string">C</span></span><br><span class="line"><span class="string">D`</span>; <span class="comment">// A\nB\nC\nD</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如要打印出反勾号可以在反勾号前面加上一个反斜杠</p>
</blockquote>
<h4 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h4><ul>
<li>定义标签</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passthru</span>(<span class="params">literals, ...substitutions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(literals); <span class="comment">// [ '', ' items cost ', '' ]</span></span><br><span class="line">  <span class="built_in">console</span>.log(substitutions); <span class="comment">// [ 10, 2.5 ]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; substitutions.length; i++) &#123;</span><br><span class="line">    result += literals[i];</span><br><span class="line">    result += substitutions[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  result += literals[literals.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> price = <span class="number">0.25</span>;</span><br><span class="line"><span class="keyword">let</span> message = passthru<span class="string">`<span class="subst">$&#123;count&#125;</span> items cost <span class="subst">$&#123;count * price&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// 10 items cost 2.5</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>标签函数的第一个参数是一个数组，它还有一个额外的属性 raw。<code>literals.raw[i]</code></p>
</blockquote>
<h4 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> msg1 = <span class="string">'a\nb'</span>;</span><br><span class="line"><span class="keyword">let</span> msg2 = <span class="built_in">String</span>.raw<span class="string">`a\nb`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(msg1);</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(msg2);</span><br><span class="line"><span class="comment">// a\nb</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(msg1.length); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(msg2.length); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数默认参数值"><a href="#函数默认参数值" class="headerlink" title="函数默认参数值"></a>函数默认参数值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg = <span class="string">'foo'</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">// foo</span></span><br><span class="line">fn(<span class="string">'bar'</span>); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure>

<h4 id="与解构赋值默认值结合"><a href="#与解构赋值默认值结合" class="headerlink" title="与解构赋值默认值结合"></a>与解构赋值默认值结合</h4><ul>
<li>默认参数值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123; x, y = <span class="number">5</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;); <span class="comment">// undefined 5</span></span><br><span class="line">foo(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;); <span class="comment">// 1 5</span></span><br><span class="line">foo(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;); <span class="comment">// 1 2</span></span><br><span class="line">foo(); <span class="comment">// TypeError: Cannot read property 'x' of undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>指定了默认值以后，函数的<code>length</code>属性，将<strong>返回没有指定默认值的参数个数</strong>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;&#125;</span><br><span class="line">  .length(</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) </span>&#123;&#125;</span><br><span class="line">  )</span><br><span class="line">  .length(</span><br><span class="line">    <span class="comment">// 0</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) </span>&#123;&#125;</span><br><span class="line">  ).length); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 ES6 中，<code>arguments</code> 对象的行为都将与 ES5 严格模式下保持一致。默认参数值的存在使得 <code>arguments</code> 对象保持与命名参数分离</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixArg</span>(<span class="params">first, second = <span class="string">'b'</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    len: <span class="built_in">arguments</span>.length,</span><br><span class="line">    equalFirstArgs: first === <span class="built_in">arguments</span>[<span class="number">0</span>],</span><br><span class="line">    equalSecondArgs: second === <span class="built_in">arguments</span>[<span class="number">1</span>],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mixArg(<span class="string">'a'</span>)); <span class="comment">// &#123; len: 1, equalFirstArgs: true, equalSecondArgs: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(mixArg(<span class="string">'a'</span>, <span class="string">'b'</span>)); <span class="comment">// &#123; len: 2, equalFirstArgs: true, equalSecondArgs: true &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(mixArg(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)); <span class="comment">// &#123; len: 3, equalFirstArgs: true, equalSecondArgs: true &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="默认参数表达式"><a href="#默认参数表达式" class="headerlink" title="默认参数表达式"></a>默认参数表达式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first, second = getVal(</span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">1</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>初次解析函数声明时不会调用 <code>getValue()</code> 方法，只有当调用 <code>add()</code> 函数且不传入第二个参数时(或者为 <code>undefined</code>)才会调用</p>
</blockquote>
<h3 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h3><ul>
<li>每个函数最多只能声明一个不定参数，而且一定要放在所有参数的末尾，否则会抛出错误</li>
<li>不定参数不能用于对象字面量 <code>setter</code> 之中，否则报错</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">...rest</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;  <span class="comment">// Correct</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">...rest, foo</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;  <span class="comment">// SyntaxError: Rest parameter must be last formal parameter</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的多重用途"><a href="#函数的多重用途" class="headerlink" title="函数的多重用途"></a>函数的多重用途</h3><p>函数有两个不同的内部方法：[[Call]] 和 [[Contruct]]。当通过 <code>new</code> 关键字调用函数时，执行的是 [[Contruct]] 函数，当通过 <code>call</code> 和 <code>apply</code> 调用时，则执行 [[Call]] 函数。具有 [[Contruct]] 方法的函数被称为构造函数。不是所有函数都有 [[Construct]] 方法，因此不是所有函数都可以通过 new 来调用，如箭头函数</p>
<ul>
<li>ES5 判定函数被调用的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须通过 new 关键字来调用 Person'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pj = <span class="keyword">new</span> Person(<span class="string">'pj'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pj.name); <span class="comment">// pj</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sr = Person.call(pj, <span class="string">'sr'</span>); <span class="comment">// 不报错</span></span><br><span class="line"><span class="built_in">console</span>.log(sr); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jy = Person(<span class="string">'jy'</span>); <span class="comment">// Error: 必须通过 new 关键字来调用 Person</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>无法区分是通过 <code>Person.call()</code>（或者是 <code>Person.apply()</code>）还是 <code>new</code> 关键字调用得到的 Person 的实例</p>
</blockquote>
<h4 id="元属性-new-target"><a href="#元属性-new-target" class="headerlink" title="元属性 new.target"></a>元属性 new.target</h4><p>当调用函数的 [[Construct]] 方法时，<code>new.target</code> 被赋值为 new 操作符的目标，通常是新创建对象实例，也就是函数体内 this 的构造函数；如果调用 [[Call]] 方法，则 <code>new.target</code> 的值为 <code>undefined</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">new</span>.target !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须通过 new 关键字来调用 Person'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pj = <span class="keyword">new</span> Person(<span class="string">'pj'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pj.name); <span class="comment">// pj</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sr = Person.call(pj, <span class="string">'sr'</span>); <span class="comment">// Error: 必须通过 new 关键字来调用 Person</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ul>
<li><p>没有 this、super、arguments 和 new.target 绑定，这些值由外围<strong>最近一层非箭头函数</strong>决定</p>
</li>
<li><p>在箭头函数出现之前，每个新定义的函数都有它自己的 <code>this</code>值（在构造函数的情况下是一个新对象，在严格模式的函数调用中为 undefined）</p>
</li>
<li><p>箭头函数不会创建自己的<code>this</code>；它<strong>使用封闭执行上下文</strong>的<code>this</code>值。因此，在下面的代码中，传递给<code>setInterval</code>的函数内的<code>this</code>与封闭函数中的<code>this</code>值相同：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.age++; <span class="comment">// |this| 正确地指向person 对象</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></li>
<li><p>鉴于 <code>this</code> 是词法层面上的，严格模式中与 <code>this</code> 相关的规则都将被忽略</p>
</li>
<li><p>不能通过 new 关键字调用，没有原型，不支持 arguments 对象，但可以访问外围函数的 arguments 对象，不支持重复的命名参数</p>
</li>
<li><p><code>this</code> 已经在词法层面完成了绑定，通过 <code>call()</code> <em>或</em> <code>apply()</code> 方法调用一个函数时，只是传入了参数而已，对 <code>this</code> 并没有什么影响。箭头函数的 this 一旦绑定后就无法被修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.dam;</span><br><span class="line">  &#125;,</span><br><span class="line">  dam: <span class="string">'hei'</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dam;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  dam: <span class="string">'ha'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.init(); <span class="comment">// 箭头函数中的this执行时绑定了，为a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.bar()); <span class="comment">// hei</span></span><br><span class="line"><span class="built_in">console</span>.log(a.bar.call(b)); <span class="comment">// hei。无法修改其this</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li><p>箭头函数<strong>不能用作构造器</strong>，和 <code>new</code>一起用会抛出错误</p>
</li>
<li><p>箭头函数没有<code>prototype</code>属性，其值为<code>undefined</code></p>
</li>
<li><p>不能在箭头函数中使用<code>yield</code>关键字（除非是嵌套在允许使用的函数内）</p>
</li>
<li><p>记得用<strong>圆括号</strong>把返回的<strong>对象字面量</strong>包起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>箭头函数在<strong>参数和箭头</strong>之间<strong>不能换行</strong>，否则报错</p>
</li>
<li><p>箭头函数具有与常规函数不同的特殊<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">运算符优先级</a>解析规则。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> callback;</span><br><span class="line"></span><br><span class="line">callback = callback || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line">callback = callback || <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// SyntaxError: invalid arrow-function arguments</span></span><br><span class="line"></span><br><span class="line">callback = callback || <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;&#125;);    <span class="comment">// ok</span></span><br></pre></td></tr></table></figure></li>
<li><p>箭头函数中也没有 arguments、callee，可以使用<strong>后续参数</strong>代替<strong>arguments</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><p>尾调用指的是函数作为另一个函数的最后一条语句被调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingElse(); <span class="comment">// 尾调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ES6-尾调用优化"><a href="#ES6-尾调用优化" class="headerlink" title="ES6 尾调用优化"></a>ES6 尾调用优化</h4><p>ES6 严格模式下缩减了尾调用栈的大小（非严格模式下不受影响），如果满足以下条件，尾调用不再创建新的栈帧，而是清除并重用当前栈帧</p>
<ul>
<li>尾调用不访问当前栈帧的变量（也就是说<strong>函数不是一个闭包</strong>）</li>
<li>在函数内部，<strong>尾调用是最后一条语句</strong></li>
<li>尾调用的<strong>结果作为函数值返回</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下情况均无法优化</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 无法优化，无返回</span></span><br><span class="line">  doSomethingElse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> + doSomethingElse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 无法优化，尾调用不在尾部</span></span><br><span class="line">  <span class="keyword">let</span> result = doSomethingElse();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">1</span>,</span><br><span class="line">    func = <span class="function"><span class="params">()</span> =&gt;</span> num;</span><br><span class="line">  <span class="comment">// 无法优化，该函数是一个闭包</span></span><br><span class="line">  <span class="keyword">return</span> func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优化前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, p = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> * p;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = n * p;</span><br><span class="line">    <span class="keyword">return</span> factorial(n - <span class="number">1</span>, result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展对象的功能性"><a href="#扩展对象的功能性" class="headerlink" title="扩展对象的功能性"></a>扩展对象的功能性</h2><h3 id="对象字面量扩展语法"><a href="#对象字面量扩展语法" class="headerlink" title="对象字面量扩展语法"></a>对象字面量扩展语法</h3><h4 id="可计算属性名"><a href="#可计算属性名" class="headerlink" title="可计算属性名"></a>可计算属性名</h4><p>ES6 引入的新语法允许我们直接使用一个表达式来表达一个属性名用法：{ [statement]: value}</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prefix = <span class="string">'ES6'</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [prefix + <span class="string">'enhancedObject'</span>]: <span class="string">'foo'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; ES6enhancedObject: 'foo' &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="属性初始值简写"><a href="#属性初始值简写" class="headerlink" title="属性初始值简写"></a>属性初始值简写</h4><p>变量名和属性名都是相同的，我们可以对属性名定义进行省略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="function"><span class="params">()</span> =&gt;</span> foo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo,</span><br><span class="line">  bar,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">//&#123; foo: 123, bar: [Function] &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p><code>Object.assign()</code> 方法不能将提供者的访问器属性复制到接收对象中，由于 <code>Object.assign()</code> 方法执行了赋值操作，因此提供者的<strong>访问器属性</strong>最终会转变为接收对象中的一个<strong>数据属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> receiver = &#123;&#125;,</span><br><span class="line">  supplier = &#123;</span><br><span class="line">    <span class="keyword">get</span> name() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'file.js'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(receiver, supplier);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(receiver, <span class="string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.value); <span class="comment">// file.js</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.get); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="自有属性枚举顺序"><a href="#自有属性枚举顺序" class="headerlink" title="自有属性枚举顺序"></a>自有属性枚举顺序</h3><p>ES5 没有定义对象属性的枚举顺序，ES6 规定了，这会影响到 <code>Object.getOwnPropertyNames()</code> 方法及 <code>Reflect.ownKeys</code> 返回属性的方式</p>
<p>自有属性枚举顺序的基本规则是：</p>
<ol>
<li>所有数字键按升序排序</li>
<li>所有字符串键按照它们被加入对象的</li>
<li>所有 symbol 键按照它们被加入对象的顺序排序</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">  c: <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.d = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj).join(<span class="string">''</span>)); <span class="comment">// 012acbd</span></span><br></pre></td></tr></table></figure>

<h3 id="增强对象原型"><a href="#增强对象原型" class="headerlink" title="增强对象原型"></a>增强对象原型</h3><h4 id="简化原型访问的-Super-引用"><a href="#简化原型访问的-Super-引用" class="headerlink" title="简化原型访问的 Super 引用"></a>简化原型访问的 Super 引用</h4><p>Super 引用相当于指向对象原型的指针，实际也就是 <code>Object.getPrototypeOf(this)</code> 的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  getGreeting() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> friend = &#123;</span><br><span class="line">  getGreeting() &#123;</span><br><span class="line">    <span class="comment">// return Object.getPrototypeOf(this).getGreeting.call(this) + ', hi'</span></span><br><span class="line">    <span class="comment">// 功能同上</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getGreeting() + <span class="string">', hi'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(friend, person);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(friend.getGreeting()); <span class="comment">// hello, hi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多重继承时，<code>Object.getPrototypeOf()</code> 方法会出现问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  getGreeting() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> friend = &#123;</span><br><span class="line">  getGreeting() &#123;</span><br><span class="line">    <span class="comment">// 使用 super 则正常</span></span><br><span class="line">    <span class="comment">// return super.getGreeting() + ', hi'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">this</span>).getGreeting.call(<span class="keyword">this</span>) + <span class="string">', hi'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(friend, person);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> relative = <span class="built_in">Object</span>.create(friend);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.getGreeting()); <span class="comment">// Hello</span></span><br><span class="line"><span class="built_in">console</span>.log(friend.getGreeting()); <span class="comment">// Hello, hi</span></span><br><span class="line"><span class="built_in">console</span>.log(relative.getGreeting()); <span class="comment">// RangeError: Maximum call stack size exceeded【如果使用 super 则正常】</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Super 引用不是动态变化的，它总是指向正确的对象，在这个示例中，无论有多少其他方法继承了 getGreeting 方法，super.getGreeting() 始终指向 person.getGreeting() 方法</p>
</blockquote>
<h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><ul>
<li>解构赋值中，如果希望跳过数组中某些元素，可以通过空开一个元素的方式实现</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用法：[ arg1, , arg2 ] = [ value1, value2, value3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [foo, , bar] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">//1 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解构赋值中，获取指定位置的元素以外，也可以不定项地获取后续的元素，那么可以用 <code>…</code> 语句来实现，在被结构的数组中，不定元素必须为最后一个条目，否则报错：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用法：[ arg1, arg2, ...rest ] = [ value1, value2, value3, value4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, b, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 1 2</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">    resolve([<span class="string">'foo'</span>, <span class="string">'bar'</span>]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchData().then(<span class="function">(<span class="params">[value1, value2]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value1, value2); <span class="comment">// foo bar</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量值交换</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Swap</span></span><br><span class="line">[foo, bar] = [bar, foo];</span><br><span class="line"></span><br><span class="line"><span class="comment">// After Swap</span></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对 <code>null</code> 或 <code>undefined</code> 进行解构，会报错</li>
</ul>
<h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>设置默认值，当无法匹配时使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; foo = <span class="number">1</span> &#125; = &#123; <span class="attr">bar</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, b = <span class="number">2</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure>

<h3 id="深度匹配"><a href="#深度匹配" class="headerlink" title="深度匹配"></a>深度匹配</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  a,</span><br><span class="line">  b: &#123; c &#125;,</span><br><span class="line">&#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a, c); <span class="comment">//1 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array in Object</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  d,</span><br><span class="line">  e: [f],</span><br><span class="line">&#125; = &#123; <span class="attr">d</span>: <span class="number">1</span>, <span class="attr">e</span>: [<span class="number">2</span>, <span class="number">3</span>] &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(d, f); <span class="comment">//1 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'Mike'</span>, <span class="string">'Peter'</span>, <span class="string">'Ben'</span>, <span class="string">'William'</span>, <span class="string">'John'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [index, item] <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, item);</span><br><span class="line">  <span class="keyword">if</span> (item.match(<span class="regexp">/^W/</span>)) <span class="keyword">break</span>; <span class="comment">// Break!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "Mike"</span></span><br><span class="line"><span class="comment">// 1 "Peter"</span></span><br><span class="line"><span class="comment">// 2 "Ben"</span></span><br><span class="line"><span class="comment">// 3 "William"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>forEach</code>无法像<code>for</code>、 <code>while</code> 等循环语句一样被<code>break</code>等控制语句终止，所以可以使用<code>for-of</code>循环语法</p>
</blockquote>
<h3 id="结构参数"><a href="#结构参数" class="headerlink" title="结构参数"></a>结构参数</h3><h4 id="必须传值的解构参数"><a href="#必须传值的解构参数" class="headerlink" title="必须传值的解构参数"></a>必须传值的解构参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, &#123; secure, path, domain, expires &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setCookie(<span class="string">'type'</span>, <span class="string">'js'</span>); <span class="comment">// TypeError: Cannot destructure property `secure` of 'undefined' or 'null'.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果不传第 3 个参数，会导致其值为 undefined，等同于对 undefined 进行解构，可以通过如下方法解决</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, &#123; secure, path, domain, expires &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setCookie(<span class="string">'type'</span>, <span class="string">'js'</span>); <span class="comment">// 正常</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> setCookieDefaults = &#123;</span><br><span class="line">  secure: <span class="literal">false</span>,</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  domain: <span class="string">'example'</span>,</span><br><span class="line">  expires: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">3600</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  name,</span></span></span><br><span class="line"><span class="function"><span class="params">  value,</span></span></span><br><span class="line"><span class="function"><span class="params">  &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    secure = setCookieDefaults.secure,</span></span></span><br><span class="line"><span class="function"><span class="params">    path = setCookieDefaults.path,</span></span></span><br><span class="line"><span class="function"><span class="params">    domain = setCookieDefaults.domain,</span></span></span><br><span class="line"><span class="function"><span class="params">    expires = setCookieDefaults.expires,</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125; = setCookieDefaults</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="不只是声明"><a href="#不只是声明" class="headerlink" title="不只是声明"></a>不只是声明</h4><p>赋值表达式并不必须是变量标识符。任何合法的赋值表达式都可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">4</span>, <span class="attr">y</span>: <span class="number">5</span>, <span class="attr">z</span>: <span class="number">6</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">[o.a, o.b, o.c] = foo();</span><br><span class="line">(&#123; <span class="attr">x</span>: o.x, <span class="attr">y</span>: o.y, <span class="attr">z</span>: o.z &#125; = bar());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.a, o.b, o.c); <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log(o.x, o.y, o.z); <span class="comment">// 4 5 6</span></span><br></pre></td></tr></table></figure>

<h4 id="重复赋值"><a href="#重复赋值" class="headerlink" title="重复赋值"></a>重复赋值</h4><p>对象解构形式允许多次列出同一个源属性（持有值类型任意）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; <span class="attr">a</span>: X, <span class="attr">a</span>: Y &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">X; <span class="comment">// 1</span></span><br><span class="line">Y; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h5 id="解构赋值表达式"><a href="#解构赋值表达式" class="headerlink" title="解构赋值表达式"></a>解构赋值表达式</h5><p>对象或者数组解构的赋值表达式的完成值是所有右侧对象 / 数组的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> a, b, c, p;</span><br><span class="line"></span><br><span class="line">p = &#123; a, b, c &#125; = o;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">// 1 2 3</span></span><br><span class="line">p === o; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>p 赋值为对象 o 的引用</p>
</blockquote>
<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ul>
<li>Symbol 是一种值类型而非引用类型</li>
<li>Symbol 与一个字符串拼接，会报错</li>
</ul>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul>
<li><p>Symbol 值通过<code>Symbol</code>函数生成。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s);</span><br><span class="line"><span class="comment">// "symbol"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1); <span class="comment">// Symbol(foo)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1 === s2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p><code>Symbol</code>函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1); <span class="comment">// Symbol(foo)</span></span><br><span class="line"><span class="built_in">console</span>.log(s2); <span class="comment">// Symbol(bar)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.toString()); <span class="comment">// "Symbol(foo)"</span></span><br><span class="line"><span class="built_in">console</span>.log(s2.toString()); <span class="comment">// "Symbol(bar)"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Symbol 的参数是一个对象，就会调用该对象的<code>toString</code>方法，将其转为字符串，然后才生成一个 Symbol 值</p>
</blockquote>
</li>
</ul>
<h3 id="注册全局可重用-Symbol"><a href="#注册全局可重用-Symbol" class="headerlink" title="注册全局可重用 Symbol"></a>注册全局可重用 Symbol</h3><p>开发者可以通过一个 key 向当前运行时注册一个需要在其他程序中使用的 Symbol：Symbol.for([key]) : Symbol</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cosnt symbol = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Symbol.for() 会根据传入的 key 在全局作用域中注册一个 Symbol 值，如果某一个 key 从未被注册到全局作用域中，便会创建一个 Symbol 值并根据 key 注册到全局环境中，如果该 key 已被注册，就会返回一个与第一次使用创建的 Symbol 的值等价的 Symbol 值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sy = <span class="built_in">Symbol</span>.for(<span class="string">'key'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sy === <span class="built_in">Symbol</span>.for(<span class="string">'key'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols"></a>Object.getOwnPropertySymbols</h3><p>该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>
<p>注意：Symbol 作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">'Hello'</span>;</span><br><span class="line">obj[b] = <span class="string">'World'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectSymbols = <span class="built_in">Object</span>.getOwnPropertySymbols(obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(objectSymbols);</span><br><span class="line"><span class="comment">// [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure>

<h3 id="获取全局-Symbol-的-key"><a href="#获取全局-Symbol-的-key" class="headerlink" title="获取全局 Symbol 的 key"></a>获取全局 Symbol 的 key</h3><p>使用同一个 Symbol 值，<code>Symbol.for</code>方法可以做到这一点，它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值</p>
<p>用法：Symbol.keyFor(someSymbol) : String</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(symbol)); <span class="comment">// foo</span></span><br></pre></td></tr></table></figure>

<h3 id="通过-well-known-Symbol-暴露内部操作"><a href="#通过-well-known-Symbol-暴露内部操作" class="headerlink" title="通过 well-known Symbol 暴露内部操作"></a>通过 well-known Symbol 暴露内部操作</h3><ul>
<li>Symbol.hasInstance：用于确定对象是否为函数的实例，用于重新定义 instanceof 操作符返回结果。不可写，不可配置，不可枚举</li>
<li>Symbol.isConcatSpreadable：一个布尔值，用于表示当传递一个集合作为 <code>Array.prototype.concat()</code> 方法的参数时，是否应该将集合内的元素规整到同一层级</li>
<li>Symbol.iterator：返回迭代器的方法</li>
<li>Symbol.match： 在调用 <code>String.prototype.match()</code> 方法时调用的方法</li>
<li>Symbol.replace：在调用 <code>String.prototype.replace()</code> 方法时调用的方法</li>
<li>Symbol.search：在调用 <code>String.prototype.search()</code> 方法时调用的方法</li>
<li>Symbol.species：用于创建派生对象的构造函数</li>
<li>Symbol.split：在调用 <code>String.prototype.split()</code> 方法时调用的方法</li>
<li>Symbol.toPrimitive：返回对象原始值的方法</li>
<li>Symbol.toStringTag：调用 <code>Object.prototype.toString()</code> 方法时使用的字符串</li>
<li>Symbol.unscopables：定义一些不可被 with 语句引用的对属性名称的对象集合</li>
</ul>
<h4 id="Symbol-hasInstance"><a href="#Symbol-hasInstance" class="headerlink" title="Symbol.hasInstance"></a>Symbol.hasInstance</h4><p><code>obj instanceof Array</code> 等价于 <code>Array[Symbol.hasInstance](obj)</code></p>
<p>​ <code>Symbol.hasInstance</code> 为开发者提供了可以用于扩展 <strong>instanceof</strong> 语句内部逻辑的权限，开发者可以将其作为属性键，或用于为一个类定义静态方法，该方法的第一个形参便是被检测的对象，而该方法的返回值便是决定了 instanceof 语句的返回结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialNumber</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(SpecialNumber, <span class="built_in">Symbol</span>.hasInstance, &#123;</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v <span class="keyword">instanceof</span> <span class="built_in">Number</span> &amp;&amp; v &gt;= <span class="number">1</span> &amp;&amp; v &lt;= <span class="number">100</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zero = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> one = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(zero <span class="keyword">instanceof</span> SpecialNumber); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// equal</span></span><br><span class="line"><span class="built_in">console</span>.log(SpecialNumber[<span class="built_in">Symbol</span>.hasInstance](zero)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one <span class="keyword">instanceof</span> SpecialNumber); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// equal</span></span><br><span class="line"><span class="built_in">console</span>.log(SpecialNumber[<span class="built_in">Symbol</span>.hasInstance](one)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用法2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance](obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj); <span class="comment">// &#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> Foo); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="Symbol-isConcatSpreadable"><a href="#Symbol-isConcatSpreadable" class="headerlink" title="Symbol.isConcatSpreadable"></a>Symbol.isConcatSpreadable</h4><p>Symbol.isConcatSpreadable 属性是一个布尔值，如果该布尔值为 true，则表示对象有 length 属性和数字键，故它的数值型属性值应该被独立添加到 concat() 调用的结果中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> collection = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'zero'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'one'</span>,</span><br><span class="line">  length: <span class="number">2</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.isConcatSpreadable]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> messages = [<span class="string">'begin'</span>].concat(collection);</span><br><span class="line"><span class="built_in">console</span>.log(messages); <span class="comment">// [ 'begin', 'zero', 'one' ]</span></span><br></pre></td></tr></table></figure>

<h4 id="Symbol-match-Symbol-replace-Symbol-search-Symbol-split"><a href="#Symbol-match-Symbol-replace-Symbol-search-Symbol-split" class="headerlink" title="Symbol.match, Symbol.replace, Symbol.search, Symbol.split"></a>Symbol.match, Symbol.replace, Symbol.search, Symbol.split</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际上等价于  /^.&#123;10&#125;$/</span></span><br><span class="line"><span class="keyword">let</span> hasLengthOf10 = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.match]: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length === <span class="number">10</span> ? [value] : <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg1 = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="keyword">let</span> msg2 = <span class="string">'hello John'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> match1 = msg1.match(hasLengthOf10);</span><br><span class="line"><span class="keyword">let</span> match2 = msg2.match(hasLengthOf10);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(match1); <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(match2); <span class="comment">// ['hello John']</span></span><br></pre></td></tr></table></figure>

<h4 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h4><p>JS 执行特定操作时，会尝试将对象转换到相应的原始值。例如，使用 == 运算符比较对象和字符串，对象会在比较操作执行前被转换为一个原始值。</p>
<p><code>Symbol.toPrimitive</code> 方法被定义在每一个标准类型的原型上，并且规定了当对象呗转换为原始值时应当执行的操作。当执行原始值转换时，总会调用 <code>Symbol.toPrimitive</code> 方法并传入一个参数，这个参数值被称为类型提示（hint）。</p>
<p>类型提示参数的值只有 3 种：**’number’, ‘string’ 或 ‘default’**。传递这些参数时， <code>Symbol.toPrimitive</code> 返回的分别是 数字、字符串或无类型偏好的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temperature</span>(<span class="params">degrees</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.degrees = degrees;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Temperature.prototype[<span class="built_in">Symbol</span>.toPrimitive] = <span class="function"><span class="keyword">function</span> (<span class="params">hint</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (hint) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.degrees + <span class="string">'°'</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.degrees;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'default'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.degrees + <span class="string">' degrees'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> freezing = <span class="keyword">new</span> Temperature(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(freezing + <span class="string">'!'</span>); <span class="comment">// 32 degrees!</span></span><br><span class="line"><span class="built_in">console</span>.log(freezing / <span class="number">2</span>); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(freezing)); <span class="comment">// 32°</span></span><br></pre></td></tr></table></figure>

<h4 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a>Symbol.toStringTag</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pj = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pj.toString()); <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line">Person.prototype[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">'Person'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pj.toString()); <span class="comment">// [object Person]</span></span><br></pre></td></tr></table></figure>

<h2 id="Set-amp-Map"><a href="#Set-amp-Map" class="headerlink" title="Set &amp; Map"></a>Set &amp; Map</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul>
<li>初始化：Set 函数可以接受一个数组（或者具有 <strong>iterable</strong> 接口的其他数据结构）作为参数，用来初始化</li>
<li>通过 add、delete 和 clear 方法来添加、删除和清空集合内的元素。</li>
<li>通过 has 方法用于检查某集合中是否包含某一个元素。</li>
<li>size 属性获取数量</li>
<li>引擎内部使用 <code>Object.is()</code> 方法检测两个值是否一致。<strong>唯一的例外是，Set 集合中的 +0 和 -0 被认为是相等的</strong></li>
<li>如果多次调用 add() 方法传入相同的值作为参数，那么后续的调用实际上会被忽略</li>
<li>forEach 的回调函数接受 3 个参数：值，与第一个参数一样的值，被遍历的 Set 集合</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1, 2]);</span><br><span class="line"><span class="keyword">set</span>.forEach(function (val, key, ownSet) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">' '</span> + val);</span><br><span class="line">  <span class="built_in">console</span>.log(ownSet === <span class="keyword">set</span>);</span><br><span class="line">&#125;);</span><br><span class="line">// output</span><br><span class="line">// 1 1</span><br><span class="line">// true</span><br><span class="line">// 2 2</span><br><span class="line">// true</span><br></pre></td></tr></table></figure>

<h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>与 Set 的差别：</p>
<ul>
<li>如果 add() 方法传入非<strong>对象参数</strong>会导致程序报错，向 has() 和 delete() 方法传入非对象参数则会返回 false</li>
<li>不可迭代，不能使用 for-of 循环，不能使用 forEach 方法</li>
<li>不暴露任何迭代器（如 keys() 和 values()）</li>
<li>不支持 size</li>
</ul>
<p>实现将字符串等值类型加入到 WeakSet 数据结构中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'Hello'</span>);</span><br><span class="line"></span><br><span class="line">ws.add(str);</span><br><span class="line"><span class="built_in">console</span>.log(ws.has(str)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">str += <span class="string">'world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ws.has(str)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>被加入到 WeakSet 中的字符串和数字等不能被修改，因为一旦进行修改其引用便会丢失，甚至导致被移除出集合。</p>
</blockquote>
<p>WeakSet 不能包含无引用的对象，否则会自动清除出集合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> weakset = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">let</span> foo = &#123;&#125;;</span><br><span class="line">weakset.add(foo);</span><br><span class="line">foo = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(weakset.has(foo)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li>set(key, value) ：添加键值对到映射中</li>
<li>get(key)：获取映射中某一个键的对应值</li>
<li>delete(key)：将某一键值对移除出映射中</li>
<li>clear()： 清空映射中所有的键值对</li>
<li>has(key)：检查映射中是否包含某一键值对</li>
<li>entries()：返回一个以二元数组（键值对）作为元素的数组</li>
<li>keys()： 返回一个一当前映射中所有键作为元素的可迭代对象</li>
<li>values()：返回一个一当前映射中所有值作为元素的可迭代对象</li>
<li>map.size：键值对数量</li>
<li>forEach 的回调函数接受 3 个参数：值，值对应的键名，被遍历的 Map 集合</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'key1'</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">'key2'</span>, <span class="number">2</span>],</span><br><span class="line">]);</span><br><span class="line">myMap.set(<span class="string">'key3'</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, v] <span class="keyword">of</span> myMap) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> ==&gt; <span class="subst">$&#123;v&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key1 ==&gt; 1</span></span><br><span class="line"><span class="comment">// key2 ==&gt; 2</span></span><br><span class="line"><span class="comment">// key3 ==&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> myMap) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [ 'key1', 1 ]</span></span><br><span class="line"><span class="comment">// [ 'key2', 2 ]</span></span><br><span class="line"><span class="comment">// [ 'key3', 3 ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...myMap]); <span class="comment">// [ [ 'key1', 1 ], [ 'key2', 2 ], [ 'key3', 3 ] ]</span></span><br></pre></td></tr></table></figure>

<h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><ul>
<li>键名必须是一个对象，否则报错</li>
</ul>
<h2 id="迭代器（Iterator）-amp-生成器（Generator）"><a href="#迭代器（Iterator）-amp-生成器（Generator）" class="headerlink" title="迭代器（Iterator） &amp; 生成器（Generator）"></a>迭代器（Iterator） &amp; 生成器（Generator）</h2><blockquote>
<p><a href="https://sluggishpj.github.io/blog/2018/08/28/es6-iterator-generator/">https://sluggishpj.github.io/blog/2018/08/28/es6-iterator-generator/</a></p>
</blockquote>
<h2 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h2><h3 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h3><ul>
<li><p>类属性不可被重新赋值，只可读</p>
</li>
<li><p>类声明与 let 声明类似，不能被提升</p>
</li>
<li><p>类声明中的所有代码自动运行在严格模式下，而且无法强行让代码脱离严格模式执行</p>
</li>
<li><p>类中所有方法都是不可枚举的</p>
</li>
<li><p>Class 的取值函数（getter）和存值函数（setter）</p>
</li>
</ul>
<p>与 ES5 一样，在“类”的内部可以使用 <code>get</code> 和 <code>set</code> 关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。存值函数和取值函数会被子类<strong>继承</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> prop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'getter'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> prop(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter: '</span> + value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">inst.prop = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// setter: 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(inst.prop);</span><br><span class="line"><span class="comment">// 'getter'</span></span><br></pre></td></tr></table></figure>

<h3 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pj = <span class="keyword">new</span> Person(<span class="string">'pj'</span>);</span><br><span class="line">pj.sayName(); <span class="comment">// pj</span></span><br></pre></td></tr></table></figure>

<h4 id="命名类表达式"><a href="#命名类表达式" class="headerlink" title="命名类表达式"></a>命名类表达式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="class"><span class="keyword">class</span> <span class="title">PersonClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person); <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> PersonClass); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h4 id="作为一等公民的类"><a href="#作为一等公民的类" class="headerlink" title="作为一等公民的类"></a>作为一等公民的类</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pj = <span class="keyword">new</span> (<span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="string">'pj'</span>);</span><br><span class="line"></span><br><span class="line">pj.sayName(); <span class="comment">// pj</span></span><br></pre></td></tr></table></figure>

<h3 id="Class-继承"><a href="#Class-继承" class="headerlink" title="Class 继承"></a>Class 继承</h3><ul>
<li>如果一个子类继承了一个父类，**子类在构造函数中访问 this 前一定要调用 super()**，否则新建实例时会报错。</li>
<li><strong>如果不调用 super 方法，子类就得不到 this 对象</strong>。如果子类<strong>不写 constructor</strong> 方法，默认调用父类的 constructor 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> Square(<span class="number">3</span>); <span class="comment">// ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 没有构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="静态成员继承"><a href="#静态成员继承" class="headerlink" title="静态成员继承"></a>静态成员继承</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(length, width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> create(length, width) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Rectangle(length, width);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(length) &#123;</span><br><span class="line">    <span class="keyword">super</span>(length, length);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rect = Square.create(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rect <span class="keyword">instanceof</span> Rectangle); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(rect.getArea()); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(rect <span class="keyword">instanceof</span> Square); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="继承自表达式的类"><a href="#继承自表达式的类" class="headerlink" title="继承自表达式的类"></a>继承自表达式的类</h4><ul>
<li>ES2015 的继承语法同样可以将以前使用的<strong>构造函数</strong>模拟的类作为父类来继承</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">length, width</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.length = length;</span><br><span class="line">  <span class="keyword">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rectangle.prototype.getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.width;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(length) &#123;</span><br><span class="line">    <span class="keyword">super</span>(length, length);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> Square(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(square.getArea()); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(square <span class="keyword">instanceof</span> Rectangle); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="内建对象继承"><a href="#内建对象继承" class="headerlink" title="内建对象继承"></a>内建对象继承</h4><p>ES5 之前无法通过继承的方式创建 特殊数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> MyArray();</span><br><span class="line">colors[<span class="number">0</span>] = <span class="string">'red'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors.length); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">colors.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(colors[<span class="number">0</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h4 id="Symbol-species"><a href="#Symbol-species" class="headerlink" title="Symbol.species"></a>Symbol.species</h4><p>用于定义子类的方法返回实例时，应当返回的值的类型。该属性被返回的函数是一个构造函数，每当要在实例的方法中（不是构造函数中）创建类的实例时必须使用这个构造函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> [Symbol.species]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clone() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>.constructor[<span class="built_in">Symbol</span>.species](<span class="keyword">this</span>.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDerivedClass1</span> <span class="keyword">extends</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDerivedClass2</span> <span class="keyword">extends</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> [Symbol.species]() &#123;</span><br><span class="line">    <span class="keyword">return</span> MyClass;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> MyDerivedClass1(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> clone1 = instance1.clone();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> MyDerivedClass2(<span class="string">'bar'</span>);</span><br><span class="line"><span class="keyword">let</span> clone2 = instance2.clone();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clone1 <span class="keyword">instanceof</span> MyClass); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(clone1 <span class="keyword">instanceof</span> MyDerivedClass1); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(clone2 <span class="keyword">instanceof</span> MyClass); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(clone2 <span class="keyword">instanceof</span> MyDerivedClass2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>MyDerivedClass1</code> 继承 <code>MyClass</code> 时未改变 <code>Symbol.species</code> 属性， <code>this.constructor[Symbol.species]</code> 的返回值是 <code>MyDerivedClass1</code>，<code>clone()</code> 返回的是 <code>MyDerivedClass1</code> 的实例<br><code>MyDerivedClass2</code> 继承 <code>MyClass</code> 时重写了 <code>Symbol.species</code> 让其返回 <code>MyClass</code>，<code>clone()</code> 返回的是一个 <code>MyClass</code> 实例</p>
</blockquote>
<h4 id="在类构造函数中使用-new-target"><a href="#在类构造函数中使用-new-target" class="headerlink" title="在类构造函数中使用 new.target"></a>在类构造函数中使用 new.target</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectngle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(length, width) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target === Rectngle);</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rect = <span class="keyword">new</span> Rectngle(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectngle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(length) &#123;</span><br><span class="line">    <span class="keyword">super</span>(length, length);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> Square(<span class="number">3</span>); <span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure>

<h2 id="改进的数组"><a href="#改进的数组" class="headerlink" title="改进的数组"></a>改进的数组</h2><h3 id="新增方法"><a href="#新增方法" class="headerlink" title="新增方法"></a>新增方法</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of" target="_blank" rel="noopener">Array.of()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">Array.from()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">Array.prototype.find()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex" target="_blank" rel="noopener">Array.prototype.findIndex()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" target="_blank" rel="noopener">Array.prototype.fill()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin" target="_blank" rel="noopener">Array.prototype.copyWithin()</a></li>
</ul>
<h3 id="定型数组"><a href="#定型数组" class="headerlink" title="定型数组"></a>定型数组</h3><blockquote>
<p><a href="https://sluggishpj.github.io/blog/2018/07/28/es6-typed-array/">https://sluggishpj.github.io/blog/2018/07/28/es6-typed-array/</a></p>
</blockquote>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> randomNum = <span class="built_in">Math</span>.random();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (randomNum &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    resolve(randomNum);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(randomNum);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myPromise.then(handleSuccess, handleFail);</span><br></pre></td></tr></table></figure>

<p><code>resolve</code>函数的参数除了正常的值以外，还可能是另一个 Promise 实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  resolve(p1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p2.then(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'result'</span>, result)).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'error'</span>, error));</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>p1</code>的状态决定了<code>p2</code>的状态。如果<code>p1</code>的状态是<code>pending</code>，那么<code>p2</code>的回调函数就会等待<code>p1</code>的状态改变；如果<code>p1</code>的状态已经是<code>resolved</code>或者<code>rejected</code>，那么<code>p2</code>的回调函数将会立刻执行</p>
<p>由<code>p1</code>的状态决定<code>p2</code>的状态。所以，后面的<code>then</code>语句都变成针对<code>p1</code></p>
<p><code>then</code>方法返回的是一个新的<code>Promise</code>实例（注意，不是原来那个<code>Promise</code>实例），因此可以采用链式写法</p>
<p>一般来说，不要在<code>then</code>方法里面定义 Reject 状态的回调函数（即<code>then</code>的第二个参数），总是使用<code>catch</code>方法。</p>
</blockquote>
<h4 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h4><p>跟传统的<code>try/catch</code>代码块不同的是，如果没有使用<code>catch</code>方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会阻止其他代码的执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> someAsyncThing = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 下面一行会报错，因为x没有声明</span></span><br><span class="line">    resolve(x + <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">someAsyncThing().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'everything is great'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="comment">// Uncaught (in promise) ReferenceError: x is not defined</span></span><br><span class="line"><span class="comment">// 123（两秒后输出）</span></span><br></pre></td></tr></table></figure>

<h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>如果一个 Promise 处于<strong>已处理</strong>状态，在这之后添加到任务队列中的处理程序仍将执行。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'./somefile.js'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, contents</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">    resolve(contents);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">contents</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(contents); <span class="comment">// 文件内容</span></span><br><span class="line"></span><br><span class="line">  promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(contents); <span class="comment">// 输出同样内容</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>Promise 的执行器会立即执行，然后才执行后续流程中的代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Resolved'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="comment">// Hi</span></span><br><span class="line"><span class="comment">// Resolved</span></span><br></pre></td></tr></table></figure>

<h3 id="全局的-Promise-拒绝处理"><a href="#全局的-Promise-拒绝处理" class="headerlink" title="全局的 Promise 拒绝处理"></a>全局的 Promise 拒绝处理</h3><h4 id="Node-js-环境的拒绝处理"><a href="#Node-js-环境的拒绝处理" class="headerlink" title="Node.js 环境的拒绝处理"></a>Node.js 环境的拒绝处理</h4><p>处理 Promise 拒绝时会触发 process 对象上的两个事件</p>
<ul>
<li><code>unhandledRejection</code>： 在<strong>一个事件循环中</strong>，当 Promise 被拒绝，并且没有提供拒绝处理程序时，触发该事件</li>
<li><code>rejectionHandled</code>：在<strong>一个事件循环后</strong>，当 Promise 被拒绝时，若拒绝处理程序被调用，触发该事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unhandledRejection</span></span><br><span class="line"><span class="keyword">let</span> rejected = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Explosion!'</span>));</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'unhandledRejection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">reason, promise</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(reason.message);</span><br><span class="line">  <span class="built_in">console</span>.log(rejected === promise);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Explosion!</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rejectionHandled</span></span><br><span class="line"><span class="keyword">let</span> rejected = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Explosion!'</span>));</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'rejectionHandled'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">promise</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(rejected === promise);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  rejected.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1s 后输出</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// Explosion!</span></span><br></pre></td></tr></table></figure>

<h4 id="Promise-链的返回值"><a href="#Promise-链的返回值" class="headerlink" title="Promise 链的返回值"></a>Promise 链的返回值</h4><p>在完成处理程序中指定一个返回值，就可以沿着这条链继续传递数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">42</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 42</span></span><br><span class="line">  <span class="keyword">return</span> value + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 43</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">42</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">43</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 42</span></span><br><span class="line">  <span class="keyword">return</span> p2;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 43</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Promise-all-iterable"><a href="#Promise-all-iterable" class="headerlink" title="Promise.all(iterable)"></a>Promise.all(iterable)</h3><p>该方法传入一个可迭代对象(如数组)，并返回一个 Promise 对象，该 Promise 对象会在当可迭代对象中的所有 Promise 对象都进入完成状态(包括成功和失败)后被激活。</p>
<p>​ 如果可迭代对象中的所有 Promise 对象都进入了成功状态，那么该方法返回的 Promise 对象也会进入成功状态，并以一个可迭代对象来承载其中一个的所有返回值。</p>
<p>​ 如果可迭代对象中 Promise 对象的其中一个进入了失败状态，那么该方法返回的 Promise 对象也会进入失败状态，并以那个进入失败状态的错误信息作为自己的错误信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = [<span class="keyword">async</span>(<span class="number">1</span>), <span class="keyword">async</span>(<span class="number">2</span>), <span class="keyword">async</span>(<span class="number">3</span>), <span class="keyword">async</span>(<span class="number">4</span>)];</span><br><span class="line"><span class="built_in">Promise</span>.all(promises)</span><br><span class="line">  .then(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ... values 是个数组，含4个返回结果</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err));</span><br></pre></td></tr></table></figure>

<h3 id="Promise-race-iterable"><a href="#Promise-race-iterable" class="headerlink" title="Promise.race(iterable)"></a>Promise.race(iterable)</h3><p>这个方法会监听所有的 Promise 对象，并等待其中的第一个进入完成状态的 Promise 对象。一旦有第一个 Promise 对象进入了完成状态，该方法返回的 Promise 对象便会根据这第一个完成的 Promsie 对象的状态而改变。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = [<span class="keyword">async</span>(<span class="number">1</span>), <span class="keyword">async</span>(<span class="number">2</span>), <span class="keyword">async</span>(<span class="number">3</span>), <span class="keyword">async</span>(<span class="number">4</span>)];</span><br><span class="line"><span class="built_in">Promise</span>.race(promises)</span><br><span class="line">  .then(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err));</span><br></pre></td></tr></table></figure>

<h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><p>将现有对象转为 Promise 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsPromise = <span class="built_in">Promise</span>.resolve($.ajax(<span class="string">'/whatever.json'</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果参数是 Promise 实例，那么<code>Promise.resolve</code>将不做任何修改</p>
</li>
<li><p>参数是一个 thenable 对象(thenable 对象指的是具有<code>then</code>方法的对象，<code>Promise.resolve</code>方法会将这个对象转为 Promise 对象，然后就立即执行<code>thenable</code>对象的<code>then</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">  then: <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">42</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(thenable);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 42</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>thenable</code>对象的<code>then</code>方法执行后，对象<code>p1</code>的状态就变为<code>resolved</code>，从而立即执行最后那个<code>then</code>方法指定的回调函数，输出 42</p>
</blockquote>
</li>
<li><p>如果参数是一个原始值，或者是一个不具有<code>then</code>方法的对象，则<code>Promise.resolve</code>方法返回一个新的 Promise 对象，状态为<code>resolved</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="string">'Hello'</span>);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure></li>
<li><p>不带有任何参数</p>
<p><code>Promise.resolve</code>方法允许调用时不带参数，直接返回一个<code>resolved</code>状态的 Promise 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>​</p>
<p>立即<code>resolve</code>的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'three'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'two'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><p><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise 实例，该实例的状态为<code>rejected</code></p>
<p><code>Promise.reject()</code>方法的参数，会原封不动地作为<code>reject</code>的理由，变成后续方法的参数</p>
<h2 id="代理（Proxy）和反射（Reflection）"><a href="#代理（Proxy）和反射（Reflection）" class="headerlink" title="代理（Proxy）和反射（Reflection）"></a>代理（Proxy）和反射（Reflection）</h2><blockquote>
<p><a href="https://sluggishpj.github.io/blog/2018/09/25/es6-proxy-reflection/">https://sluggishpj.github.io/blog/2018/09/25/es6-proxy-reflection/</a></p>
</blockquote>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="导入-import"><a href="#导入-import" class="headerlink" title="导入 import"></a>导入 import</h3><p>注意：当从模块导入一个绑定时，它相当于使用 const 定义的一样，因此无法定义同名变量，也无法改变绑定的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 择需加载</span></span><br><span class="line"><span class="keyword">import</span> &#123; isInteger &#125; <span class="keyword">from</span> <span class="string">'../jutil.js'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isInteger, name &#125; <span class="keyword">from</span> <span class="string">'../jutil.js'</span>;</span><br><span class="line"><span class="comment">// 模块的整体加载</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> jutil <span class="keyword">from</span> <span class="string">'../jutil.js'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="导出-export"><a href="#导出-export" class="headerlink" title="导出 export"></a>导出 export</h3><p>注意：不能单独使用 export 导出<strong>匿名函数或类</strong>，除非结合使用 default 关键字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num === <span class="built_in">Math</span>.round(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'pj'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="导出默认值"><a href="#导出默认值" class="headerlink" title="导出默认值"></a>导出默认值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为模块指定默认输出。</span></span><br><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。</span></span><br><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">customName(); <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure>

<h4 id="重新导出一个绑定"><a href="#重新导出一个绑定" class="headerlink" title="重新导出一个绑定"></a>重新导出一个绑定</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">'./example.js'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; sum &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">export</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">'./example.js'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="无绑定导入"><a href="#无绑定导入" class="headerlink" title="无绑定导入"></a>无绑定导入</h4><p>用来执行模块代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./example.js'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Web-浏览器中使用模块"><a href="#Web-浏览器中使用模块" class="headerlink" title="Web 浏览器中使用模块"></a>Web 浏览器中使用模块</h3><h4 id="在-lt-script-gt-中使用模块"><a href="#在-lt-script-gt-中使用模块" class="headerlink" title="在 &lt;script&gt; 中使用模块"></a>在 &lt;script&gt; 中使用模块</h4><p>将 type 设置为 ‘module’ 即可。</p>
<p>注意：执行时自动应用 <strong>defer</strong> 属性。文件名必须带上后缀（可以为 js 或 mjs）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./module.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="将模块作为-Worker-加载"><a href="#将模块作为-Worker-加载" class="headerlink" title="将模块作为 Worker 加载"></a>将模块作为 Worker 加载</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> worker = <span class="keyword">new</span> Worker(<span class="string">'test2.js'</span>, &#123; <span class="attr">type</span>: <span class="string">'module'</span> &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="浏览器模块说明符解析"><a href="#浏览器模块说明符解析" class="headerlink" title="浏览器模块说明符解析"></a>浏览器模块说明符解析</h4><ul>
<li>以 / 开头的解析为从根目录开始</li>
<li>以 ./ 开头的解析为从当前目录开始</li>
</ul>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>export 和 import 的一个重要的限制是，它们必须<strong>在其他语句和函数之外</strong>使用，必须在最外层作用域</li>
<li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见</li>
<li><strong>模块脚本自动采用严格模式</strong>，不管有没有声明<code>use strict</code></li>
<li>模块之中，可以使用<code>import</code>命令加载其他模块，也可以使用<code>export</code>命令输出对外接口</li>
<li>模块之中，顶层的<code>this</code>关键字返回<code>undefined</code>，而不是指向<code>window</code>。也就是说，在模块顶层使用<code>this</code>关键字，是无意义的</li>
<li>模块是<strong>单例</strong>，同一个模块如果加载多次，将只执行一次</li>
<li>ES6 模块的 API 是静态的。也就是说，需要在模块的公开 API 中静态定义所有最高层导出，之后无法补充。</li>
<li>模块的公开 API 中暴露的属性和方法并不仅仅是普通的值或引用的赋值。它们是到内部模块定义中的标识符的实际绑定（几乎类似于指针）。导出一个局部私有变量，即使当前它持有一个原生字符串 / 数字等，导出的都是到这个变量的绑定。如果模块修改了这个变量的值，外部导入绑定现在会决议到新的值。eg.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// count.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  num = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; num &#125; <span class="keyword">from</span> <span class="string">'./count.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">// 2</span></span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>导入模块和静态请求加载（如果还没加载的话）这个模块是一样的。如果是在浏览器环境中，这意味着通过网络阻塞加载；如果是在服务器上（比如 Node.js），则是从文件系统的阻塞加载。但是，不要惊慌于这里的性能暗示。因为 ES6 模块具有静态定义，导入需求可以静态扫描预先加载，甚至是在使用这个模块之前。</li>
</ul>
<h3 id="与-CommonJS-模块差异"><a href="#与-CommonJS-模块差异" class="headerlink" title="与 CommonJS 模块差异"></a>与 CommonJS 模块差异</h3><ol>
<li><p>CommonJS 模块输出的是一个值的<strong>拷贝</strong>，ES6 模块输出的是值的<strong>引用</strong>。</p>
<ul>
<li>值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值</li>
<li>JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值，不能重新赋值（好比是 const 变量）</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">'pj'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  name = <span class="string">'rj'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, changeName &#125; <span class="keyword">from</span> <span class="string">'./util.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// pj</span></span><br><span class="line"></span><br><span class="line">changeName();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// rj</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="模块依赖环"><a href="#模块依赖环" class="headerlink" title="模块依赖环"></a>模块依赖环</h3><p>模块 A</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'B'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">10</span>) <span class="keyword">return</span> bar(x - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模块 B</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">5</span>) <span class="keyword">return</span> foo(y / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> y * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6 模块声明在完全不同的作用域，所以 ES6 需要额外的工作来支持这样的循环引用。</p>
<p>下面是从粗略概念的意义上循环的 import 依赖如何生效和解析的过程。</p>
<ul>
<li>如果先加载模块 “A”，第一步是扫描这个文件分析所有的导出，这样就可以注册所有可以导入的绑定。然后处理 <code>import .. from &quot;B&quot;</code>，这表示它需要取得 “B”。</li>
<li>引擎加载 “B” 之后，会对它的导出绑定进行同样的分析。当看到 <code>import .. from &quot;A&quot;</code>，它已经了解 “A” 的 API，所以可以验证 import 是否有效。现在它了解 “B” 的 API，就可以验证等待的 “A” 模块中 <code>import .. from &quot;B&quot;</code> 的有效性。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line">foo(<span class="number">25</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line">bar(<span class="number">25</span>); <span class="comment">// 11.5</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 <code>foo(25)</code> 或 <code>bar(25)</code> 调用执行的时候，所有模块的所有分析 / 编译都已经完成。这意味着 <code>foo(..)</code> 内部已经直接了解 <code>bar(..)</code>，而 <code>bar(..)</code> 内部也已经直接了解 <code>foo(..)</code>。</p>
</blockquote>
<p>import 语句的静态加载语义意味着可以确保通过 import 相互依赖的 “foo” 和 “bar” 在其中任何一个运行之前，二者都会被加载、解析和编译。</p>
<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><blockquote>
<p>参考链接 1：<a href="http://blog.csdn.net/kaelyn_X" target="_blank" rel="noopener">http://blog.csdn.net/kaelyn_X</a></p>
<p>参考链接 2：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">http://es6.ruanyifeng.com/</a></p>
<p>参考书籍：《UNDERESTANDING ECMASCRIPT 6》&amp;《You Don’t Know JS》</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>es6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES2016-and-ES2017</title>
    <url>/blog/2018/10/28/es2016-and-es2017/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>记录 ES2016 和 ES2017 相关知识</p>
<a id="more"></a>

<h2 id="ES2016"><a href="#ES2016" class="headerlink" title="ES2016"></a>ES2016</h2><h3 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h3><p><code>x ** y</code> 等价于 <code>Math.pow(x, y)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> ** <span class="number">3</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li><code>**</code> 的左侧一元表达式只能使用 <code>++</code> 或 <code>--</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="number">-5</span>) ** <span class="number">2</span> <span class="comment">// 25</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="number">-5</span> ** <span class="number">2</span> <span class="comment">// SyntaxError: Unexpected token **</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(++num1 ** <span class="number">2</span>) <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(num1) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num2-- ** <span class="number">2</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(num2) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>**</code> 幂运算是右结合的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> ** <span class="number">3</span> ** <span class="number">2</span>) <span class="comment">// 512</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> ** (<span class="number">3</span> ** <span class="number">2</span>)) <span class="comment">// 512</span></span><br></pre></td></tr></table></figure>



<h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h3><p>接受两个参数，返回值为 true（找到）或 false （没找到）</p>
<ul>
<li>要搜索的值</li>
<li>开始搜索的索引位置，可选参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(values.includes(<span class="number">1</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(values.includes(<span class="number">1</span>, <span class="number">1</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(values.includes(<span class="number">0</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ul>
<li>indexOf() 方法传入 NaN 会返回 -1，无论数组是否包含 <strong>NaN</strong>，includes() 方法则可以区分</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="literal">NaN</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(values.indexOf(<span class="literal">NaN</span>)) <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(values.includes(<span class="literal">NaN</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>+0 和 -0 被认为是相等的，indexOf 和 includes() 处理一致</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">-0</span>]</span><br><span class="line"><span class="built_in">console</span>.log(values.indexOf(+<span class="number">0</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(values.includes(+<span class="number">0</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>只有参数不包含 <strong>解构 或 默认值</strong> 的函数中才可以在函数体中使用 ‘use strict’</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">okay</span>(<span class="params">first, second</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="keyword">return</span> first+second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SyntaxError: Illegal 'use strict' directive in function with non-simple parameter list</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notOkay1</span>(<span class="params">first, second=first</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="keyword">return</span> first+second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同 notOkay1 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notOkay2</span>(<span class="params">&#123;first, second&#125;</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="keyword">return</span> first+second</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><h3 id="Async-functions"><a href="#Async-functions" class="headerlink" title="Async functions"></a>Async functions</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="keyword">async</span> foo() &#123;&#125;&#125;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>统一定义 wait 函数，下面用到</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">sec</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(sec)</span><br><span class="line">        &#125;, sec * <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="返回值是-Promise-对象"><a href="#返回值是-Promise-对象" class="headerlink" title="返回值是 Promise 对象"></a>返回值是 Promise 对象</h4><ul>
<li><code>async</code> 函数内部 <code>return</code> 语句返回的值，会成为 <code>then</code> 方法回调函数的参数 </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFunc().then(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x))</span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure>



<h4 id="await-命令"><a href="#await-命令" class="headerlink" title="await 命令"></a>await 命令</h4><ul>
<li><code>await</code>命令只能用在<code>async</code>函数之中，如果用在普通函数，就会报错 </li>
<li><code>await</code> 命令后面如果是一个 Promise 对象，则返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。 </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 等同于</span></span><br><span class="line">    <span class="comment">// return 123</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>await</code> 命令后面是一个 <code>thenable</code> 对象（即定义 <code>then</code> 方法的对象），那么 <code>await</code> 会将其等同于 Promise 对象 </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sleep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(timeout) &#123;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout</span><br><span class="line">    &#125;</span><br><span class="line">    then(resolve, reject) &#123;</span><br><span class="line">        <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now()</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="built_in">Date</span>.now() - startTime), <span class="keyword">this</span>.timeout)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;<span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> actualTime = <span class="keyword">await</span> <span class="keyword">new</span> Sleep(<span class="number">1000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(actualTime) <span class="comment">// 1002【该值不确定】</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>



<h4 id="Promise-对象的状态变化"><a href="#Promise-对象的状态变化" class="headerlink" title="Promise 对象的状态变化"></a>Promise 对象的状态变化</h4><p><code>async</code> 函数返回的 Promise 对象，必须等到内部所有 <code>await</code> 命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到 <code>return</code> 语句或者抛出错误。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> wait(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'res'</span>, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'done'</span>, test())</span><br><span class="line"></span><br><span class="line"><span class="comment">// done Promise &#123; &lt;pending&gt; &#125;</span></span><br><span class="line"><span class="comment">// 等 2s</span></span><br><span class="line"><span class="comment">// res 2</span></span><br></pre></td></tr></table></figure>



<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><ul>
<li>如果 <code>await</code> 后面的异步操作出错，那么等同于 <code>async</code> 函数返回的 Promise 对象被 <code>reject</code> </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">    .then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e))</span><br><span class="line"><span class="comment">// Error：出错了</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用 <code>try..catch</code> 在 <code>async</code> 函数内处理错误，或通过 <code>catch</code> 在 <code>async</code> 函数内处理错误</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> wait(<span class="number">2</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> wait(<span class="number">2</span>).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="继发-amp-并行"><a href="#继发-amp-并行" class="headerlink" title="继发 &amp; 并行"></a>继发 &amp; 并行</h4><ul>
<li>多个 <code>await</code> 命令后面的异步操作，如果不存在继发关系，可以让它们并行触发 </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">let</span> [one, two, three] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([wait(<span class="number">1</span>), wait(<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">let</span> onePromise = wait(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> twoPromise = wait(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> one = <span class="keyword">await</span> fooPromise</span><br><span class="line"><span class="keyword">let</span> two = <span class="keyword">await</span> barPromise</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">arr.forEach(<span class="keyword">async</span> v =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> wait(v)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'forEach'</span>, res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> otherAsyncFunc()</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> otherAsyncFunc().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>处理继发关系</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> wait(v)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'for..of'</span>, res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">doFun()</span><br></pre></td></tr></table></figure>



<h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>async 函数同步开始，异步解决</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'A asyncFunc()'</span>) <span class="comment">// (A)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'abc'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFunc().then(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`B Resolved: <span class="subst">$&#123;x&#125;</span>`</span>)) <span class="comment">// (B)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'C main'</span>) <span class="comment">// (C)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次输出</span></span><br><span class="line"><span class="comment">// A asyncFunc()</span></span><br><span class="line"><span class="comment">// C main</span></span><br><span class="line"><span class="comment">// B Resolved: abc</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>The result of an async function is always a Promise <code>p</code>. That Promise is created when starting the execution of the async function.</li>
<li>The body is executed. Execution may finish permanently via <code>return</code> or <code>throw</code>. Or it may finish temporarily via <code>await</code>; in which case execution will usually continue later on.</li>
<li>The Promise <code>p</code> is returned.</li>
</ol>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p>参考链接：<a href="http://exploringjs.com/es2016-es2017/" target="_blank" rel="noopener">http://exploringjs.com/es2016-es2017/</a></p>
<p>参考链接：<a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/async</a></p>
<p>参考书籍：《UNDERESTANDING ECMASCRIPT 6》</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>es2016&amp;es2017</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es2016</tag>
        <tag>es2017</tag>
      </tags>
  </entry>
  <entry>
    <title>ES2018</title>
    <url>/blog/2018/12/26/es2018/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>记录 ES2018 相关知识</p>
<a id="more"></a>

<h2 id="异步迭代"><a href="#异步迭代" class="headerlink" title="异步迭代"></a>异步迭代</h2><ul>
<li>通过 <code>Symbol.asyncIterator</code> 访问内建的迭代器</li>
<li>方法 <code>next()</code> 返回的是 Promise</li>
</ul>
<ul>
<li>统一定义 wait 函数，下面用到</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">sec</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(sec)</span><br><span class="line">    &#125;, sec * <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for-await…of"><a href="#for-await…of" class="headerlink" title="for await…of"></a>for await…of</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> res <span class="keyword">of</span> [wait(<span class="number">2</span>), wait(<span class="number">4</span>)]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doFun()</span><br><span class="line"><span class="comment">// 2s 后输出</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 4s 后输出</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><code>for-await-of</code> 不能在模块最顶层使用，同 await 要在 async 函数内使用</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doFun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> res <span class="keyword">of</span> [wait(<span class="number">4</span>), wait(<span class="number">2</span>)]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doFun2()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4s 后输出</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doFun3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.all([wait(<span class="number">2</span>), wait(<span class="number">4</span>)])) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doFun3()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过 4s 后输出</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="异步-generator-函数"><a href="#异步-generator-函数" class="headerlink" title="异步 generator 函数"></a>异步 generator 函数</h3><ul>
<li>异步 Generator 函数的返回值是一个异步 Iterator，即每次调用它的 <code>next</code> 方法，会返回一个 Promise 对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>* <span class="title">asyncGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Start'</span>)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> wait(<span class="number">2</span>) <span class="comment">// (A)</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'Result: '</span> + result <span class="comment">// (B)</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Done'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ag = asyncGenerator()</span><br><span class="line">ag.next().then(<span class="function">(<span class="params">&#123; value, done &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start</span></span><br><span class="line"><span class="comment">// 2s 后继续输出</span></span><br><span class="line"><span class="comment">// Result: 2</span></span><br></pre></td></tr></table></figure>

<h3 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>* <span class="title">asyncGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// The following exception is converted to a rejection</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Problem!'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncGenerator()</span><br><span class="line">  .next()</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err)) <span class="comment">// Error: Problem!</span></span><br></pre></td></tr></table></figure>

<h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="rest-与对象解构"><a href="#rest-与对象解构" class="headerlink" title="rest 与对象解构"></a>rest 与对象解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span>, <span class="attr">baz</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">const</span> &#123; foo, ...rest &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(rest) <span class="comment">// &#123; bar: 2, baz: 3 &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">  &#125;,</span><br><span class="line">  bar: <span class="number">4</span>,</span><br><span class="line">  baz: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  foo: &#123; a, ...rest1 &#125;,</span><br><span class="line">  ...rest2</span><br><span class="line">&#125; = obj</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rest1) <span class="comment">// &#123; b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(rest2) <span class="comment">// &#123; bar: 4, baz: 5 &#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>错误情况</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ...rest, foo &#125; = obj <span class="comment">// SyntaxError</span></span><br><span class="line"><span class="keyword">const</span> &#123; foo, ...rest1, ...rest2 &#125; = obj <span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure>

<h3 id="对象解构-vs-Object-assign"><a href="#对象解构-vs-Object-assign" class="headerlink" title="对象解构 vs. Object.assign()"></a>对象解构 vs. Object.assign()</h3><ul>
<li><code>Object.assign()</code> 触发源对象的 <code>set</code> 方法，解构则不会</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">'foo'</span>, &#123;</span><br><span class="line">  <span class="keyword">set</span>(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'SET'</span>, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, obj)</span><br><span class="line"><span class="comment">// SET 123</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res = &#123; ...obj &#125; <span class="comment">// 没有输出</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对于只读属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前提</span></span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">'bar'</span>, &#123;</span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  value: <span class="string">'abc'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tmp = &#123;&#125;</span><br><span class="line">tmp.bar = <span class="number">123</span></span><br><span class="line"><span class="comment">// TypeError: Cannot assign to read only property 'bar' of object '#&lt;Object&gt;'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">bar</span>: <span class="number">123</span> &#125; <span class="comment">// 正常</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">bar</span>: <span class="number">123</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, obj)</span><br><span class="line"><span class="comment">// TypeError: Cannot assign to read only property 'bar' of object '#&lt;Object&gt;'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">bar</span>: <span class="number">123</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; ...obj &#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123; bar: 123 &#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>两者都只考虑非原型上的可枚举属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  inheritedEnumerable: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(proto, &#123;</span><br><span class="line">  ownEnumerable: &#123;</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ownNonEnumerable: &#123;</span><br><span class="line">    value: <span class="number">3</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res1 = &#123; ...obj &#125;</span><br><span class="line"><span class="built_in">console</span>.log(res1) <span class="comment">// &#123; ownEnumerable: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj)</span><br><span class="line"><span class="built_in">console</span>.log(res2) <span class="comment">// &#123; ownEnumerable: 2 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="命名捕获组（Named-capture-groups）"><a href="#命名捕获组（Named-capture-groups）" class="headerlink" title="命名捕获组（Named capture groups）"></a>命名捕获组（Named capture groups）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(?&lt;year&gt;[0-9]&#123;4&#125;)-(?&lt;month&gt;[0-9]&#123;2&#125;)-(?&lt;day&gt;[0-9]&#123;2&#125;)/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matchObj = RE_DATE.exec(<span class="string">'1999-12-31'</span>)</span><br><span class="line"><span class="keyword">const</span> year = matchObj.groups.year <span class="comment">// 1999</span></span><br><span class="line"><span class="keyword">const</span> month = matchObj.groups.month <span class="comment">// 12</span></span><br><span class="line"><span class="keyword">const</span> day = matchObj.groups.day <span class="comment">// 31</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Named capture groups 同样可以通过下标获取组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> year2 = matchObj[<span class="number">1</span>] <span class="comment">// 1999</span></span><br><span class="line"><span class="keyword">const</span> month2 = matchObj[<span class="number">2</span>] <span class="comment">// 12</span></span><br><span class="line"><span class="keyword">const</span> day2 = matchObj[<span class="number">3</span>] <span class="comment">// 31</span></span><br></pre></td></tr></table></figure>

<h4 id="反向引用（Backreferences）"><a href="#反向引用（Backreferences）" class="headerlink" title="反向引用（Backreferences）"></a>反向引用（Backreferences）</h4><p><code>\k&lt;name&gt;</code> 在正则表达式中表示：匹配先前捕获过的同名捕获组字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;$/</span></span><br><span class="line">RE_TWICE.test(<span class="string">'abc!abc'</span>) <span class="comment">// true</span></span><br><span class="line">RE_TWICE.test(<span class="string">'abc!ab'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>编号捕获组（numbered capture groups ）的反向引用语法 也适用于 命名捕获组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\1$/</span></span><br><span class="line">RE_TWICE.test(<span class="string">'abc!abc'</span>) <span class="comment">// true</span></span><br><span class="line">RE_TWICE.test(<span class="string">'abc!ab'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>两者也可以混合使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;!\1$/</span></span><br><span class="line">RE_TWICE.test(<span class="string">'abc!abc!abc'</span>) <span class="comment">// true</span></span><br><span class="line">RE_TWICE.test(<span class="string">'abc!abc!ab'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="replace-和命名捕获组"><a href="#replace-和命名捕获组" class="headerlink" title="replace() 和命名捕获组"></a>replace() 和命名捕获组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(?&lt;year&gt;[0-9]&#123;4&#125;)-(?&lt;month&gt;[0-9]&#123;2&#125;)-(?&lt;day&gt;[0-9]&#123;2&#125;)/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1999-12-31'</span>.replace(RE_DATE, <span class="string">'$&lt;month&gt;/$&lt;day&gt;/$&lt;year&gt;'</span>))</span><br><span class="line"><span class="comment">// 12/31/1999</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(?&lt;year&gt;[0-9]&#123;4&#125;)-(?&lt;month&gt;[0-9]&#123;2&#125;)-(?&lt;day&gt;[0-9]&#123;2&#125;)/</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">'1999-12-31'</span>.replace(</span><br><span class="line">    RE_DATE,</span><br><span class="line">    (g0, y, m, d, offset, input, &#123; year, month, day &#125;) =&gt; month + <span class="string">'/'</span> + day + <span class="string">'/'</span> + year</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 12/31/1999</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><code>g0</code> 包含匹配得到的整个字符串 <code>1999-12-31</code></li>
<li><code>y, m, d</code> 指捕获组 1-3，也是命名组 <code>year, month, day</code></li>
<li><code>offset</code> 指匹配到的内容在字符串中的位置</li>
<li><code>input</code> 指输入的整个字符串</li>
<li>最后的一个参数是新增的，包含命名捕获组，这里是 <code>year, month, day</code></li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取最后一个参数的另一种方法</span></span><br><span class="line"><span class="keyword">const</span> RE_DATE = <span class="regexp">/(?&lt;year&gt;[0-9]&#123;4&#125;)-(?&lt;month&gt;[0-9]&#123;2&#125;)-(?&lt;day&gt;[0-9]&#123;2&#125;)/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">'1999-12-31'</span>.replace(RE_DATE, (...args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; year, month, day &#125; = args[args.length - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> month + <span class="string">'/'</span> + day + <span class="string">'/'</span> + year</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 12/31/1999</span></span><br></pre></td></tr></table></figure>

<h4 id="未匹配的命名组"><a href="#未匹配的命名组" class="headerlink" title="未匹配的命名组"></a>未匹配的命名组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_OPT_A = <span class="regexp">/^(?&lt;as&gt;a+)?$/</span></span><br><span class="line"><span class="keyword">const</span> matchObj = RE_OPT_A.exec(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Group &lt;as&gt; didn’t match anything:</span></span><br><span class="line"><span class="built_in">console</span>.log(matchObj.groups.as === <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// But property `as` exists:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'as'</span> <span class="keyword">in</span> matchObj.groups) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="正则表达式-Unicode-转义属性"><a href="#正则表达式-Unicode-转义属性" class="headerlink" title="正则表达式 Unicode 转义属性"></a>正则表达式 Unicode 转义属性</h3><p>正则表达式中使用 u 标志(flags)，之后在<code>\p{}</code>花括号内声明 Unicode 字符属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配空白符</span></span><br><span class="line">/^\p&#123;White_Space&#125;+$/u.test(<span class="string">'\t \n\r'</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配希腊字母</span></span><br><span class="line">/^\p&#123;Script=Greek&#125;+$/u.test(<span class="string">'μετά'</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Unicode_character_property" target="_blank" rel="noopener">WIKI - Unicode 字符属性</a></p>
</blockquote>
<h3 id="正则表达式-lookbehind-assertion"><a href="#正则表达式-lookbehind-assertion" class="headerlink" title="正则表达式 - lookbehind assertion"></a>正则表达式 - lookbehind assertion</h3><p>翻译成：反向断言？回顾断言？翻译成反向断言算了，重在理解。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>翻译</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>(?&lt;=exp)reg</code></td>
<td>反向肯定断言</td>
<td>reg 匹配的内容前面内容满足 exp 规则</td>
</tr>
<tr>
<td><code>(?&lt;!exp)reg</code></td>
<td>反向否定断言</td>
<td>reg 匹配的内容前面内容不满足 exp 规则</td>
</tr>
</tbody></table>
<ul>
<li>正向断言(lookahead assertions)</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>翻译</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>reg(?=exp)</code></td>
<td>正向肯定断言</td>
<td>reg 匹配的内容后面内容满足 exp 规则</td>
</tr>
<tr>
<td><code>reg(?!exp)</code></td>
<td>正向否定断言</td>
<td>reg 匹配的内容后面内容不满足 exp 规则</td>
</tr>
</tbody></table>
<blockquote>
<p>正向断言和反向断言均不捕获分组。</p>
</blockquote>
<h4 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h4><ol>
<li>正向断言</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正向肯定断言</span></span><br><span class="line"><span class="keyword">const</span> RE_AS_BS = <span class="regexp">/aa(?=bb)/</span></span><br><span class="line"><span class="keyword">const</span> match1 = RE_AS_BS.exec(<span class="string">'aabb'</span>)</span><br><span class="line">match1[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 'aa'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> match2 = RE_AS_BS.exec(<span class="string">'aab'</span>)</span><br><span class="line">match2</span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正向否定断言</span></span><br><span class="line"><span class="keyword">const</span> RE_AS_NO_BS = <span class="regexp">/aa(?!bb)/</span></span><br><span class="line">RE_AS_NO_BS.test(<span class="string">'aabb'</span>)</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">RE_AS_NO_BS.test(<span class="string">'aab'</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>反向断言</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反向肯定断言</span></span><br><span class="line"><span class="string">'a1ba2ba3b'</span>.match(<span class="regexp">/(?&lt;=b)a.b/g</span>)</span><br><span class="line"><span class="comment">// [ 'a2b', 'a3b' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向否定断言</span></span><br><span class="line"><span class="keyword">const</span> RE_NO_DOLLAR_PREFIX = <span class="regexp">/(?&lt;!\$)foo/g</span></span><br><span class="line"><span class="string">'$foo %foo foo'</span>.replace(RE_NO_DOLLAR_PREFIX, <span class="string">'bar'</span>)</span><br><span class="line"><span class="comment">// '$foo %bar bar'</span></span><br></pre></td></tr></table></figure>

<h3 id="正则表达式-s-dotAll-标志符"><a href="#正则表达式-s-dotAll-标志符" class="headerlink" title="正则表达式 s(dotAll) 标志符"></a>正则表达式 s(dotAll) 标志符</h3><ol>
<li>添加<code>s</code>标志符的作用：使正则表达式中的 <code>.</code> 匹配包括行终止符在内的所有单字符。不添加的话不匹配行终止符。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^.$/.test(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">/^.$/s.test(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>行终止符包括<code>\n</code>, <code>\r</code>等。<a href="https://www.ecma-international.org/ecma-262/5.1/#sec-7.3" target="_blank" rel="noopener">ECMA-line terminators</a></p>
</blockquote>
<ol start="2">
<li>标志符 <code>/s</code>对应的正则实例属性是 <code>dotAll</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/./s.dotAll</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">/./g.global</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-finally"><a href="#Promise-finally" class="headerlink" title="Promise.finally()"></a>Promise.finally()</h2><ul>
<li>then’s callback is only executed if <code>promise</code> is <strong>fulfilled</strong></li>
<li>catch’s callback is only executed if <code>promise</code> is <strong>rejected</strong>. Or <strong>then’s callback throws an exception or returns a rejected Promise</strong>.</li>
<li>不管 fulfilled 或 rejected, finally 都会执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">  .finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;···&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><h3 id="带标签的模板字面量及转义序列"><a href="#带标签的模板字面量及转义序列" class="headerlink" title="带标签的模板字面量及转义序列"></a>带标签的模板字面量及转义序列</h3><ol>
<li><p>自 ES2016 起，带标签的模版字面量遵守以下转义序列的规则：</p>
<ul>
<li>Unicode 字符以<code>&quot;\u&quot;</code>开头，例如<code>\u00A9</code></li>
<li>Unicode 码位用<code>&quot;\u{}&quot;</code>表示，例如<code>\u{2F804}</code></li>
<li>十六进制以<code>&quot;\x&quot;</code>开头，例如<code>\xA9</code></li>
<li>八进制以<code>&quot;\&quot;</code>和数字开头，例如<code>\251</code></li>
</ul>
</li>
<li><p>ES2018 关于非法转义序列的修订<br>移除对 ECMAScript 在带标签的模版字符串中转义序列的语法限制。不过，非法转义序列在”cooked”当中仍然会体现出来。它们将以 undefined 元素的形式存在于”cooked”之中：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">latex</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">cooked</span>: str[<span class="number">0</span>], <span class="attr">raw</span>: str.raw[<span class="number">0</span>] &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(latex<span class="string">`\unicode`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; cooked: undefined, raw: "\\unicode" &#125;</span></span><br></pre></td></tr></table></figure>

<p>注意：这一转义序列限制只对带标签的模板字面量移除，而不包括不带标签的模板字面量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bad = <span class="string">`bad escape sequence: \unicode`</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Invalid Unicode escape sequence</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="http://exploringjs.com/es2018-es2019/toc.html" target="_blank" rel="noopener">http://exploringjs.com/es2018-es2019/toc.html</a></p>
</blockquote>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings</a></p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>es2018</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es2018</tag>
      </tags>
  </entry>
  <entry>
    <title>es2019</title>
    <url>/blog/2019/10/28/es2019/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>记录 ES2019 相关知识</p>
<a id="more"></a>

<h2 id="Array-prototype-flat-flatMap"><a href="#Array-prototype-flat-flatMap" class="headerlink" title="Array.prototype.{flat, flatMap}"></a>Array.prototype.{flat, flatMap}</h2><h3 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a>Array.prototype.flat()</h3><ul>
<li>不传参数时，将数组第 1 层“打平”</li>
<li>传入参数 n 时，将数组第 1-n 层“打平”，n 为 0 时返回和原数组一样的数组</li>
<li>返回打平后的数组，原数组不影响。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>]]].flat(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// [ 1, 2, [ 3, 4 ], [ [ 5, 6 ] ] ]</span></span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>]]].flat(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, [ 5, 6 ] ]</span></span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-flatMap"><a href="#Array-prototype-flatMap" class="headerlink" title="Array.prototype.flatMap()"></a>Array.prototype.flatMap()</h3><p><code>arr.flatMap(func)</code>相当于<code>arr.map(func).flat(1)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].flatMap(<span class="function"><span class="params">x</span> =&gt;</span> x)</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c' ]</span></span><br><span class="line">;[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [x])</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c' ]</span></span><br><span class="line">;[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [[x]])</span><br><span class="line"><span class="comment">// [ [ 'a' ], [ 'b' ], [ 'c' ] ]</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h2><p>和<code>Object.entries</code>的作用相反</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.entries(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;)</span><br><span class="line"><span class="comment">// [['foo', 1], ['bar', 2]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.fromEntries([[<span class="string">'foo'</span>, <span class="number">1</span>], [<span class="string">'bar'</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment">// &#123;foo: 1, bar: 2&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="String-prototype-trimStart-trimEnd"><a href="#String-prototype-trimStart-trimEnd" class="headerlink" title="String.prototype.{trimStart, trimEnd}"></a>String.prototype.{trimStart, trimEnd}</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'  abc  '</span>.trimStart()</span><br><span class="line"><span class="comment">// 'abc  '</span></span><br><span class="line"></span><br><span class="line"><span class="string">'  abc  '</span>.trimEnd()</span><br><span class="line"><span class="comment">// '  abc'</span></span><br></pre></td></tr></table></figure>

<h2 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description"></a>Symbol.prototype.description</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(<span class="string">'The description'</span>)</span><br><span class="line"><span class="built_in">String</span>(sym)</span><br><span class="line"><span class="comment">// Symbol(The description)</span></span><br><span class="line"></span><br><span class="line">sym.description</span><br><span class="line"><span class="comment">// The description</span></span><br></pre></td></tr></table></figure>

<h2 id="可选-catch-绑定"><a href="#可选-catch-绑定" class="headerlink" title="可选 catch 绑定"></a>可选 catch 绑定</h2><p>在<code>try catch</code>中，catch 可以不传参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用途，不想捕获错误</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> supported</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  useTheFeature()</span><br><span class="line">  supported = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  supported = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="稳定的-Array-prototype-sort"><a href="#稳定的-Array-prototype-sort" class="headerlink" title="稳定的 Array.prototype.sort()"></a>稳定的 Array.prototype.sort()</h2><p>意思是: 如果两个元素经过比较相等，会维持其先后顺序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'b'</span>,</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'a'</span>,</span><br><span class="line">    value: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'b'</span>,</span><br><span class="line">    value: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">arr.sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x.key.localeCompare(y.key, <span class="string">'en-US'</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// [ &#123; key: 'a', value: 2 &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; key: 'b', value: 1 &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; key: 'b', value: 3 &#125; ]</span></span><br></pre></td></tr></table></figure>

<h2 id="Well-formed-JSON-stringify"><a href="#Well-formed-JSON-stringify" class="headerlink" title="Well-formed JSON.stringify"></a>Well-formed JSON.stringify</h2><p>在此之前，如果参数的 code point 在<code>U+D800 to U+DFFF</code>，输出的字符无法通过 UTF-8 或 UTF-16 编码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\uD800'</span>) <span class="comment">// '"�"'</span></span><br></pre></td></tr></table></figure>

<p>在此之后，输出的字符可以通过 UTF8 或 UTF-16 正常编码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\uD800'</span>) <span class="comment">// '"\\ud800"'</span></span><br></pre></td></tr></table></figure>

<h2 id="JSON-superset"><a href="#JSON-superset" class="headerlink" title="JSON superset"></a>JSON superset</h2><p>在此之前，字符串中不能直接包含 <code>U+2028</code>行分隔符 和 <code>U+2029</code>段落分隔符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sourceCode = <span class="string">'"\u2028"'</span></span><br><span class="line"><span class="built_in">eval</span>(sourceCode) <span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure>

<p>在此之后，可以包含。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> json = <span class="string">'"\u2028"'</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(json) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure>

<h2 id="Function-prototype-toString-修订"><a href="#Function-prototype-toString-修订" class="headerlink" title="Function.prototype.toString 修订"></a>Function.prototype.toString 修订</h2><ul>
<li>如果函数是通过编写 ECMAScript 源代码创建的，<code>toString()</code>原样返回其源码</li>
<li>否则，返回标准占位符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这是注释</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.toString())</span><br><span class="line"><span class="comment">// function test(a, b) &#123;</span></span><br><span class="line"><span class="comment">//   // 这是注释</span></span><br><span class="line"><span class="comment">//   console.log('test')</span></span><br><span class="line"><span class="comment">//   return a + b</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow.toString())</span><br><span class="line"><span class="comment">// function pow() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://exploringjs.com/es2018-es2019/toc.html" target="_blank" rel="noopener">https://exploringjs.com/es2018-es2019/toc.html</a></p>
</blockquote>
<blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">MDN-JSON.stringify</a></p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>es2019</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es2019</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-Iterator-Generator</title>
    <url>/blog/2018/08/28/es6-iterator-generator/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Iterator &amp; Generator</p>
<a id="more"></a>

<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>可以通过 Symbol.iterator 来访问对象默认的迭代器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="for-of遍历"><a href="#for-of遍历" class="headerlink" title="for-of遍历"></a>for-of遍历</h2><p>遍历的对象必须要有迭代器，<strong>数组，字符串，set，map</strong>已经内置了。其他可手动添加。遍历<strong>字符串</strong>能够正确访问<strong>双字节</strong>字符</p>
<h3 id="创建可迭代对象"><a href="#创建可迭代对象" class="headerlink" title="创建可迭代对象"></a>创建可迭代对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> collection = &#123;</span><br><span class="line">    items: [],</span><br><span class="line">    *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.items) &#123;</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">collection.items.push(<span class="number">1</span>)</span><br><span class="line">collection.items.push(<span class="number">2</span>)</span><br><span class="line">collection.items.push(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> collection) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    b: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="built_in">Symbol</span>.iterator, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> o = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> ks = <span class="built_in">Object</span>.keys(o)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    value: o[ks[idx++]],</span><br><span class="line">                    done: (idx &gt; ks.length)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 for..of 遍历 myObject</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> myObject) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>或者</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    b: <span class="number">3</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">var</span> o = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> ks = <span class="built_in">Object</span>.keys(o);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    value: o[ks[idx++]],</span><br><span class="line">                    done: (idx &gt; ks.length)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="内建迭代器"><a href="#内建迭代器" class="headerlink" title="内建迭代器"></a>内建迭代器</h2><h3 id="集合对象迭代器"><a href="#集合对象迭代器" class="headerlink" title="集合对象迭代器"></a>集合对象迭代器</h3><p>3种类型的集合对象：数组，Map集合和Set集合</p>
<ul>
<li>entries() : 返回一个迭代器，其值为多个键值对。<ul>
<li>数组：第一个元素是数字类型的索引，第二个是索引对应的值</li>
<li>Set 集合，第一个元素与第二个元素都是值</li>
<li>Map集合，第一个元素为键名，第二个是键名对应的值</li>
</ul>
</li>
<li>values() : 返回一个迭代器，其值为集合的所有值<ul>
<li>Set 集合：keys() 和 values() 返回的是相同的迭代器</li>
</ul>
</li>
<li>keys() : 返回一个迭代器，其值为集合中的所有键名</li>
</ul>
<p><strong>在 for-of 循环中，如果没有显示制定则使用默认的迭代器，数组和 Set 集合的默认迭代器是 values() 方法，Map 集合的默认迭代器是 entries() 方法</strong></p>
<h3 id="NodeList-迭代器"><a href="#NodeList-迭代器" class="headerlink" title="NodeList 迭代器"></a>NodeList 迭代器</h3><p>DOM 定义的 NodeList 类型（定义在 HTML 标准中）也拥有默认迭代器，其行为和数组的默认迭代器一致</p>
<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><ul>
<li>判断Generator函数及生成器对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测生成器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isGeneratorFunction</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> genFn = (<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;&#125;).constructor;</span><br><span class="line">    <span class="keyword">return</span> fn <span class="keyword">instanceof</span> genFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测生成器实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isGenerator</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.toString ? obj.toString() === <span class="string">'[object Generator]'</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> a = a*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = genFn();</span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next());  <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next());  <span class="comment">// &#123; value: 8, done: false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isGeneratorFunction(genFn)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isGenerator(gen)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isGenerator(&#123;&#125;)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<ul>
<li>在一个<strong>普通函数</strong>中使用yield表达式，结果产生一个句法错误</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [[<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flat = <span class="function"><span class="keyword">function</span>*(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item !== <span class="string">'number'</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span>* flat(item); <span class="comment">// SyntaxError</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">yield</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面代码也会产生句法错误，因为forEach方法的参数是一个普通函数，但是在里面使用了yield表达式。一种修改方法是改用for循环。</p>
</blockquote>
<h3 id="给迭代器传递参数"><a href="#给迭代器传递参数" class="headerlink" title="给迭代器传递参数"></a>给迭代器传递参数</h3><p>yield表达式本身没有返回值，或者说总是返回 undefined 。next 方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。特例是<strong>第一次调用 next() 方法时无论传入什么参数都会被丢弃</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; <span class="literal">true</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> reset = <span class="keyword">yield</span> i;</span><br><span class="line">        <span class="built_in">console</span>.log(i, reset);</span><br><span class="line">        <span class="keyword">if</span> (reset) &#123; i = <span class="number">-1</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = f();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next(<span class="literal">true</span>)); <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"><span class="comment">// 0 undefined</span></span><br><span class="line"><span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// 1 undefined</span></span><br><span class="line"><span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="comment">// 2 true</span></span><br><span class="line"><span class="comment">// &#123; value: 0, done: false &#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="在迭代器中抛出错误"><a href="#在迭代器中抛出错误" class="headerlink" title="在迭代器中抛出错误"></a>在迭代器中抛出错误</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> second = <span class="keyword">yield</span> first + <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> second + <span class="number">3</span> <span class="comment">// 不会被执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = createIterator()</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="number">4</span>)) <span class="comment">// &#123; value: 6, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom'</span>))) <span class="comment">// 抛出错误</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next())</span><br></pre></td></tr></table></figure>

<p>捕获错误，调用 throw()  方法也会像调用 next() 方法一样返回一个结果对象。由于在生成器内部捕获了这个错误，因而会继续执行下一条 yield 语句，最终返回数值 9</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> second</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        second = <span class="keyword">yield</span> first + <span class="number">2</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">        second = first + <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">yield</span> second + <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = createIterator()</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="number">4</span>)) <span class="comment">// &#123; value: 6, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom'</span>))) <span class="comment">// &#123; value: 9, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="生成器返回语句"><a href="#生成器返回语句" class="headerlink" title="生成器返回语句"></a>生成器返回语句</h3><p>在生成器中，return 表示所有操作已经完成，属性 done 被设置为 true，如果同时提供了相应的值，则属性 value 会被设置为这个值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = createIterator()</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 2, done: true &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="委托生成器"><a href="#委托生成器" class="headerlink" title="委托生成器"></a>委托生成器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createNumberIterator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createCombinedIterator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">yield</span> *createNumberIterator()</span><br><span class="line">    <span class="keyword">yield</span> result</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = createCombinedIterator()</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="异步任务执行器"><a href="#异步任务执行器" class="headerlink" title="异步任务执行器"></a>异步任务执行器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">taskDef</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> task = taskDef()</span><br><span class="line">    <span class="keyword">let</span> result = task.next()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!result.done) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> result.value === <span class="string">'function'</span>) &#123;</span><br><span class="line">                result.value(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                        result = task.throw(err)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    result = task.next(data)</span><br><span class="line">                    step()</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = task.next(result.value)</span><br><span class="line">                step()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始迭代执行</span></span><br><span class="line">    step()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            cb(<span class="literal">null</span>, <span class="string">'done1'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            cb(<span class="literal">null</span>, <span class="string">'done2'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content1 = <span class="keyword">yield</span> async1()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content1'</span>, content1) <span class="comment">// content1 done1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> content2 = <span class="keyword">yield</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content2'</span>, content2) <span class="comment">// content2 done2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接1：<a href="http://blog.csdn.net/kaelyn_X" target="_blank" rel="noopener">http://blog.csdn.net/kaelyn_X</a></p>
<p>参考链接2：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">http://es6.ruanyifeng.com/</a></p>
<p>参考书籍：《UNDERESTANDING ECMASCRIPT 6》</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>es6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es6</tag>
        <tag>iterator</tag>
        <tag>generator</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-Proxy-Reflection</title>
    <url>/blog/2018/09/25/es6-proxy-reflection/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Proxy &amp; Reflection</p>
<a id="more"></a>

<h2 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h2><table>
<thead>
<tr>
<th>proxy trap</th>
<th>覆盖的特性</th>
<th>默认特性</th>
</tr>
</thead>
<tbody><tr>
<td>get</td>
<td>读取一个属性</td>
<td>Reflect.get()</td>
</tr>
<tr>
<td>set</td>
<td>写入一个属性</td>
<td>Reflect.set()</td>
</tr>
<tr>
<td>has</td>
<td>in 操作符</td>
<td>Reflect.has()</td>
</tr>
<tr>
<td>deleteProperty</td>
<td>delete 操作符</td>
<td>Reflect.deleteProperty()</td>
</tr>
<tr>
<td>getPrototypeOf</td>
<td>Object.getPrototypeOf()</td>
<td>Reflect.getPrototypeOf()</td>
</tr>
<tr>
<td>setPrototypeOf</td>
<td>Object.setPrototypeOf()</td>
<td>Reflect.setPrototypeOf</td>
</tr>
<tr>
<td>isExtensible</td>
<td>Object.isExtensible()</td>
<td>Reflect.isExtensible</td>
</tr>
<tr>
<td>preventExtensions</td>
<td>Object.preventExtensions()</td>
<td>Reflect.preventExtensions()</td>
</tr>
<tr>
<td>getOwnPropertyDescriptor</td>
<td>Object.getOwnPropertyDescriptor()</td>
<td>Reflect.getOwnPropertyDescriptor()</td>
</tr>
<tr>
<td>defineProperty</td>
<td>Object.defineProperty()</td>
<td>Reflect.defineProperty()</td>
</tr>
<tr>
<td>ownKeys</td>
<td>Object.keys()、<br />Object.getOwnPropertyNames()、<br />Object.getOwnPropertySymbols()</td>
<td>Reflect.ownKeys()</td>
</tr>
<tr>
<td>apply</td>
<td>调用一个函数</td>
<td>Reflect.apply()</td>
</tr>
<tr>
<td>construct</td>
<td>用  new 调用一个函数</td>
<td>Reflect.construct()</td>
</tr>
</tbody></table>
<h2 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h2><h3 id="没有陷阱的代理"><a href="#没有陷阱的代理" class="headerlink" title="没有陷阱的代理"></a>没有陷阱的代理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">'proxy'</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.name) <span class="comment">// proxy</span></span><br><span class="line"><span class="built_in">console</span>.log(target.name) <span class="comment">// proxy</span></span><br><span class="line"></span><br><span class="line">target.name = <span class="string">'target'</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.name) <span class="comment">// target</span></span><br><span class="line"><span class="built_in">console</span>.log(target.name) <span class="comment">// target</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>代理将所有操作直接 转发到目标。 proxy.name 和 target.name 引用的都是 target.name</p>
</blockquote>
<h3 id="set-trapTarget-key-value-receiver"><a href="#set-trapTarget-key-value-receiver" class="headerlink" title="set(trapTarget, key, value, receiver)"></a>set(trapTarget, key, value, receiver)</h3><ul>
<li>trapTarget: 用于接收属性（代理的目标）的对象</li>
<li>key: 要写入的属性键（字符串 或 Symbol 类型）</li>
<li>value: 被写入属性的值</li>
<li>receiver: 操作发生的对象（通常是代理）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    name: <span class="string">'target'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="keyword">set</span>(trapTarget, key, value, reciver) &#123;</span><br><span class="line">        <span class="comment">// 忽略不希望受到影响的已有属性</span></span><br><span class="line">        <span class="keyword">if</span>(!trapTarget.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isNaN</span>(value)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'属性必须是数字'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(trapTarget, key, value, reciver)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.count = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.count) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(target.count) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抛出错误</span></span><br><span class="line">proxy.anotherName = <span class="string">'proxy'</span></span><br></pre></td></tr></table></figure>



<h3 id="get-trapTarget-key-receiver"><a href="#get-trapTarget-key-receiver" class="headerlink" title="get(trapTarget, key, receiver)"></a>get(trapTarget, key, receiver)</h3><h3 id="has-trapTarget-key-返回-false"><a href="#has-trapTarget-key-返回-false" class="headerlink" title="has(trapTarget, key): 返回 false"></a>has(trapTarget, key): 返回 false</h3><h3 id="deleteProperty-trapTarget-key"><a href="#deleteProperty-trapTarget-key" class="headerlink" title="deleteProperty(trapTarget, key)"></a>deleteProperty(trapTarget, key)</h3><ul>
<li>直接返回 false 能阻止删除操作。返回 true 未必删除了，只有通过 Reflect.deleteProperty 才可能删除成功</li>
</ul>
<h3 id="getPrototypeOf-trapTarget"><a href="#getPrototypeOf-trapTarget" class="headerlink" title="getPrototypeOf(trapTarget)"></a>getPrototypeOf(trapTarget)</h3><ul>
<li>如果传入的参数不是对象，则 Reflect.getPrototypeOf() 方法会抛出错误，而 Object.getPrototypeOf() 方法则会在操作执行前先将参数强制转换为一个对象</li>
</ul>
<h3 id="setPrototypeOf-trapTarget-proto"><a href="#setPrototypeOf-trapTarget-proto" class="headerlink" title="setPrototypeOf(trapTarget, proto)"></a>setPrototypeOf(trapTarget, proto)</h3><ul>
<li>Reflect.setPrototypeOf() 方法返回一个<strong>布尔值</strong>来表示操作是否成功，成功时会返回 true，失败时返回 false。而 Object.setPrototypeOf() 方法一旦失败就会抛出一个错误</li>
<li>Object.setPrototypeOf() 方法返回第一个参数作为它的返回值</li>
</ul>
<h3 id="isExtensible-target-amp-preventExtensions-target"><a href="#isExtensible-target-amp-preventExtensions-target" class="headerlink" title="isExtensible(target) &amp; preventExtensions(target)"></a>isExtensible(target) &amp; preventExtensions(target)</h3><ul>
<li>传入非对象值时，Object.isExtensible() 返回 false，而 Reflect.isExtensible() 则抛出一个错误</li>
<li>Object.preventExtensions() 的结果返回的是 其参数，Reflect.preventExtensions() 的参数如果不是对象会抛出错误，如果是一个对象，操作成功时 返回 true，失败时返回 false</li>
</ul>
<h3 id="defineProperty-trapTarget-key-descriptor-amp-getOwnPropertyDescriptor-trapTarget-key"><a href="#defineProperty-trapTarget-key-descriptor-amp-getOwnPropertyDescriptor-trapTarget-key" class="headerlink" title="defineProperty(trapTarget, key, descriptor) &amp; getOwnPropertyDescriptor(trapTarget, key)"></a>defineProperty(trapTarget, key, descriptor) &amp; getOwnPropertyDescriptor(trapTarget, key)</h3><ul>
<li>defineProperty 陷阱在操作成功后返回 true，否则返回 false</li>
<li>Object.defineProperty() 返回 false 时会抛出错误。可以让陷阱返回 true 并且不调用 Reflect.defineProperty() 方法，可以让 Object.defineProperty() 方法静默失败</li>
<li>getOwnPropertyDescriptor 的返回值必须是 null，undefined 或一个对象。如果返回对象，则对象自己的属性只能是 enumerable, configurable, value, writable, get 和 set，否则报错</li>
<li>Object.defineProperty() 方法 和 Reflect.defineProperty() 方法只有返回值不同：Object.defineProperty() 方法返回第一个参数， Reflect.defineProperty() 与操作有关，成功返回 true，失败返回 false</li>
<li>Object.getOwnPropertyDescriptor() 传入原始值作为第一个参数，内部会将其强制转换为一个对象。Reflect.getOwnPropertyDescriptor() 传入原始值会报错</li>
</ul>
<h3 id="ownKeys-trapTarget"><a href="#ownKeys-trapTarget" class="headerlink" title="ownKeys(trapTarget)"></a>ownKeys(trapTarget)</h3><p>通过返回一个数组的值可以覆写其行为。这个数组被用于 Object.keys()、Object.getOwnPropertyNames()、Object.getOwnPropertySymbols() 和 Object.assign()。Object.assign() 方法用数组来确定需要复制的属性</p>
<ul>
<li>Object.getOwnPropertyNames() 和 Object.keys() 方法返回的结果将 Symbol 类型的属性名排除在外</li>
<li>Object.getOwnPropertySymbols() 方法返回的结果将字符串类型的属性名排除</li>
<li>Object.assign() 方法支持字符串 和 Symbol 两种类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    ownKeys(trapTarget) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(trapTarget).filter(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> key !== <span class="string">'string'</span> || key[<span class="number">0</span>] !== <span class="string">'_'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nameSymbol = <span class="built_in">Symbol</span>(<span class="string">'name'</span>)</span><br><span class="line">proxy.name = <span class="string">'proxy'</span></span><br><span class="line">proxy._name = <span class="string">'private'</span></span><br><span class="line">proxy[nameSymbol] = <span class="string">'symbol'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = <span class="built_in">Object</span>.getOwnPropertyNames(proxy)</span><br><span class="line"><span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(proxy)</span><br><span class="line"><span class="keyword">let</span> symbols = <span class="built_in">Object</span>.getOwnPropertySymbols(proxy)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(names) <span class="comment">// [ 'name' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(keys) <span class="comment">// [ 'name' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(symbols) <span class="comment">// [ Symbol(name) ]</span></span><br></pre></td></tr></table></figure>



<h3 id="apply-amp-construct-陷阱"><a href="#apply-amp-construct-陷阱" class="headerlink" title="apply &amp; construct 陷阱"></a>apply &amp; construct 陷阱</h3><p>使用 <strong>new</strong> 操作符调用函数，则执行 [[Construct]] 方法；若不用，则执行 [[Call]] 方法此时会执行 apply 陷阱</p>
<ul>
<li>Reflect.apply(trapTarget, thisArg, argumentsList)</li>
<li>Reflect.construct(trapTarget, argumentsList)</li>
</ul>
<h3 id="可撤销代理"><a href="#可撤销代理" class="headerlink" title="可撤销代理"></a>可撤销代理</h3><p>可以使用 Proxy.revocable() 方法创建可撤销的代理，该方法与 Proxy 构造函数相同的参数：目标对象和代理处理程序。返回值是具有以下属性的对象：</p>
<ul>
<li>proxy 可撤销的代理对象</li>
<li>revoke 撤销代理要调用的函数</li>
</ul>
<p>当调用 revoke() 函数时，不能通过 proxy 执行进一步的操作。任何与代理对象交互的尝试都会触发代理陷阱抛出错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    name: <span class="string">'target'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;proxy, revoke&#125; = <span class="built_in">Proxy</span>.revocable(target, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.name) <span class="comment">// target</span></span><br><span class="line"></span><br><span class="line">revoke()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.name) <span class="comment">// TypeError: Cannot perform 'get' on a proxy that has been revoked</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考书籍：《UNDERESTANDING ECMASCRIPT 6》</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>es6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es6</tag>
        <tag>proxy</tag>
        <tag>reflection</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-TypedArray</title>
    <url>/blog/2018/07/28/es6-typed-array/</url>
    <content><![CDATA[<h2 id="定型数组"><a href="#定型数组" class="headerlink" title="定型数组"></a>定型数组</h2><p>用于处理<strong>数值类型</strong>数据的专用数组</p>
<a id="more"></a>

<h3 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h3><p>JS 一个数字用 64 位存储</p>
<p>int8, uint8, int16, uint16, int32, uint32, float32, float64</p>
<h3 id="数组缓冲区-ArrayBuffer"><a href="#数组缓冲区-ArrayBuffer" class="headerlink" title="数组缓冲区 ArrayBuffer"></a>数组缓冲区 ArrayBuffer</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buffer.byteLength); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buffer2 = buffer.slice(<span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buffer2.byteLength); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="通过视图-DataView-操作数组缓冲区"><a href="#通过视图-DataView-操作数组缓冲区" class="headerlink" title="通过视图 DataView 操作数组缓冲区"></a>通过视图 DataView 操作数组缓冲区</h3><p>DataView 类型是一种通用的数组缓冲区视图。</p>
<p>创建 size 大小的数组缓冲区：<code>new ArrayBuffer(size)</code></p>
<h4 id="获取视图信息"><a href="#获取视图信息" class="headerlink" title="获取视图信息"></a>获取视图信息</h4><ul>
<li>buffer：视图绑定的数组缓冲区</li>
<li>byteOffset：DataView 构造函数的第 2 个参数，默认是 0，只有传入参数时才有值</li>
<li>byteLength：第 3 个参数，默认是缓冲区的长度 byteLength</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> view1 = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line"><span class="keyword">let</span> view2 = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer, <span class="number">5</span>, <span class="number">2</span>); <span class="comment">// 包含位于索引 5 和 6 的字节</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(view1.buffer === buffer); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(view2.buffer === buffer); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(view1.byteOffset); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(view2.byteOffset); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(view1.byteLength); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(view2.byteLength); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="读取和写入数据"><a href="#读取和写入数据" class="headerlink" title="读取和写入数据"></a>读取和写入数据</h4><p><code>getInt(byteOffset, littleEndian)</code>：读取位于 byteOffset 后的 int8 类型数据</p>
<p><code>setInt(byteOffset, value, littleEndian)</code>：在 byteOffset 处写入 int8 类型数据</p>
<p>对于其他类型同理。 littleEndian 布尔值，表示是否按照小端序进行读取（小端序是指<strong>最低有效字节位于字节 0</strong> 的字节顺序，详细参考下一小节）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line">view.setInt8(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">view.setInt8(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt16(<span class="number">0</span>)); <span class="comment">// 1535，即 101 1111 1111</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt8(<span class="number">0</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt8(<span class="number">1</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h4 id="大小端（Endianness）"><a href="#大小端（Endianness）" class="headerlink" title="大小端（Endianness）"></a>大小端（Endianness）</h4><p>arr 的映射是按照运行 JavaScript 的平台的大小端设置（大端或小端）进行的。如果二进制数据的构造是基于某个大小端配置，而解释平台的大小端配置正相反，就会出现问题</p>
<p>大小端的意思是多字节数字（比如前面代码片段中创建的 16 位无符号整型）中的低字节（8 位）位于这个数字字节表示中的右侧还是左侧。</p>
<p>举个例子，设想一个十进制数字 3085，我们需要用 16 位来表示它。如果只是用一个 16 位数字容器，不管大小端配置如何，它会被表示为二进制 00001100 00001101（十六进制 0c0d）</p>
<p>但是如果用两个 8 位数组表示数字 3085，那么大小端设置就会明显影响它在内存中的存储表示：</p>
<ul>
<li>低地址    高地址</li>
<li>00001100 00001101 / 0c0d（大端）</li>
<li>00001101 00001100 / 0d0c (小端）</li>
</ul>
<p>如果接收到一个来自于小端系统的表示 3085 的位序列 00001101 00001100，而在大端系统中为其建立视图，得到的值将是 3340（十进制）或者 0d0c（十六进制）。</p>
<p>目前 Web 上最常用的是小端表示方式，但是肯定存在不采用这种方式的浏览器。根据 MDN，这里有一个快速检测 JavaScript 大小端的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> littleEndian = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer).setInt16(<span class="number">0</span>, <span class="number">256</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Int16Array</span>(buffer)[<span class="number">0</span>] === <span class="number">256</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不要把数组 buffer 的底层二进制存储的大小端和给定数字在 JavaScript 程序中如何表示搞混。比如， <code>(3085).toString(2)</code> 返回 “110000001101”，加上前面 4 个隐去的 “0” 看起来似乎是大端表示。实际上，这个表示法是基于 16 位视图，而不是两个 8 位字节的表示。要确定 JavaScript 环境的大小端，最好的方法就是前面的 DataView 测试。</p>
</blockquote>
<h4 id="定型数组是视图"><a href="#定型数组是视图" class="headerlink" title="定型数组是视图"></a>定型数组是视图</h4><p>ES6 定型数组实际上是用于数组缓冲区的<strong>特定类型</strong>的视图。通过每个实例的 <code>BYTES_PER_ELEMENT</code> 属性可以查看每个元素的字节数</p>
<table>
<thead>
<tr>
<th>构造函数名称</th>
<th>元素尺寸（字节）</th>
</tr>
</thead>
<tbody><tr>
<td>Int8Array</td>
<td>1</td>
</tr>
<tr>
<td>Uint8Array</td>
<td>1</td>
</tr>
<tr>
<td>Unit8ClampedArray</td>
<td>1</td>
</tr>
<tr>
<td>Int16Array</td>
<td>2</td>
</tr>
<tr>
<td>Uint16Array</td>
<td>2</td>
</tr>
<tr>
<td>Int32Array</td>
<td>4</td>
</tr>
<tr>
<td>Uint32Array</td>
<td>4</td>
</tr>
<tr>
<td>Float32Array</td>
<td>4</td>
</tr>
<tr>
<td>Float64Array</td>
<td>8</td>
</tr>
</tbody></table>
<blockquote>
<p>Unit8ClampedArray 与 Uint8Array 大致相同，唯一的区别在于数组缓冲区的值如果小于 0 或大于 255，Unit8ClampedArray 分别将其转换为 0 或 255</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Uint8Array</span>.BYTES_PER_ELEMENT); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h4 id="创建特定类型的视图"><a href="#创建特定类型的视图" class="headerlink" title="创建特定类型的视图"></a>创建特定类型的视图</h4><ul>
<li><strong>方法 1</strong>，传入 DataView 构造函数可接受的参数来创建新的定型数组，可接受的参数：数组缓冲区，可选的比特偏移量、可选的长度值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view1 = <span class="keyword">new</span> <span class="built_in">Int8Array</span>(buffer);</span><br><span class="line"><span class="keyword">let</span> view2 = <span class="keyword">new</span> <span class="built_in">Int8Array</span>(buffer, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(view1.buffer === buffer); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(view2.buffer === buffer); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(view1.byteOffset); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(view2.byteOffset); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(view1.byteLength); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(view2.byteLength); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法 2</strong>，调用构造函数时传入一个数字，表示分配给数组的元素数量，构造函数将创建一个新的缓冲区，并按照数组元素的数量来分配合理的字节数量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> floats = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ints.byteLength); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(ints.length); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(floats.byteLength); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(floats.length); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果不传参数，会按照传入 0 来处理</p>
</blockquote>
<ul>
<li><strong>方法 3</strong>，将以下任一对象作为唯一的参数传入：<ul>
<li>一个定型数组，数组中的每个元素会作为新的元素被复制到新的定型数组中</li>
<li>一个可迭代对象</li>
<li>一个数组</li>
<li>一个类数组对象</li>
</ul>
</li>
</ul>
<h3 id="定型数组与普通数组区别"><a href="#定型数组与普通数组区别" class="headerlink" title="定型数组与普通数组区别"></a>定型数组与普通数组区别</h3><ul>
<li><strong>定型数组</strong>的 <strong>length</strong> 属性是一个不可写属性，不能修改，严格模式下会报错</li>
<li>通过 <code>Array.isArray()</code> 检查<strong>定型数组</strong>返回的是 <strong>false</strong></li>
<li>给 <strong>定型数组</strong>中<strong>不存在的数组索引</strong> 赋值会被忽略</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">25</span>, <span class="number">50</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ints.length); <span class="comment">// 2</span></span><br><span class="line">ints[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ints.length); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(ints[<span class="number">2</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>定型数组会检查数据类型的<strong>合法性</strong>，<strong>0 被用于代替所有非法值</strong>。所有<strong>修改定型数组值的方法执行时都会受到相同的限制</strong>，e.g. 给 <code>map()</code> 方法传入的函数返回非法值，最终会用 0 来代替</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="string">'hi'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(ints.length); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(ints[<span class="number">0</span>]); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>相对数组，<strong>定型数组缺失的方法</strong>：<code>concat()</code>, <code>shift()</code>, <code>pop()</code>, <code>splice()</code>, <code>push()</code>, <code>unshift()</code></li>
<li>相对数组，<strong>定型数组附加的方法</strong>：<code>set()</code> 和 <code>subarray()</code><ul>
<li><code>set()</code>：将其他数组复制到已有的定型数组。接收两个参数：一个是数组，一个是可选的偏移量，表示开始插入数据的位置，默认 0</li>
<li><code>subarray()</code>：提取已有定型数组的一部分作为一个新的定型数组。接收两个参数：可选的开始位置，可选的结束位置（不包含当前位置的数据）</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">ints.set([<span class="number">25</span>, <span class="number">50</span>]);</span><br><span class="line">ints.set([<span class="number">75</span>, <span class="number">100</span>], <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ints.toString()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subints1 = ints.subarray();</span><br><span class="line"><span class="keyword">let</span> subints2 = ints.subarray(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> subints3 = ints.subarray(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(subints1.toString()); <span class="comment">// 25,50,75,100</span></span><br><span class="line"><span class="built_in">console</span>.log(subints2.toString()); <span class="comment">// 75,100</span></span><br><span class="line"><span class="built_in">console</span>.log(subints3.toString()); <span class="comment">// 50,75</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考书籍：《UNDERESTANDING ECMASCRIPT 6》&amp;《You Don’t Know JS》</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>es6</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>es6</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>前端文件上传</title>
    <url>/blog/2017/11/29/frontend-upload-file/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>简要介绍前端文件上传方式及上传接口</p>
<a id="more"></a>

<h2 id="文件上传方式一：form表单提交"><a href="#文件上传方式一：form表单提交" class="headerlink" title="文件上传方式一：form表单提交"></a>文件上传方式一：form表单提交</h2><ul>
<li>将<code>method</code>属性设置为<code>POST</code>，因为文件内容不能放入URL参数中。</li>
<li>将<code>enctype</code>的值设置为<code>multipart/form-data</code>，因为数据将被分成多个部分，每个文件分别对应一个文件以及表单正文中包含的文本数据(如果文本也输入到表单中)。</li>
<li>包含一个或多个File picker小部件，允许用户选择将要上传的文件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/testMultiple"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myfiles"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>input 中的<code>multiple</code>表示可以同时上传多个文件，去掉则每次只能上传一个。</p>
<p>点击提交后页面发生跳转。可通过如下设置：设置form的target属性为页面某个隐藏iframe的name。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交form表单不发生跳转 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">"dummyframe"</span> <span class="attr">id</span>=<span class="string">"myDummyframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"submitscript.php"</span> <span class="attr">target</span>=<span class="string">"dummyframe"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- form body here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取后台返回的消息，IE测试不行。。。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myDummyframe = <span class="built_in">document</span>.getElementById(<span class="string">'myDummyframe'</span>);</span></span><br><span class="line"><span class="actionscript">    myDummyframe.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(myDummyframe.contentDocument.documentElement.innerText);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接1：<a href="https://stackoverflow.com/questions/25983603/how-to-submit-html-form-without-redirection" target="_blank" rel="noopener">javascript - How to submit html form without redirection? - Stack Overflow</a></p>
<p>参考链接2：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data" target="_blank" rel="noopener">Using files from web applications - Web API 接口 | MDN</a></p>
</blockquote>
<h2 id="文件上传方法二：ajax提交FormData"><a href="#文件上传方法二：ajax提交FormData" class="headerlink" title="文件上传方法二：ajax提交FormData"></a>文件上传方法二：ajax提交FormData</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用了jQuery</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;FormData&#125;</span> </span>myFormData formData格式，用于存放文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Function&#125;</span> </span>cb 回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="variable">none</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMultiple</span>(<span class="params">myFormData, cb</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/testMultipleFileInput'</span>,</span><br><span class="line">        type: <span class="string">'POST'</span>,</span><br><span class="line">        data: myFormData,</span><br><span class="line">        cache: <span class="literal">false</span>,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        processData: <span class="literal">false</span>, <span class="comment">// 因为data值是FormData对象，不需要对数据做处理</span></span><br><span class="line">        contentType: <span class="literal">false</span>, </span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res, textStatus, jqXHR</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">typeof</span> cb == <span class="string">'function'</span> &amp;&amp; cb(res);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, textStatus, errThrow</span>) </span>&#123;</span><br><span class="line">			<span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法，此处是一旦选择了文件就上传，可根据需要修改</span></span><br><span class="line"><span class="comment">// $fileInput是type为'file'的input引用</span></span><br><span class="line"><span class="keyword">var</span> $filesInput = $(<span class="string">'.filesInput'</span>);</span><br><span class="line">$filesInput.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myFormData = <span class="keyword">new</span> FormData();</span><br><span class="line">    <span class="keyword">var</span> fileList = <span class="keyword">this</span>.files,</span><br><span class="line">        myfile;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = fileList.length; i &lt; len; i++) &#123;</span><br><span class="line">        myfile = fileList[i];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件名: '</span> + myfile.name + <span class="string">' 大小:'</span> + (myfile.size / <span class="number">1024</span>).toFixed(<span class="number">0</span>) + <span class="string">'KB 类型: '</span> + myfile.type );</span><br><span class="line">        myFormData.append(<span class="string">'myfiles'</span>, myfile); <span class="comment">// 将文件都append进formData中</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">  	<span class="comment">// 上传</span></span><br><span class="line">	sendMultiple(myFormData, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">   		<span class="built_in">console</span>.log(<span class="string">'返回结果'</span>, res);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接：<a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" target="_blank" rel="noopener">FormData - Web APIs | MDN</a></p>
</blockquote>
<h2 id="使用自定义接口打开文件选择器"><a href="#使用自定义接口打开文件选择器" class="headerlink" title="使用自定义接口打开文件选择器"></a>使用自定义接口打开文件选择器</h2><p>原因：file input元素有点丑</p>
<h3 id="方法一-通过click-方法隐藏file-input元素"><a href="#方法一-通过click-方法隐藏file-input元素" class="headerlink" title="方法一 通过click()方法隐藏file input元素"></a>方法一 通过click()方法隐藏file input元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"fileElem"</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"fileSelect"</span>&gt;</span>Select some files<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> fileSelect = <span class="built_in">document</span>.getElementById(<span class="string">"fileSelect"</span>),</span></span><br><span class="line"><span class="javascript">    fileElem = <span class="built_in">document</span>.getElementById(<span class="string">"fileElem"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">fileSelect.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">    if (fileElem) &#123;</span><br><span class="line">        fileElem.click();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    e.preventDefault(); <span class="comment">// prevent navigation to "#"</span></span></span><br><span class="line"><span class="actionscript">&#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="方法二-使用label元素来触发一个隐藏的input元素对应的事件"><a href="#方法二-使用label元素来触发一个隐藏的input元素对应的事件" class="headerlink" title="方法二 使用label元素来触发一个隐藏的input元素对应的事件"></a>方法二 使用label元素来触发一个隐藏的input元素对应的事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"fileElem"</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">onchange</span>=<span class="string">"handleFiles(this.files)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"fileElem"</span>&gt;</span>Select some files<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="方法三-使用drag和drap来选择文件"><a href="#方法三-使用drag和drap来选择文件" class="headerlink" title="方法三 使用drag和drap来选择文件"></a>方法三 使用drag和drap来选择文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dropbox"</span>&gt;</span>拖拽文件到此处<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> dropbox;</span></span><br><span class="line"><span class="javascript">dropbox = <span class="built_in">document</span>.getElementById(<span class="string">"dropbox"</span>);</span></span><br><span class="line"><span class="actionscript">dropbox.addEventListener(<span class="string">"dragenter"</span>, dragenter, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">dropbox.addEventListener(<span class="string">"dragover"</span>, dragover, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">dropbox.addEventListener(<span class="string">"drop"</span>, drop, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 我们其实并不需要对dragenter and dragover 事件进行处理，所以这些函数都可以很简单。他们只需要包括禁止事件传播和阻止默认事件</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">dragenter</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">    e.stopPropagation();</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">dragover</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">    e.stopPropagation();</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">drop</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">    e.stopPropagation();</span><br><span class="line">    e.preventDefault();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> dt = e.dataTransfer;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> files = dt.files;</span></span><br><span class="line"></span><br><span class="line">    handleFiles(files);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="预览用户选择的图片"><a href="#预览用户选择的图片" class="headerlink" title="预览用户选择的图片"></a>预览用户选择的图片</h2><h3 id="方法一-使用FileReader"><a href="#方法一-使用FileReader" class="headerlink" title="方法一 使用FileReader"></a>方法一 使用FileReader</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFiles</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = files[i];</span><br><span class="line">    <span class="keyword">var</span> imageType = <span class="regexp">/^image\//</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!imageType.test(file.type)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">    img.classList.add(<span class="string">"obj"</span>);</span><br><span class="line">    img.file = file;</span><br><span class="line">    preview.appendChild(img); <span class="comment">// 此处的preview是用于放图片的容器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.onload = (<span class="function"><span class="keyword">function</span>(<span class="params">aImg</span>) </span>&#123; <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; aImg.src = e.target.result; &#125;; &#125;)(img);</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了在DOM树中更容易地找到他们，每个图片元素都被添加了一个名为obj的class</p>
<p>给每个图片添加了file属性使它具有File，这样做可以让我们拿到稍后需要实际上传的图片</p>
</blockquote>
<h3 id="方法二-使用-object-URLs"><a href="#方法二-使用-object-URLs" class="headerlink" title="方法二 使用 object URLs"></a>方法二 使用 object URLs</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFiles</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!files.length) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">            img.src = <span class="built_in">window</span>.URL.createObjectURL(files[i]); <span class="comment">// 创建</span></span><br><span class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">window</span>.URL.revokeObjectURL(<span class="keyword">this</span>.src); <span class="comment">// 释放</span></span><br><span class="line">            &#125;;</span><br><span class="line">            preview.appendChild(img); <span class="comment">// 此处的preview是用于放图片的容器</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用<code>window.URL.createObjectURL()</code>创建 blob URL</p>
<p>当图片load完后，obj URL不再需要，使用<code>window.URL.revokeObjectURL()</code> 方法释放掉</p>
</blockquote>
<blockquote>
<p>参考链接：<a href="https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications</a></p>
</blockquote>
]]></content>
      <categories>
        <category>综合知识点</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
        <tag>图片上传预览</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Hooks 阻止合并特定分支</title>
    <url>/blog/2021/08/01/git-hooks-prevent-merge-branch/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>项目开发时，有开发分支，测试分支，主干分支等。一般不能把<strong>测试分支</strong>合并到其他分支里，然而可能一不小心（手抖）合并了，甚至在不知情的情况下还加了新的东西，后面上线时才发现（或者没发现，直接把测试分支的代码带到了线上），后果可大可小，回滚时也麻烦。</p>
<p>那能不能在合并阶段直接禁止合并非法分支呢？答案是可以的。只要解决了下面问题即可。</p>
<a id="more"></a>

<ul>
<li>是否在合并中？</li>
<li>当前分支名叫啥？</li>
<li>要合并进来的分支名又叫啥？</li>
<li>当前分支 和 要合并进来的分支 2 者是否满足条件【这里是 要合并进来的分支 不能是 测试分支】</li>
</ul>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h3><p><a href="https://git-scm.com/docs/githooks" target="_blank" rel="noopener">git hooks</a>，简单来说就是在执行 git 命令的过程中会触发的钩子函数（脚本程序）。只要知道特定 git 命令会触发什么 hooks，就可以做对应处理，比如可以用来检查提交信息是否符合规范（如 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noopener">commitlint</a>，以及本文即将要了解的阻止合并特定分支。</p>
<h3 id="git-合并"><a href="#git-合并" class="headerlink" title="git 合并"></a>git 合并</h3><p>命令: <code>git merge &lt;branch&gt;</code></p>
<p>合并可能有 3 种情况</p>
<ul>
<li><strong>fast-forward merge</strong>: 合并时，当前分支和要合并进来的分支，分支历史没有分叉【简单理解就是 要合并的分支是基于当前分支前进的，且当前分支从要合并的分支新建后 再也没发生过变更】。可以通过 <code>git merge --no-ff &lt;branch&gt;</code>变为第 2 种合并情况</li>
</ul>
<p><img src="https://wac-cdn.atlassian.com/dam/jcr:d90f2536-7951-4e5e-ab79-f45a502fb4c8/03-04%20Fast%20forward%20merge.svg?cdnVersion=1735" alt="fast-forward merge | atlassian"></p>
<ul>
<li><strong>no fast-forward merge</strong>: 新增 1 个历史节点，其直接父节点指向为要合并的 2 个分支</li>
</ul>
<p><img src="https://wac-cdn.atlassian.com/dam/jcr:91aece4a-8fa0-4fc3-bae9-69d51932f104/05-06%20Fast%20forward%20merge.svg?cdnVersion=1735" alt="no fast-forward merge | atlassian"></p>
<ul>
<li><strong>merge conflict</strong>: 合并冲突了，此时需要解决冲突，然后重新 add &amp; commit</li>
</ul>
<blockquote>
<p>图片来自：<a href="https://www.atlassian.com/git/tutorials/using-branches/git-merge" target="_blank" rel="noopener">https://www.atlassian.com/git/tutorials/using-branches/git-merge</a></p>
</blockquote>
<blockquote>
<p><strong>前置说明</strong><br>这里的项目是前端项目，使用 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> 管理 git hooks</p>
</blockquote>
<h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><h3 id="是否在合并中"><a href="#是否在合并中" class="headerlink" title="是否在合并中"></a>是否在合并中</h3><p>通过查阅 <a href="https://git-scm.com/docs/githooks" target="_blank" rel="noopener">git hooks</a> 可知，merge 阶段<strong>可能</strong>会触发以下钩子【之所以说可能是因为 merge 有多种情况，每种情况触发的钩子不太一致】：</p>
<ul>
<li><code>pre-merge-commit</code></li>
<li><code>prepare-commit-msg</code></li>
<li><code>commit-msg</code></li>
<li><code>post-merge</code></li>
</ul>
<table>
<thead>
<tr>
<th>合并情况\触发钩子</th>
<th><code>pre-merge-commit</code></th>
<th><code>prepare-commit-msg</code></th>
<th><code>commit-msg</code></th>
<th><code>post-merge</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>fast-forward merge</code></td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td><code>no fast-forward merge</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><code>merge conflict</code> 解决完冲突后 add &amp; commit</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
</tbody></table>
<blockquote>
<p><code>merge conflict</code> 会有中间态 <code>(当前分支 | MERGING)</code>，从初始态到中间态，不会触发 merge 相关的钩子。当解决完冲突后，开始 add&amp;commit 时，会触发对应钩子</p>
</blockquote>
<p>根据合并情况，使用到的钩子如下：</p>
<ul>
<li><code>fast-forward merge</code> 和 <code>no fast-forward merge</code>: 使用 <code>post-merge</code> 钩子</li>
<li><code>merge conflict</code>: 使用 <code>prepare-commit-msg</code> 或 <code>commit-msg</code>【因 commit-msg 钩子无法获取到合并进来的分支名，故只能使用 <code>prepare-commit-msg</code>】</li>
</ul>
<h3 id="获取当前分支名"><a href="#获取当前分支名" class="headerlink" title="获取当前分支名"></a>获取当前分支名</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rev-parse --abbrev-ref HEAD</span><br></pre></td></tr></table></figure>

<blockquote>
<p>REF: <a href="https://stackoverflow.com/questions/6245570/how-to-get-the-current-branch-name-in-git" target="_blank" rel="noopener">https://stackoverflow.com/questions/6245570/how-to-get-the-current-branch-name-in-git</a></p>
</blockquote>
<h3 id="获取合并进来的分支名"><a href="#获取合并进来的分支名" class="headerlink" title="获取合并进来的分支名"></a>获取合并进来的分支名</h3><h4 id="post-merge"><a href="#post-merge" class="headerlink" title="post-merge"></a>post-merge</h4><p>在此钩子处理 <code>no fast-forward merge</code> 和 <code>fast-forward merge</code> 情况。</p>
<p><code>post-merge</code> 钩子触发时，分支已经合并了，并且 reflog 也更新了，所以可以通过 <code>git reflog</code> 获取到合并进来的分支信息</p>
<p>前 2 种合并情况，<code>git reflog -1</code> 返回的日志格式如下</p>
<ul>
<li><code>no fast-forward merge</code>: <code>e7cb874 HEAD@{0}: merge feat/no-fast-forward: Merge made by the &#39;recursive&#39; strategy.</code></li>
<li><code>fast-forward merge</code>: <code>724446f HEAD@{0}: merge feat/fast-forward: Fast-forward</code></li>
</ul>
<p>可以通过正则匹配提取对应的分支名，代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execSync &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMergeBranch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从 reflog 提取合并进来的分支名</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getBranchNameFromReflog</span>(<span class="params">reflogMessage</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/@\&#123;\d+\&#125;: merge (.*):/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.exec(reflogMessage)[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reflogMessage = execSync(<span class="string">'git reflog -1'</span>, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> mergedBranchName = getBranchNameFromReflog(reflogMessage);</span><br><span class="line">  <span class="keyword">return</span> mergedBranchName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="prepare-commit-msg"><a href="#prepare-commit-msg" class="headerlink" title="prepare-commit-msg"></a>prepare-commit-msg</h4><p>在此钩子处理合并冲突的情况。</p>
<p>因冲突未解决，reflog 也不会更新，因此无法通过 reflog 获取到合并进来的分支。</p>
<p>不过在合并冲突阶段，<code>.git/MERGE_HEAD</code> 中会保留合并进来分支的 hash。<br>在 <code>prepare-commit-msg</code> 触发时，可以通过读取该文件获取对应的内容，再通过 <code>git name-rev [hash]</code> 命令获取对应的分支名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execSync &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 .git/MERGE_HEAD (sha) 提取合并进来的分支名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMergeBranch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mergeHeadPath = path.resolve(process.cwd(), <span class="string">'.git/MERGE_HEAD'</span>);</span><br><span class="line">    <span class="keyword">const</span> mergeHeadSha = fs.readFileSync(mergeHeadPath, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> mergeBranchInfo = execSync(<span class="string">`git name-rev <span class="subst">$&#123;mergeHeadSha&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/ (.*?)\n/</span>.exec(mergeBranchInfo)[<span class="number">1</span>];</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并分支是否符合要求"><a href="#合并分支是否符合要求" class="headerlink" title="合并分支是否符合要求"></a>合并分支是否符合要求</h3><p>这个根据各自场景处理就行了。比如在合并错误分支后，进行提示，让操作者自行决定是否回滚等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showConfirm</span>(<span class="params">currentBranch, mergeBranch</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`检测到非法合并: <span class="subst">$&#123;mergeBranch&#125;</span> ==into==&gt; <span class="subst">$&#123;currentBranch&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  rl.question(<span class="string">`确定要合并 <span class="subst">$&#123;mergeBranch&#125;</span> 分支吗？(y/n) `</span>, (answer) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (answer === <span class="string">'y'</span>) &#123;</span><br><span class="line">      rl.close();</span><br><span class="line">      process.exit(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'撤销合并中...'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`exec: git reset --merge HEAD@&#123;1&#125;`</span>);</span><br><span class="line">      execSync(<span class="string">'git reset --merge HEAD@&#123;1&#125;'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'已撤销合并 done'</span>);</span><br><span class="line">      rl.close();</span><br><span class="line">      process.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>细心的同学可能已经发现了，在第一个问题【是否在合并中】，最终采用了 <code>post-merge</code> 和 <code>prepare-commit-msg</code> 2 个钩子，但这 2 个钩子在<code>no fast-forward merge</code>的情况下都会触发到。此时需要进行识别，当且仅当在 <code>merge conflict</code> 才去执行 <code>prepare-commit-msg</code> 钩子中的逻辑。</p>
<p>思路是检测 <code>.git/MERGE_MSG</code> 文件是否存在，以及其中的内容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execSync &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMergingConflict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 是否合并中</span></span><br><span class="line">  <span class="keyword">const</span> mergeMsgPath = path.resolve(process.cwd(), <span class="string">'.git/MERGE_MSG'</span>);</span><br><span class="line">  <span class="keyword">const</span> isMerging = fs.existsSync(mergeMsgPath);</span><br><span class="line">  <span class="keyword">if</span> (!isMerging) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mergeMsg = fs.readFileSync(mergeMsgPath, &#123; <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/\n# Conflicts:\n/</span>.test(mergeMsg);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/sluggishpj/assets/main/images/git-hooks-prevent-merge-summary.svg" alt="git-hooks-prevent-merge-summary"></p>
]]></content>
      <categories>
        <category>tools</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>JS深浅复制</title>
    <url>/blog/2018/03/12/js-clone-functions/</url>
    <content><![CDATA[<h2 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h2><ul>
<li>含义：复制后的对象和原来的对象一模一样但没有联系了，对复制后的对象的操作不影响原对象</li>
</ul>
<a id="more"></a>


<h3 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h3><ul>
<li>深复制数组或对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> v !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Array</span>.isArray(v) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> v) &#123;</span><br><span class="line">        <span class="comment">// 加入hasOwnProperty则不深复制原型链中的方法</span></span><br><span class="line">        <span class="keyword">if</span> (v.hasOwnProperty(key)) &#123;</span><br><span class="line">            obj[key] = clone(v[key])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    hobits: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cp = clone(obj);</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; hobits: [ 'a', 'b', 'c' ] &#125;</span></span><br><span class="line"></span><br><span class="line">cp.hobits.push(<span class="string">'d'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; hobits: [ 'a', 'b', 'c', 'd' ] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; hobits: [ 'a', 'b', 'c' ] &#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="JQuery-extend"><a href="#JQuery-extend" class="headerlink" title="JQuery.extend()"></a>JQuery.extend()</h3><ul>
<li>深复制对象：jQuery.extend([deep], target, object1, [objectN])</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    hobits: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cp = &#123;&#125;;</span><br><span class="line">$.extend(<span class="literal">true</span>, cp, obj);</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; hobits: [ 'a', 'b', 'c' ] &#125;</span></span><br><span class="line"></span><br><span class="line">cp.hobits.push(<span class="string">'d'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; hobits: [ 'a', 'b', 'c', 'd' ] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; hobits: [ 'a', 'b', 'c' ] &#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h3><p>对象深复制（<strong>不能复制方法</strong>）：JSON.parse(JSON.stringify(oldObj);</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    hobits: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cp = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; hobits: [ 'a', 'b', 'c' ] &#125;</span></span><br><span class="line"></span><br><span class="line">cp.hobits.push(<span class="string">'d'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; hobits: [ 'a', 'b', 'c', 'd' ] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; hobits: [ 'a', 'b', 'c' ] &#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h2><ul>
<li>含义：属性是object类型的，复制后的属性依然是原来对应属性的引用，其他普通属性则复制</li>
</ul>
<h3 id="数组浅复制"><a href="#数组浅复制" class="headerlink" title="数组浅复制"></a>数组浅复制</h3><p>slice方法，concat方法，ES6的数组解构方法，其实跟for循环一个一个复制一样，for循环这里不展开了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldArr = [[<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cp = oldArr.concat();</span><br><span class="line"><span class="comment">// 或：</span></span><br><span class="line"><span class="comment">// var cp = oldArr.slice();</span></span><br><span class="line"><span class="comment">// 或：</span></span><br><span class="line"><span class="comment">// var cp = [...oldArr];</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// [ [ 'a', 'b' ], 'c' ]</span></span><br><span class="line"></span><br><span class="line">cp[<span class="number">0</span>].push(<span class="string">'d'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// [ [ 'a', 'b', 'd' ], 'c' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(oldArr); <span class="comment">// [ [ 'a', 'b', 'd' ], 'c' ]</span></span><br></pre></td></tr></table></figure>



<h3 id="对象浅复制"><a href="#对象浅复制" class="headerlink" title="对象浅复制"></a>对象浅复制</h3><ul>
<li>ES6对象解构</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'obj'</span>,</span><br><span class="line">    hobits: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cp = &#123;...obj&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; name: 'obj', hobits: [ 'a', 'b', 'c' ] &#125;</span></span><br><span class="line"></span><br><span class="line">cp.name = <span class="string">'cp'</span>;</span><br><span class="line">cp.hobits.push(<span class="string">'d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; name: 'cp', hobits: [ 'a', 'b', 'c', 'd' ] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: 'obj', hobits: [ 'a', 'b', 'c', 'd' ] &#125;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>Object.assign()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'obj'</span>,</span><br><span class="line">    hobits: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cp = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; name: 'obj', hobits: [ 'a', 'b', 'c' ] &#125;</span></span><br><span class="line"></span><br><span class="line">cp.name = <span class="string">'cp'</span>;</span><br><span class="line">cp.hobits.push(<span class="string">'d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; name: 'cp', hobits: [ 'a', 'b', 'c', 'd' ] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: 'obj', hobits: [ 'a', 'b', 'c', 'd' ] &#125;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>Object.getOwnPropertyDescriptors)</li>
</ul>
<p>该方法用来获取一个对象的所有自身属性的描述符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(</span><br><span class="line">        <span class="built_in">Object</span>.getPrototypeOf(o),</span><br><span class="line">        <span class="built_in">Object</span>.getOwnPropertyDescriptors(o)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'obj'</span>,</span><br><span class="line">    hobits: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cp = copy(obj);</span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; name: 'obj', hobits: [ 'a', 'b', 'c' ] &#125;</span></span><br><span class="line"></span><br><span class="line">cp.name = <span class="string">'cp'</span>;</span><br><span class="line">cp.hobits.push(<span class="string">'d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">// &#123; name: 'cp', hobits: [ 'a', 'b', 'c', 'd' ] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: 'obj', hobits: [ 'a', 'b', 'c', 'd' ] &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接：<a href="http://javascript.ruanyifeng.com/oop/object.html#toc3" target="_blank" rel="noopener">http://javascript.ruanyifeng.com/oop/object.html#toc3</a></p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>js技巧</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>复制</tag>
      </tags>
  </entry>
  <entry>
    <title>new start</title>
    <url>/blog/2017/10/13/new-start/</url>
    <content><![CDATA[<h1 id="常用功能及写法"><a href="#常用功能及写法" class="headerlink" title="常用功能及写法"></a>常用功能及写法</h1><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'HELLO WORLD'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="使用more进行截断，以上显示在主页上"><a href="#使用more进行截断，以上显示在主页上" class="headerlink" title="使用more进行截断，以上显示在主页上"></a>使用more进行截断，以上显示在主页上</h2><a id="more"></a> 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img yuki.jpg 大萌神%&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>或直接使用markdown格式的图片</p>
</blockquote>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://sluggishpj.github.io/">主页</a></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">[<span class="string">主页</span>](<span class="link">https://sluggishpj.github.io/</span>)</span><br></pre></td></tr></table></figure>

<h2 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h2><blockquote class="blockquote-center"><p>blah blah blah </p>
</blockquote>

<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><blockquote>
<p>everything will be better!</p>
</blockquote>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&gt;everything will be better!</span><br></pre></td></tr></table></figure>

<h2 id="彩色引用块"><a href="#彩色引用块" class="headerlink" title="彩色引用块"></a>彩色引用块</h2><div class="note default">
            <p>Content (md partial supported) </p>
          </div>

<div class="note primary">
            <p>Content (md partial supported) </p>
          </div>


<div class="note success">
            <p>Content (md partial supported) </p>
          </div>

<div class="note info">
            <p>Content (md partial supported) </p>
          </div>

<div class="note warning">
            <p>Content (md partial supported) </p>
          </div>

<div class="note danger">
            <p>Content (md partial supported) </p>
          </div>

<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note success %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note info %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在两个彩色引用块之间插入md标签无效。。。原因未知。。。</p>
</blockquote>
<h2 id="引用书籍文章"><a href="#引用书籍文章" class="headerlink" title="引用书籍文章"></a>引用书籍文章</h2><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>

<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用网络上的文章"><a href="#引用网络上的文章" class="headerlink" title="引用网络上的文章"></a>引用网络上的文章</h2><blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></cite></footer></blockquote>

<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<h2 id="生成静态文件并部署"><a href="#生成静态文件并部署" class="headerlink" title="生成静态文件并部署"></a>生成静态文件并部署</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>建个博客真不容易，希望能坚持写下去。。。</p>
</blockquote>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>第一篇</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript忍者秘籍笔记01之函数</title>
    <url>/blog/2017/10/13/secrets-of-the-js-ninja-1-functions/</url>
    <content><![CDATA[<h2 id="函数的独特之处"><a href="#函数的独特之处" class="headerlink" title="函数的独特之处"></a>函数的独特之处</h2><blockquote>
<p>浏览器的事件轮询是单线程的</p>
</blockquote>
<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><a id="more"></a>
<h3 id="函数name属性"><a href="#函数name属性" class="headerlink" title="函数name属性"></a>函数name属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNimble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isNimble.name === <span class="string">'isNimble'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canFly = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(canFly.name === <span class="string">'canFly'</span>); </span><br><span class="line"><span class="comment">// true ,此处跟原书内容不同，原书内容name为空，实际测试不为空</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.wieldsSword = <span class="function"><span class="keyword">function</span> <span class="title">swingsSword</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.wieldsSword.name === <span class="string">'swingsSword'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object2 = &#123;</span><br><span class="line">  someMethod1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">object2.someMethod2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object2.someMethod1.name); <span class="comment">// 'someMethod1'</span></span><br><span class="line"><span class="built_in">console</span>.log(object2.someMethod2.name); <span class="comment">// ''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你不能改变一个函数的 name 属性的值, 因为该属性是只读的</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="comment">// someMethod 属性指向一个匿名函数</span></span><br><span class="line">  someMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">object.someMethod.name = <span class="string">"otherMethod"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(object.someMethod.name); <span class="comment">// someMethod</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function.bind() 所创建的函数将会在函数的名称前加上"bound "</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(foo.bind(&#123;&#125;).name); <span class="comment">// "bound foo"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Function</span>).name); <span class="comment">// 'anonymous'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多请参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/name" target="_blank" rel="noopener">Function.name - JavaScript|MDN</a></p>
</blockquote>
<h3 id="函数声明提升"><a href="#函数声明提升" class="headerlink" title="函数声明提升"></a>函数声明提升</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> inner === <span class="string">'function'</span>); <span class="comment">// true, 函数声明提升</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.inner === <span class="literal">undefined</span>); <span class="comment">// true, inner()不在全局作用域内</span></span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure>

<h3 id="作用域和函数"><a href="#作用域和函数" class="headerlink" title="作用域和函数"></a>作用域和函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// undefined。变量定义提升，但赋值没有提升</span></span><br><span class="line">    <span class="built_in">console</span>.log(d); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">var</span> d; <span class="comment">// 重复声明不影响原值</span></span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// undefined，并没有被赋值</span></span><br><span class="line">    <span class="built_in">console</span>.log(d); <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outer();</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>变量定义的作用域在整个函数内，但变量赋值的作用域开始于被赋值的地方，结束于所在函数的结尾，都与代码嵌套无关。</li>
<li>命名函数的作用域是指声明该函数的整个函数范围，与代码嵌套无关（机制提升）</li>
<li>对于作用域声明，全局上下文就像一个包含页面所有代码的超大型函数</li>
</ul>
</blockquote>
<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo() === global); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"><span class="built_in">console</span>.log(bar() === global); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用bar变量调用该函数，该函数也是作为函数进行调用的，而且函数上下文依然是global(在浏览器是window);</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li>函数的形参列表和实际参数的长度可以是不同的。<br>未赋值的参数被设置为undefined。<br>多出的参数是不会绑定到参数名称的。</li>
<li>每个函数调用都会传入两个隐式参数：<br>arguments，实际传入的参数集合<br>this，作为函数上下文的对象引用</li>
<li>可以用不同的方法进行函数调用，不同的调用机制决定了函数上下文的不同。<br>作为普通函数进行调用时，其上下文的全局对象（global/window）。<br>作为方法进行调用时，其上下文是拥有该方法的对象。<br>作为构造器进行调用时，其上下文是一个新分配的对象。<br>通过函数的apply()或call()方法进行调用时，上下文可以设置成任何值。</li>
</ol>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="内联命名函数"><a href="#内联命名函数" class="headerlink" title="内联命名函数"></a>内联命名函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bar  = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo === bar); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>尽管可以给内联函数进行命名，但这些名称只能在自身函数内部才是可见的。</li>
<li><code>!!</code>构造是一个可以将任意JavaScript表达式转化为其等效布尔值的简单方式。eg，<code>!!&quot;a&quot; === true</code>和<code>!!0 === false</code></li>
</ul>
</blockquote>
<h2 id="可变长度的参数列表"><a href="#可变长度的参数列表" class="headerlink" title="可变长度的参数列表"></a>可变长度的参数列表</h2><h3 id="函数的length属性"><a href="#函数的length属性" class="headerlink" title="函数的length属性"></a>函数的length属性</h3><p>函数的length属性等于该函数声明时所要传入的<b>形参</b>数量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, c</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar.length); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.length); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>通过其length属性，可以知道声明了多少命名参数</li>
<li>通过<code>arguments.length</code>，可以知道在调用时传入了多少参数</li>
<li>利用参数个数的差异创建重载函数</li>
</ul>
</blockquote>
<h3 id="利用参数的个数进行函数重载"><a href="#利用参数的个数进行函数重载" class="headerlink" title="利用参数的个数进行函数重载"></a>利用参数的个数进行函数重载</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMethod</span>(<span class="params">object, name, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> old = object[name];</span><br><span class="line">    object[name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fn.length == <span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> old === <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> old.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myobj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">addMethod(myobj, <span class="string">'a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'0个参数'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">addMethod(myobj, <span class="string">'a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1个参数'</span>, n);</span><br><span class="line">&#125;);</span><br><span class="line">addMethod(myobj, <span class="string">'a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'两个参数'</span>, n1, n2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myobj.a(); <span class="comment">// 0个参数</span></span><br><span class="line">myobj.a(<span class="number">1</span>); <span class="comment">// 1个参数 1</span></span><br><span class="line">myobj.a(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 两个参数 1 2</span></span><br></pre></td></tr></table></figure>

<h2 id="函数判断"><a href="#函数判断" class="headerlink" title="函数判断"></a>函数判断</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种，有跨浏览器问题</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好的解决方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(fn) === <span class="string">'[object Function]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isFunction(foo)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>js忍者秘籍</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>函数</tag>
        <tag>js忍者秘籍</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript忍者秘籍笔记02之闭包</title>
    <url>/blog/2017/10/21/secrets-of-the-js-ninja-2-closures/</url>
    <content><![CDATA[<h2 id="闭包的作用域"><a href="#闭包的作用域" class="headerlink" title="闭包的作用域"></a>闭包的作用域</h2><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> later;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerValue = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFunction</span>(<span class="params">paramValue</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(innerValue); <span class="comment">// true</span></span><br><span class="line">        <span class="built_in">console</span>.log(paramValue); <span class="comment">// true</span></span><br><span class="line">        <span class="built_in">console</span>.log(tooLate); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">    later = innerFunction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outerFunction();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tooLate = <span class="literal">true</span>; <span class="comment">// 这个声明必须在later调用前，否则later函数中的tooLate为undefined</span></span><br><span class="line">later(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="绑定函数上下文"><a href="#绑定函数上下文" class="headerlink" title="绑定函数上下文"></a>绑定函数上下文</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> button = &#123;</span><br><span class="line">    clicked: <span class="literal">false</span>,</span><br><span class="line">    click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clicked = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(button.clicked);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">elem.addEventListener(<span class="string">'click'</span>, button.click, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在本例中，浏览器的事件处理系统认为函数调用的上下文(this)是<strong>事件的目标元素</strong>，所以才导致其上下文是<code>&lt;button&gt;元素</code>，而不是<code>button对象</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决方法1，使用匿名函数</span></span><br><span class="line">elem.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    button.click();</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方法2，使用bind方法</span></span><br><span class="line">elem.addEventListener(<span class="string">'click'</span>,button.click.bind(button),<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>setTimeout和setInterval也是同样的解决方法，区别是这两个绑定的上下文(this)是<strong>window对象</strong></p>
</blockquote>
<blockquote>
<p>更多请参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">Function.prototype.bind() - JavaScript | MDN</a></p>
</blockquote>
<h2 id="偏应用函数"><a href="#偏应用函数" class="headerlink" title="偏应用函数"></a>偏应用函数</h2><h3 id="函数科里化"><a href="#函数科里化" class="headerlink" title="函数科里化"></a>函数科里化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.curry = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="keyword">this</span>,</span><br><span class="line">        args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将类数组对象arguments转换为数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> allArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>).concat(args);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, allArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add.curry(<span class="number">1</span>)(<span class="number">4</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="“分部”函数"><a href="#“分部”函数" class="headerlink" title="“分部”函数"></a>“分部”函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.partial = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="keyword">this</span>,</span><br><span class="line">        args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length &amp;&amp; j &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                args[i] = <span class="built_in">arguments</span>[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> delay = setTimeout.partial(<span class="literal">undefined</span>, <span class="number">1000</span>);</span><br><span class="line">delay(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'delay 1 s'</span>); <span class="comment">// 1秒后输出</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="使用闭包实现缓存记忆功能"><a href="#使用闭包实现缓存记忆功能" class="headerlink" title="使用闭包实现缓存记忆功能"></a>使用闭包实现缓存记忆功能</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.memoized = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._values = <span class="keyword">this</span>._values || &#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._values[key] ? <span class="keyword">this</span>._values[key] : <span class="keyword">this</span>._values[key] = <span class="keyword">this</span>.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.memoize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.memoized.apply(fn, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prime = num != <span class="number">1</span>; <span class="comment">// != 的优先级高于 =</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">            prime = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isPrimeMemo = isPrime.memoize();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isPrimeMemo(<span class="number">4</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isPrimeMemo(<span class="number">7</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isPrime._values); <span class="comment">// &#123; '4': false, '7': true &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="即时函数"><a href="#即时函数" class="headerlink" title="即时函数"></a>即时函数</h2><blockquote>
<p>(…)()中，第一组圆括号仅仅是用于划定表达式的范围，而第二个圆括号则是一个操作符。eg，将函数引用通过圆括号括起来是合法的：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;... &#125;;</span><br><span class="line">result = (someFunction)();</span><br></pre></td></tr></table></figure>

<h3 id="通过参数限制作用域内的名称"><a href="#通过参数限制作用域内的名称" class="headerlink" title="通过参数限制作用域内的名称"></a>通过参数限制作用域内的名称</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/ninja-with-pole.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">$ = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;alert(<span class="string">'not jQuery!'</span>);&#125;; <span class="comment">// 定义一个$表示其他内容，而不是jQuery</span></span></span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span><span class="params">($)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'img'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(event.target).addClass(<span class="string">'clickedOn'</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">&#125;)(jQuery); <span class="comment">// 在调用即时函数时，将jQuery作为参数传递进去，就会将jQuery绑定到$参数上了</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>js忍者秘籍</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>js忍者秘籍</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript忍者秘籍笔记03之正则表达式</title>
    <url>/blog/2017/10/22/secrets-of-the-js-ninja-3-regular-expressions/</url>
    <content><![CDATA[<h2 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h2><h3 id="正则表达式解释"><a href="#正则表达式解释" class="headerlink" title="正则表达式解释"></a>正则表达式解释</h3><h4 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h4><a id="more"></a>
<p>正则表达式字面量或构造RegExp对象的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则字面量</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ pattern /</span> flags ;</span><br><span class="line"><span class="keyword">var</span> test = <span class="regexp">/test/ig</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>标志（flags），用以标明正则表达式的行为。正则表达式的匹配模式支持下列 3 个标志。</p>
<ul>
<li>g ：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；</li>
<li>i ：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</li>
<li>m ：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造RegExp对象实例</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern,flags);</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'test'</span>,<span class="string">'ig'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="术语与操作符"><a href="#术语与操作符" class="headerlink" title="术语与操作符"></a>术语与操作符</h3><h4 id="匹配一类字符"><a href="#匹配一类字符" class="headerlink" title="匹配一类字符"></a>匹配一类字符</h4><ul>
<li><code>[^abc]</code>: 除了’a’,’b’,’c’以外的任意字符</li>
<li><code>[a-m]</code>: 匹配’a’到’m’之间的所有字符</li>
</ul>
<h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><ul>
<li>使用反斜杠\对任意字符进行转义</li>
<li>模式中使用的所有元字符都必须转义。正则表达式中的元字符包括：<br><code>( [ { \ ^ $ | ) ? * + . ] }</code></li>
</ul>
<h4 id="匹配开始和结束"><a href="#匹配开始和结束" class="headerlink" title="匹配开始和结束"></a>匹配开始和结束</h4><ul>
<li>符号<code>^</code>如果作为正则表达式的<strong>第一个字符</strong>，则表示要从字符串的开头进行匹配。（注意，这只是<code>^</code>的一个重载，它还可以用于否定一个字符类集。</li>
<li>类似的，<code>$</code>表示该模式必须出现在字符串的结尾，同时使用<code>^</code>和<code>$</code>则表明指定的模式必须包含整个候选字符串。</li>
</ul>
<h4 id="重复出现"><a href="#重复出现" class="headerlink" title="重复出现"></a>重复出现</h4><ul>
<li><code>?</code>：0次或1次</li>
<li><code>+</code>：1次或多次</li>
<li><code>*</code>：0次或多次</li>
<li><code>/a{4}/</code>表示匹配含有连续4个’a’的字符串。</li>
<li><code>/a{4, 10}/</code>表示匹配任何含有连续4个至10个’a’字符的字符串</li>
<li>次数区间的第二个值可选（但要保留逗号），其表示一个开区间。例如，<code>/a{4,}</code>表示匹配任何含有连续4个或多于4个’a’字符的字符串。</li>
</ul>
<blockquote>
<ul>
<li>默认情况下，它们是贪婪的：它们匹配所有的字符组合。在操作符后面加一个问号?字符（?字符的一个重载)，如<code>a+?</code>，可以让该表达式变为非贪婪的：进行最小限度的匹配。eg、</li>
<li>对字符串’aaa’进行匹配，正则表达式<code>/a+/</code>匹配所有这三个字符，而非贪婪表达式<code>/a+?/</code>则只匹配一个a字符。</li>
</ul>
</blockquote>
<h4 id="预定义字符类"><a href="#预定义字符类" class="headerlink" title="预定义字符类"></a>预定义字符类</h4><table>
<thead>
<tr>
<th align="center">预定义术语</th>
<th align="center">匹配内容</th>
<th align="center">预定义术语</th>
<th align="center">匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\t</td>
<td align="center">水平制表符</td>
<td align="center">\b</td>
<td align="center">空格</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">垂直制表符</td>
<td align="center">\f</td>
<td align="center">换页符</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车</td>
<td align="center">\n</td>
<td align="center">换行符</td>
</tr>
<tr>
<td align="center">\cA:\cZ</td>
<td align="center">控制符，例如：\cM匹配一个Control-M</td>
<td align="center">\x0000:\xFFFF</td>
<td align="center">十六进制的Unicode码</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">匹配除了换行（\n）之外的任意字符</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">匹配任意数字，等价于[0-9]</td>
<td align="center">\D</td>
<td align="center">匹配任意非数字，等价于[^0-9]</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">匹配包含下划线的任意单词字符，等价于[A-Za-z0-9]</td>
<td align="center">\W</td>
<td align="center">匹配任意非单词字符</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配任何空白字符，包括空格，制表符，换页符等</td>
<td align="center">\S</td>
<td align="center">匹配任何非空白字符</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配单词边界</td>
<td align="center">\B</td>
<td align="center">匹配非单词边界</td>
</tr>
</tbody></table>
<h4 id="或操作符（OR）"><a href="#或操作符（OR）" class="headerlink" title="或操作符（OR）"></a>或操作符（OR）</h4><ul>
<li>用竖线（|）表示或者关系。eg、</li>
<li><code>/a|b/</code>匹配’a’或’b’字符。</li>
</ul>
<h4 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h4><ul>
<li>这种术语表示法是在反斜杠后面加一个要引用的捕获数量，该数字从1开始，如\1，\2等</li>
<li><code>/^([dtn])a\1/</code>匹配任意一个以’d’或’t’或’n’开头，且后面跟着一个a字符，且再后面跟着和<strong>第一个捕获相同字符</strong>的字符串</li>
<li>要匹配像’<strong>whatever</strong>‘这样的简单元素，不使用反向引用，是无法做到的。因为无法知道关闭标签和开始标签是否匹配。<code>/&lt;(\w+)&gt;(.+)&lt;\/\1&gt;/</code></li>
</ul>
<h2 id="编译正则表达式"><a href="#编译正则表达式" class="headerlink" title="编译正则表达式"></a>编译正则表达式</h2><ol>
<li>正则表达式编译发生在正则表达式第一次被创建的时候，而执行则是发生在我们使用编译过的正则表达式进行字符串匹配的时候。</li>
<li>创建正则表达式的方式不一样，就算规则一样，也不相等。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re1 = <span class="regexp">/test/i</span>;</span><br><span class="line"><span class="keyword">var</span> re2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'test'</span>,<span class="string">'i'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re1 == re2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>用构造器<code>（new RegExp(...))</code>创建正则表达式的使用，允许在运行时通过动态创建的字符串创建和编译一个正则表达式。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regStr1 = <span class="string">'\s'</span>,</span><br><span class="line">    regStr2 = <span class="string">'\\s'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regStr1); <span class="comment">// s</span></span><br><span class="line"><span class="built_in">console</span>.log(regStr2); <span class="comment">// \s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regStr1),</span><br><span class="line">    reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regStr2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testStr = <span class="string">'s'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(testStr)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(testStr)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>创建带有反斜杠的<strong>字面量</strong>正则表达式时，只需要提供一个反斜杠即可。但是，由于我们在<strong>字符串</strong>中写有反斜杠，所以需要双反斜杠进行转义。</li>
<li>一旦正则表达式被编译了，就可以利用该表达式的test()方法进行验证是否匹配。</li>
</ul>
</blockquote>
<h2 id="捕获匹配的片段"><a href="#捕获匹配的片段" class="headerlink" title="捕获匹配的片段"></a>捕获匹配的片段</h2><h3 id="执行简单的捕获（match方法）"><a href="#执行简单的捕获（match方法）" class="headerlink" title="执行简单的捕获（match方法）"></a>执行简单的捕获（match方法）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> filter = <span class="string">'opacity:0.5;filter:alpha(opacity=50);'</span></span><br><span class="line"><span class="built_in">console</span>.log(filter.match(<span class="regexp">/opacity=([^)]+)/</span>));</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// [ 'opacity=50',</span></span><br><span class="line">  <span class="comment">// '50',</span></span><br><span class="line">  <span class="comment">// index: 25,</span></span><br><span class="line">  <span class="comment">// input: 'opacity:0.5;filter:alpha(opacity=50);' ]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>match返回的数组的第一个索引的值总是改匹配的完整结果，然后是每个后续<strong>捕获结果</strong></li>
<li>注意：接下来的代码中输出的index和input被省略掉了</li>
</ul>
</blockquote>
<h3 id="用全局表达式进行匹配"><a href="#用全局表达式进行匹配" class="headerlink" title="用全局表达式进行匹配"></a>用全局表达式进行匹配</h3><p>当使用全局正则表达式（添加一个g标记）时，返回的东西不一样。返回值依然是一个数组，但在全局正则表达式的情况下，匹配所有可能的匹配结果，而不仅仅是第一个匹配结果，返回的数组包含了全局匹配结果。每个匹配的捕获结果是不会返回的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;div class='test'&gt;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;world!&lt;/i&gt;&lt;/div&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部正则匹配</span></span><br><span class="line"><span class="keyword">var</span> results = html.match(<span class="regexp">/&lt;(\/?)(\w+)([^&gt;]*?)&gt;/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(results)</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// [ '&lt;div class=\'test\'&gt;',</span></span><br><span class="line">  <span class="comment">// '',</span></span><br><span class="line">  <span class="comment">// 'div',</span></span><br><span class="line">  <span class="comment">// ' class=\'test\'',</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局正则匹配</span></span><br><span class="line"><span class="keyword">var</span> all = html.match(<span class="regexp">/&lt;(\/?)(\w+)([^&gt;]*?)&gt;/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(all);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// [ '&lt;div class=\'test\'&gt;', '&lt;b&gt;', '&lt;/b&gt;', '&lt;i&gt;', '&lt;/i&gt;', '&lt;/div&gt;' ]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>可以看到，在进行局部正则匹配时，只有一个实例被匹配了，并且该匹配的捕获结果也返回了；但是在全局正则匹配时，返回的却是匹配结果的列表。</li>
<li>可以使用正则表达式的<code>exec()</code>方法，在全局正则匹配时<strong>恢复捕获功能</strong>。该方法可以对一个正则表达式进行多次调用，每次调用都可以返回下一个匹配结果。例子如下：</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;div class='test'&gt;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;world!&lt;/i&gt;&lt;/div&gt;"</span>;</span><br><span class="line"><span class="keyword">var</span> tag = <span class="regexp">/&lt;(\/?)(\w+)([^&gt;]*?)&gt;/g</span>,</span><br><span class="line">    match;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((match = tag.exec(html)) !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(match);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num == <span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个输出：</span></span><br><span class="line"><span class="comment">// [ '&lt;div class=\'test\'&gt;',</span></span><br><span class="line"><span class="comment">//   '',</span></span><br><span class="line"><span class="comment">//   'div',</span></span><br><span class="line"><span class="comment">//   ' class=\'test\'',</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个输出：</span></span><br><span class="line"><span class="comment">// [ '&lt;b&gt;',</span></span><br><span class="line"><span class="comment">//   '',</span></span><br><span class="line"><span class="comment">//   'b',</span></span><br><span class="line"><span class="comment">//   '',</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="comment">//   接下来的4个输出同理</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在本例中，反复调用了<code>exec()</code>方法，该方法保存了上一次调用的状态，这样每个后续调用就可以继续下去了，直到全局匹配。每个调用返回的都是下一个匹配及其<strong>捕获内容</strong></p>
</blockquote>
<h3 id="捕获的引用"><a href="#捕获的引用" class="headerlink" title="捕获的引用"></a>捕获的引用</h3><p>两种方法可以引用捕获到的匹配结果：一是<strong>自身匹配</strong>，二是<strong>替换字符串</strong>。</p>
<h4 id="使用反向引用匹配HTML标签内容"><a href="#使用反向引用匹配HTML标签内容" class="headerlink" title="使用反向引用匹配HTML标签内容"></a>使用反向引用匹配HTML标签内容</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;b class='hello'&gt;Hello&lt;/b&gt; &lt;i&gt;world!&lt;/i&gt;"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/&lt;(\w+)([^&gt;]*)&gt;(.*?)&lt;\/\1&gt;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = pattern.exec(html);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// [ '&lt;b class=\'hello\'&gt;Hello&lt;/b&gt;',</span></span><br><span class="line"><span class="comment">//   'b',</span></span><br><span class="line"><span class="comment">//   ' class=\'hello\'',</span></span><br><span class="line"><span class="comment">//   'Hello',</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = pattern.exec(html);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// [ '&lt;i&gt;world!&lt;/i&gt;',</span></span><br><span class="line"><span class="comment">//   'i',</span></span><br><span class="line"><span class="comment">//   '',</span></span><br><span class="line"><span class="comment">//   'world!',</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure>

<h4 id="replace方法获得捕获的引用"><a href="#replace方法获得捕获的引用" class="headerlink" title="replace方法获得捕获的引用"></a>replace方法获得捕获的引用</h4><p>使用<code>$1</code>、<code>$2</code>、<code>$3</code>语法表示每个捕获的数字。eg、</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"fontFamily"</span>.replace(<span class="regexp">/([A-Z])/g</span>, <span class="string">"-$1"</span>).toLowerCase()); <span class="comment">// font-family</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>由于捕获和表达式分组都使用了小括号，正则表达式无法区分，所以会将小括号既视为分组，又视为捕获。</p>
</blockquote>
<h3 id="没有捕获的分组"><a href="#没有捕获的分组" class="headerlink" title="没有捕获的分组"></a>没有捕获的分组</h3><ol>
<li>当正则表达式有一部分是用括号进行分组时，它具有双重责任，同时也创建捕获（capture）。</li>
<li>要让一组括号不进行结果捕获，正则表达式的语法允许我们在开始括号后加一个<code>?:</code>标记。这就是所谓的<em>被动子表达式（passive subexpression）</em>。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/((ninja-)+)sword/</span>;</span><br><span class="line"><span class="keyword">var</span> pattern2 = <span class="regexp">/((?:ninja-)+)sword/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res1 = <span class="string">"ninja-ninja-sword"</span>.match(pattern1);</span><br><span class="line"><span class="keyword">var</span> res2 = <span class="string">"ninja-ninja-sword"</span>.match(pattern2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res1);</span><br><span class="line"><span class="comment">// 输出，（有两个捕获）</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//     'ninja-ninja-sword',</span></span><br><span class="line"><span class="comment">//     'ninja-ninja-',</span></span><br><span class="line"><span class="comment">//     'ninja-'</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res2);</span><br><span class="line"><span class="comment">// 输出，（只有一个捕获）</span></span><br><span class="line"><span class="comment">// [ 'ninja-ninja-sword', 'ninja-ninja-']</span></span><br></pre></td></tr></table></figure>

<h2 id="利用函数进行替换"><a href="#利用函数进行替换" class="headerlink" title="利用函数进行替换"></a>利用函数进行替换</h2><h3 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h3><ol>
<li>将正则表达式作为第一个参数时，会导致在该模式的匹配元素（全局匹配的话，就是多个匹配元素）上进行替换，而不是在固定字符串上进行替换。</li>
<li>当替换值（第二个参数）是一个函数时，每个匹配都会调用该函数（记住，全局搜索会在源字符串中匹配所有的模式实例）并带有一串参数列表。函数的返回值是即将要替换的值。参数列表如下：</li>
</ol>
<ul>
<li>匹配的完整文本</li>
<li>匹配的捕获，一个捕获对应一个参数</li>
<li>匹配字符串在源字符串中的索引</li>
<li>源字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将横线字符串转换成驼峰拼写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upper</span>(<span class="params">all,letter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> letter.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'border-bottom-width'</span>.replace(<span class="regexp">/-(\w)/g</span>,upper)); <span class="comment">// borderBottomWidth</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩查询字符串的技术</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compress</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = &#123;&#125;;</span><br><span class="line">    source.replace(<span class="regexp">/([^=&amp;]+)=([^&amp;]*)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">full, key, value</span>) </span>&#123;</span><br><span class="line">        keys[key] = (keys[key] ? keys[key] + <span class="string">','</span> : <span class="string">''</span>) + value;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> keys) &#123;</span><br><span class="line">        result.push(key+<span class="string">'='</span>+keys[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">'&amp;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(compress(<span class="string">"foo=1&amp;foo=2&amp;blah=a&amp;blah=b&amp;foo=3"</span>));</span><br><span class="line"><span class="comment">// foo=1,2,3&amp;blah=a,b</span></span><br></pre></td></tr></table></figure>

<h3 id="匹配换行符"><a href="#匹配换行符" class="headerlink" title="匹配换行符"></a>匹配换行符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;b&gt;Hello&lt;/b&gt;\n&lt;i&gt;world!&lt;/i&gt;"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.*/</span>.exec(html)[<span class="number">0</span>] === <span class="string">"&lt;b&gt;Hello&lt;/b&gt;"</span>); <span class="comment">// true，说明换行符没有被匹配到</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[\S\s]*/</span>.exec(html)[<span class="number">0</span>] ===</span><br><span class="line">    <span class="string">"&lt;b&gt;Hello&lt;/b&gt;\n&lt;i&gt;world!&lt;/i&gt;"</span>); <span class="comment">// true，最佳方案</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(?:.|\s)*/</span>.exec(html)[<span class="number">0</span>] ===</span><br><span class="line">    <span class="string">"&lt;b&gt;Hello&lt;/b&gt;\n&lt;i&gt;world!&lt;/i&gt;"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="RegExp-实例属性（来自JS高级程序设计）"><a href="#RegExp-实例属性（来自JS高级程序设计）" class="headerlink" title="RegExp 实例属性（来自JS高级程序设计）"></a>RegExp 实例属性（来自JS高级程序设计）</h3><p>RegExp 的每个实例都具有下列属性，通过这些属性可以取得有关模式的各种信息。</p>
<ul>
<li>global ：布尔值，表示是否设置了 g 标志。</li>
<li>ignoreCase ：布尔值，表示是否设置了 i 标志。</li>
<li>lastIndex ：整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。</li>
<li>multiline ：布尔值，表示是否设置了 m 标志。</li>
<li>source ：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/\[bc\]at/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern1.global); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
        <category>js忍者秘籍</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>js忍者秘籍</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript忍者秘籍笔记04之线程和定时器</title>
    <url>/blog/2017/10/25/secrets-of-the-js-ninja-4-threads-and-timers/</url>
    <content><![CDATA[<h2 id="定时器和线程的工作方式"><a href="#定时器和线程的工作方式" class="headerlink" title="定时器和线程的工作方式"></a>定时器和线程的工作方式</h2><h3 id="执行线程中的定时器执行"><a href="#执行线程中的定时器执行" class="headerlink" title="执行线程中的定时器执行"></a>执行线程中的定时器执行</h3><p>浏览器不会对特定interval处理程序的多个实例进行排队</p>
<a id="more"></a>
<h3 id="timeout和interval之间的区别"><a href="#timeout和interval之间的区别" class="headerlink" title="timeout和interval之间的区别"></a>timeout和interval之间的区别</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">repeateMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行setTimeout'</span>);</span><br><span class="line">    setTimeout(repeateMe,<span class="number">1000</span>);</span><br><span class="line">&#125;,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行setInterval'</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上两段代码功能似乎是相同的，实际上不是。在setTimeout()代码中，要在前一个callback回调执行结束并延迟1秒（可能更多，但不会更少）以后，才能再次执行setTimeout()。而setInterval()则是每隔1秒就尝试执行callback回调，而不关注上一个callback是何时执行的。</p>
</blockquote>
<h3 id="定时器延迟的最小化及其可靠性"><a href="#定时器延迟的最小化及其可靠性" class="headerlink" title="定时器延迟的最小化及其可靠性"></a>定时器延迟的最小化及其可靠性</h3><p>大多数情况下，是使用闭包给定时器或间隔定时器“传递”数据的，但也可以在声明这些定时器时传入额外的参数，例如，<code>setTimeout(call,interval,arg1,arg2,arg3)</code>会给callback回调传递arg1、arg2、arg3三个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(sayHello,<span class="number">1000</span>,<span class="string">'world'</span>); <span class="comment">// hello, world</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello,'</span>,name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="中央定时器控制"><a href="#中央定时器控制" class="headerlink" title="中央定时器控制"></a>中央定时器控制</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeControler = &#123;</span><br><span class="line">    timerID: <span class="number">0</span>,</span><br><span class="line">    timers: [],</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timers.push(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    start: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.timerID) <span class="keyword">return</span>; <span class="comment">// 已经有定时器在执行</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'开始了'</span>);</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> <span class="title">runNext</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (timeControler.timers.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; timeControler.timers.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (timeControler.timers[i]() === <span class="literal">false</span>) &#123;</span><br><span class="line">                        timeControler.timers.splice(i, <span class="number">1</span>);</span><br><span class="line">                        i--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                timeControler.timerID = setTimeout(runNext, <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br><span class="line">    &#125;,</span><br><span class="line">    stop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(<span class="keyword">this</span>.timerID);</span><br><span class="line">        <span class="keyword">this</span>.timerID = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>),</span><br><span class="line">    x = <span class="number">0</span>,</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">timeControler.add(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    box.style.left = x + <span class="string">'px'</span>;</span><br><span class="line">    <span class="keyword">if</span> (++x &gt; <span class="number">200</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">timeControler.add(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    box.style.top = y + <span class="string">'px'</span>;</span><br><span class="line">    y+=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; <span class="number">120</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">timeControler.start();</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>自己测试时，要把box的position设为absolute或relative</li>
<li>以这种方式组织定时器，可以确保回调函数总是按照添加的顺序进行执行。而普通的定时器通常不会保证这种顺序。</li>
</ul>
</blockquote>
<h2 id="eval-方法进行求值"><a href="#eval-方法进行求值" class="headerlink" title="eval()方法进行求值"></a>eval()方法进行求值</h2><h3 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h3><p>该方法将在当前上下文内，执行所传入字符串形式的代码，执行返回结果则是最后一个表达式的执行结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'var bar = 5;'</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 5;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.bar); <span class="comment">// 5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eval方法返回传入字符串最后一个表达式的执行结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'3+4,5+6'</span>)); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>正常模式下，eval语句的作用域，取决于它处于全局作用域，还是处于函数作用域。</p>
</blockquote>
<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'var x = 5; x'</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'var bar = 6; bar'</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// Uncaught ReferenceError: bar is not defined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>严格模式下，eval语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于eval内部。</p>
</blockquote>
<blockquote>
<p>参考链接：<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>js忍者秘籍</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>js忍者秘籍</tag>
        <tag>定时器</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript忍者秘籍笔记05之跨浏览器策略</title>
    <url>/blog/2017/10/28/secrets-of-the-js-ninja-5-cross-browser-strategies/</url>
    <content><![CDATA[<h2 id="浏览器bug修复"><a href="#浏览器bug修复" class="headerlink" title="浏览器bug修复"></a>浏览器bug修复</h2><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form id=<span class="string">"form"</span> action=<span class="string">"/conceal"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"action"</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> id=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">document.getElementById('form').submit();</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ TypeError: document.getElementById(...).submit is not a function</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>浏览器将表单里引用的每个input元素都作为<code>&lt;form&gt;</code>元素的属性了。当所添加属性的名称是input属性的<code>id</code>值时就可能会出现问题了。如果id值恰好是form元素已经存在的属性，这些原始属性就会被新属性取而代之，如<code>action</code>或<code>submit</code>。</li>
<li>因此，在创建<code>input#submit</code>元素之前，<code>form.action</code>引用指向的是<code>&lt;form&gt;</code>的<code>action</code>特性的值，但在创建元素之后，指向的就是<code>input#submit</code>元素了。</li>
</ul>
</blockquote>
<h3 id="特征仿真"><a href="#特征仿真" class="headerlink" title="特征仿真"></a>特征仿真</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.findByTagWorksAsExpected = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.appendChild(<span class="built_in">document</span>.create(<span class="string">'test'</span>));</span><br><span class="line">    <span class="keyword">return</span> div.getElementsByTagName(<span class="string">'*'</span>).length === <span class="number">0</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="元素特性和属性"><a href="#元素特性和属性" class="headerlink" title="元素特性和属性"></a>元素特性和属性</h2><p>特性（attribute）是DOM构建的一个组成部分，而属性（property）是元素保持运行时信息的主要手段，并且通过属性可以访问这些运行时信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> newSrc = <span class="string">'images/kong.png'</span>;</span><br><span class="line"></span><br><span class="line">image.src = newSrc;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(image.src); <span class="comment">// file:///F:/Web/sublimeProject/test/images/kong.png</span></span><br><span class="line"><span class="built_in">console</span>.log(image.getAttribute(<span class="string">'src'</span>)); <span class="comment">// images/kong.png</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义特性的行为"><a href="#自定义特性的行为" class="headerlink" title="自定义特性的行为"></a>自定义特性的行为</h3><p>如果不确定一个特性的属性是否存在，可以对其进行测试，如果不存在的话再使用DOM方法。eg、</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = element.someValue? element.someValue: element.getAttribute(<span class="string">'someValue'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="URL规范化"><a href="#URL规范化" class="headerlink" title="URL规范化"></a>URL规范化</h3><p>在访问一个引用了URL的属性（eg，href，src或action），该URL值会自动将原始值转换成完整规范的URL。</p>
<h3 id="获取计算样式"><a href="#获取计算样式" class="headerlink" title="获取计算样式"></a>获取计算样式</h3><ol>
<li><p>Window.getComputedStyle() 方法给出应用活动样式表后的元素的所有CSS属性的值，并解析这些值可能包含的任何基本计算。</p>
</li>
<li><p>语法</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> style = <span class="built_in">window</span>.getComputedStyle(element, [pseudoElt]);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>element</code>：用于获取计算样式的Elemen</li>
<li><code>pseudoElt</code>：可选。指定一个要匹配的伪元素的字符串。必须对普通元素省略（或null）。</li>
<li>返回的样式是一个实时的 CSSStyleDeclaration 对象，当元素的样式更改时，它会自动更新本身。该对象提供一个名为<code>getPropertyValue()</code>的方法，接受CSS属性名称（如font-size和background-color），而不是“驼峰式”格式的名称。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试getComputedStyle方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">        font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>我是box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> compSty = <span class="built_in">window</span>.getComputedStyle(oBox);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(compSty.getPropertyValue(<span class="string">'font-size'</span>)); <span class="comment">// 16px</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    oBox.style.fontSize = <span class="string">'14px'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(compSty.getPropertyValue(<span class="string">'font-size'</span>)); <span class="comment">// 14px</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="绑定和解绑事件处理程序"><a href="#绑定和解绑事件处理程序" class="headerlink" title="绑定和解绑事件处理程序"></a>绑定和解绑事件处理程序</h2><ol>
<li>IE9之前版本：<code>attachEvent()</code>和<code>detachEvent()</code>方法</li>
<li>现代浏览器：<code>addEventListener()</code>和<code>removeEventListener()</code>方法</li>
</ol>
<h2 id="冒泡与委托"><a href="#冒泡与委托" class="headerlink" title="冒泡与委托"></a>冒泡与委托</h2><p>一个元素被单击的时候可以通过event.target获得该元素的引用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将事件处理委托给表格元素+</span></span><br><span class="line"><span class="keyword">var</span> table = <span class="built_in">document</span>.getElementById(<span class="string">'someId'</span>);</span><br><span class="line">table.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event.target.tagName.toLowerCase() == <span class="string">'td'</span>) &#123;</span><br><span class="line">        event.target.style.backgroundColor = <span class="string">'yellow'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="向DOM中注入HTML"><a href="#向DOM中注入HTML" class="headerlink" title="向DOM中注入HTML"></a>向DOM中注入HTML</h2><p>有些HTML元素在被注入之前，必须存放在特定的容器元素中，例如，<code>&lt;option&gt;</code>元素必须放在<code>&lt;select&gt;</code>中。需要使用特定容器元素进行包装的问题元素有7个：</p>
<ul>
<li><code>&lt;option&gt;</code> and <code>&lt; optgroup&gt;</code> need to be contained in a <code>&lt;select multiple=&quot;multiple&quot;&gt;...&lt;/select&gt;</code></li>
<li><code>&lt;legend&gt;</code> needs to be contained in a <code>&lt;fieldset&gt;...&lt;/fieldset&gt;</code></li>
<li><code>&lt;thead&gt;</code> , <code>&lt; tbody&gt;</code> , <code>&lt; tfoot&gt;</code> , <code>&lt; colgroup&gt;</code> , and <code>&lt; caption&gt;</code> need to be contained in a<code>&lt;table&gt;...&lt;/table&gt;</code></li>
<li><code>&lt;tr&gt;</code> needs to be in a <code>&lt;table&gt;&lt;thead&gt;...&lt;/thead&gt;&lt;/table&gt;</code> , <code>&lt;table&gt;&lt;tbody&gt;...&lt;/tbody&gt;&lt;/table&gt;</code> , or <code>&lt;table&gt;&lt;tfoot&gt;...&lt;/tfoot&gt;&lt;/table&gt;</code></li>
<li><code>&lt;td&gt;</code> and <code>&lt;th&gt;</code> need to be in a <code>&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;...&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</code></li>
<li><code>&lt;col&gt;</code> must be in a <code>&lt;table&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;colgroup&gt;...&lt;/colgroup&gt;&lt;/table&gt;</code></li>
<li><code>&lt;link&gt;</code> and <code>&lt;script&gt;</code> need to be in a <code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
        <category>js忍者秘籍</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>js忍者秘籍</tag>
        <tag>跨浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript忍者秘籍笔记06之原型与面向对象</title>
    <url>/blog/2017/10/30/secrets-of-the-js-ninja-6-prototype-and-oop/</url>
    <content><![CDATA[<h2 id="实例化和原型"><a href="#实例化和原型" class="headerlink" title="实例化和原型"></a>实例化和原型</h2><h3 id="对象实例化"><a href="#对象实例化" class="headerlink" title="对象实例化"></a>对象实例化</h3><h4 id="协调引用"><a href="#协调引用" class="headerlink" title="协调引用"></a>协调引用</h4><p>JavaScript中的每个对象，都有一个名为constructor的隐式属性，该属性引用的是创建该对象的构造器，由于prototype是构造器的一个属性，所以每个对象都有一种方式可以找到自己的原型。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.swung = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.swingSword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">this</span>.swung;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Ninja.prototype.swingSword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.swung;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台</span></span><br><span class="line">&gt; ninja.swingSword</span><br><span class="line">ƒ () &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">this</span>.swung;</span><br><span class="line">    &#125;</span><br><span class="line">&gt; ninja.__proto__.swingSword</span><br><span class="line">ƒ () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.swung;</span><br><span class="line">&#125;</span><br><span class="line">&gt; ninja.constructor.prototype.swingSword</span><br><span class="line">ƒ () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.swung;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过构造器判断对象类型"><a href="#通过构造器判断对象类型" class="headerlink" title="通过构造器判断对象类型"></a>通过构造器判断对象类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();</span><br><span class="line"><span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Ninja); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(ninja.constructor == Ninja); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ninja2 = <span class="keyword">new</span> ninja.constructor();</span><br><span class="line"><span class="built_in">console</span>.log(ninja2 <span class="keyword">instanceof</span> Ninja); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>不用知道原有的构造器函数也可以再次创建一个新实例，即便是原始的构造器在作用域内已经不存在了，也可以使用该引用。</p>
</blockquote>
<h3 id="继承与原型链"><a href="#继承与原型链" class="headerlink" title="继承与原型链"></a>继承与原型链</h3><p>实现继承的最好方式，使用一个对象的实例作为另一个对象的原型：<br><code>SubClass.prototype = new SuperClass();</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.dance = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Ninja.prototype = <span class="keyword">new</span> Person(); <span class="comment">// 继承</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Ninja); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> ninja.dance == <span class="string">"function"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>所有的内置对象，比如Array，包括其原型，都可以扩展它们，但不建议在原始对象上引入新的属性或方法，因为原生对象的原型只有一个实例，可能发生命名冲突</p>
</blockquote>
<h3 id="HTML-DOM原型"><a href="#HTML-DOM原型" class="headerlink" title="HTML DOM原型"></a>HTML DOM原型</h3><p>所有的DOM元素都继承于HTMLElement构造器，通过访问HTMLElement的原型，可以提供扩展任意HTML节点的能力。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span>I'm going to be removed.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span>Me too!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    HTMLElement.prototype.remove = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">this</span>.parentNode)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">"a"</span>);</span></span><br><span class="line">    a.parentNode.removeChild(a);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"b"</span>).remove();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(!<span class="built_in">document</span>.getElementById(<span class="string">"a"</span>)); <span class="comment">// true</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(!<span class="built_in">document</span>.getElementById(<span class="string">"b"</span>)); <span class="comment">// true</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>处理HTMLElement原型时，不能在IE8之前的版本使用</p>
</blockquote>
<h3 id="扩展数字"><a href="#扩展数字" class="headerlink" title="扩展数字"></a>扩展数字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> + num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n.add(<span class="number">3</span>) == <span class="number">8</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">5</span>).add(<span class="number">3</span>) == <span class="number">8</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5.</span>add(<span class="number">3</span>) == <span class="number">8</span>);</span><br><span class="line">            ^^</span><br><span class="line"><span class="built_in">SyntaxError</span>: Invalid or unexpected token</span><br></pre></td></tr></table></figure>
<blockquote>
<p>报错原因，语法解析器不能处理字面量这种情况，最好避免在Number的原型做扩展</p>
</blockquote>
<h3 id="实例化问题"><a href="#实例化问题" class="headerlink" title="实例化问题"></a>实例化问题</h3><h4 id="判断函数是否是作为构造器进行调用的"><a href="#判断函数是否是作为构造器进行调用的" class="headerlink" title="判断函数是否是作为构造器进行调用的"></a>判断函数是否是作为构造器进行调用的</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Test()); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Test()); <span class="comment">// Test &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>通过arguments.callee可以得到当前执行函数的引用。</li>
<li>“普通”函数的上下文默认是全局作用域。</li>
<li>利用instanceof操作符测试已构建对象是否构建于指定的构造器。</li>
</ul>
</blockquote>
<h4 id="在调用者上修复该问题"><a href="#在调用者上修复该问题" class="headerlink" title="在调用者上修复该问题"></a>在调用者上修复该问题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果不按正确方法进行调用，则修复这个错误</span></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">arguments</span>.callee)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(first, last);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = first + <span class="string">''</span> + last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> User(<span class="string">'小'</span>, <span class="string">'明'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.name); <span class="comment">// 小明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaohong = User(<span class="string">'小'</span>, <span class="string">'红'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xiaohong.name); <span class="comment">// 小红</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>arguments.callee严格模式下禁用！更通用的方法如下：（摘自Effective JavaScript）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> User)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(first, last);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = first + <span class="string">''</span> + last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> User(<span class="string">'小'</span>, <span class="string">'明'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.name); <span class="comment">// 小明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaohong = User(<span class="string">'小'</span>, <span class="string">'红'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xiaohong.name); <span class="comment">// 小红</span></span><br></pre></td></tr></table></figure>

<h2 id="编写类风格的代码"><a href="#编写类风格的代码" class="headerlink" title="编写类风格的代码"></a>编写类风格的代码</h2><h3 id="检测函数是否可序列化"><a href="#检测函数是否可序列化" class="headerlink" title="检测函数是否可序列化"></a>检测函数是否可序列化</h3><p>函数序列化（function serialization）就是简单接收一个函数，然后返回该函数的源码文本。可以用这种方法检查一个函数在某一个对象中是否存在引用。在大多数浏览器中，序列化会导致函数的toString()方法会被调用。可以使用如下表达式测试一个函数是否能够被序列化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/xyz/.test(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;xyz;&#125;); <span class="comment">// 返回true（能序列化）或false（反之）</span></span><br></pre></td></tr></table></figure>

<h3 id="子类方法"><a href="#子类方法" class="headerlink" title="子类方法"></a>子类方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> initializing = <span class="literal">false</span>,</span><br><span class="line">        superPattern =</span><br><span class="line">        /xyz/.test(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; xyz; &#125;) ? <span class="regexp">/\b_super\b/</span> : <span class="regexp">/.*/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.subClass = <span class="function"><span class="keyword">function</span>(<span class="params">properties</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _super = <span class="keyword">this</span>.prototype;</span><br><span class="line"></span><br><span class="line">        initializing = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">var</span> proto = <span class="keyword">new</span> <span class="keyword">this</span>();</span><br><span class="line">        initializing = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> properties) &#123;</span><br><span class="line">            proto[name] = <span class="keyword">typeof</span> properties[name] == <span class="string">"function"</span> &amp;&amp;</span><br><span class="line">                <span class="keyword">typeof</span> _super[name] == <span class="string">"function"</span> &amp;&amp;</span><br><span class="line">                superPattern.test(properties[name]) ?</span><br><span class="line">                (<span class="function"><span class="keyword">function</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> tmp = <span class="keyword">this</span>._super; <span class="comment">// this引用的是当前的子类实例</span></span><br><span class="line">                        <span class="keyword">this</span>._super = _super[name];</span><br><span class="line">                        <span class="keyword">var</span> ret = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                        <span class="keyword">this</span>._super = tmp;</span><br><span class="line">                        <span class="keyword">return</span> ret;</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;)(name, properties[name]) :</span><br><span class="line">                properties[name];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Class</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// All construction is actually done in the init method</span></span><br><span class="line">            <span class="keyword">if</span> (!initializing &amp;&amp; <span class="keyword">this</span>.init) &#123;</span><br><span class="line">                <span class="keyword">this</span>.init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Class.prototype = proto;</span><br><span class="line">        Class.constructor = Class;</span><br><span class="line">        Class.subClass = <span class="built_in">arguments</span>.callee;</span><br><span class="line">        <span class="keyword">return</span> Class;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>for…in 循环中的个人理解：</p>
<ol>
<li>要继承的属性是方法: <code>typeof properties[name] == &quot;function&quot;</code></li>
<li>自己的原型链中有同名方法: <code>typeof _super[name] == &quot;function&quot;</code></li>
<li>要继承的属性（方法）中含有<code>_super</code>字符串: <code>superPattern.test(properties[name])</code></li>
<li>若不能同时满足1,2,3点，则将要继承的属性作为自己实例的一个同名属性</li>
<li>若同时满足1,2,3点，则返回一个新的函数，该函数中调用了要继承的属性（方法），并返回调用的结果。</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> Person = <span class="built_in">Object</span>.subClass(&#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">isDancing</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dancing = isDancing;</span><br><span class="line">    &#125;,</span><br><span class="line">    dance: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dancing;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Ninja = Person.subClass(&#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._super(<span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    dance: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Ninja-specific stuff here</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._super();</span><br><span class="line">    &#125;,</span><br><span class="line">    swingSword: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.dance()); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();</span><br><span class="line"><span class="built_in">console</span>.log(ninja.swingSword()); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(ninja.dance()); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Ninja &amp;&amp; ninja <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法，只能透过类名调用</span></span><br><span class="line">    <span class="keyword">static</span> animalStaticMethod() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'animal static method'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法，只能通过实例对象调用</span></span><br><span class="line">    sayHi() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sayHi, I am animal '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, gender) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name); <span class="comment">// 调用父类的constructor(name)</span></span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        <span class="keyword">super</span>.sayHi(); <span class="comment">// 调用父类的sayHi()</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sayHello, I am a '</span> + <span class="keyword">this</span>.gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Animal.animalStaticMethod(); <span class="comment">// animal static method</span></span><br><span class="line"><span class="comment">// 继承父类静态方法</span></span><br><span class="line">People.animalStaticMethod(); <span class="comment">// animal static method</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Animal(<span class="string">'旺旺'</span>);</span><br><span class="line">dog.sayHi(); <span class="comment">// sayHi, I am  animal 旺旺</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> People(<span class="string">'小明'</span>, <span class="string">'boy'</span>);</span><br><span class="line">xiaoming.sayHi(); <span class="comment">// sayHi, I am animal 小明</span></span><br><span class="line">xiaoming.sayHello(); <span class="comment">// sayHi, I am animal 小明</span></span><br><span class="line">                     <span class="comment">// sayHello, I am a boy</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考自：<a href="http://es6.ruanyifeng.com/#docs/class-extends" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/class-extends</a></p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
        <category>js忍者秘籍</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>对象</tag>
        <tag>原型</tag>
        <tag>js忍者秘籍</tag>
      </tags>
  </entry>
  <entry>
    <title>sticky-footer</title>
    <url>/blog/2018/04/21/sticky-footer/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>实现sticky-footer布局</p>
<a id="more"></a>

<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p><img src="https://gitee.com/sluggish/music/raw/master/sticky-footer.png" alt="sticky-footer.png"></p>
<h2 id="absolute方案"><a href="#absolute方案" class="headerlink" title="absolute方案"></a>absolute方案</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="comment">/*100px是footer高度*/</span></span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="margin方案"><a href="#margin方案" class="headerlink" title="margin方案"></a>margin方案</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="comment">/*100px是footer高度*/</span></span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/*-100px是-footer高度*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="flex方案"><a href="#flex方案" class="headerlink" title="flex方案"></a>flex方案</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-flow</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="calc方案"><a href="#calc方案" class="headerlink" title="calc方案"></a>calc方案</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="comment">/*100px 是footer高度*/</span></span><br><span class="line">    <span class="attribute">min-height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="grid方案"><a href="#grid方案" class="headerlink" title="grid方案"></a>grid方案</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="comment">/* 100px 为footer高度 */</span></span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>布局</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>sticky-footer布局</tag>
      </tags>
  </entry>
  <entry>
    <title>标签页间通信</title>
    <url>/blog/2017/11/22/tab-communication/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>实现浏览器内多个标签页之间的通信，有4种方法</p>
<a id="more"></a>

<h2 id="使用window-opener【不支持跨域】"><a href="#使用window-opener【不支持跨域】" class="headerlink" title="使用window.opener【不支持跨域】"></a>使用window.opener【不支持跨域】</h2><p>适用于新标签页是主标签页使用window.open(…)打开的情况。window.opener返回打开当前窗口的那个窗口的引用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- main.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>主窗口<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>通过window.open(...)打开另一个隔壁窗口：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"openNew"</span>&gt;</span>打开隔壁窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>通过window.open(...)的返回值改变隔壁窗口背景<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"turnRed"</span>&gt;</span>变红<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"turnOrange"</span>&gt;</span>变橙<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"turnYellow"</span>&gt;</span>变黄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> $openNew = $(<span class="string">'#openNew'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> anotherWindow = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">$openNew.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    anotherWindow = <span class="built_in">window</span>.open(<span class="string">'otherWindow.html'</span>); <span class="comment">// 打开新隔壁标签页</span></span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript">$(<span class="string">'#turnRed'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    anotherWindow.document.bgColor = <span class="string">'red'</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript">$(<span class="string">'#turnOrange'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    anotherWindow.document.bgColor = <span class="string">'orange'</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript">$(<span class="string">'#turnYellow'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    anotherWindow.document.bgColor = <span class="string">'yellow'</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- otherWindow.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>隔壁窗口<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>通过window.opener改变主窗口颜色<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"turnGreen"</span>&gt;</span>变绿<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"turnBlue"</span>&gt;</span>变蓝<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"turnPurple"</span>&gt;</span>变紫<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="string">'#turnGreen'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.opener.document.bgColor = <span class="string">'green'</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript">$(<span class="string">'#turnBlue'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.opener.document.bgColor = <span class="string">'blue'</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript">$(<span class="string">'#turnPurple'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.opener.document.bgColor = <span class="string">'purple'</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在线演示：<a href="http://sluggish.gitee.io/staticpages/tab-communication/window-opener/mainWindow.html" target="_blank" rel="noopener">http://sluggish.gitee.io/staticpages/tab-communication/window-opener/mainWindow.html</a></p>
<p>参考链接：<a href="http://www.javascriptkit.com/javatutors/remote2.shtml" target="_blank" rel="noopener">http://www.javascriptkit.com/javatutors/remote2.shtml</a></p>
</blockquote>
<p>​</p>
<h2 id="使用window-postMessage-【支持跨域】"><a href="#使用window-postMessage-【支持跨域】" class="headerlink" title="使用window.postMessage()【支持跨域】"></a>使用window.postMessage()【支持跨域】</h2><p>方法：<code>otherWindow.postMessage(message, targetOrigin, [transfer])</code></p>
<p>​        <code>window.addEventListener(&quot;message&quot;, receiveMessage, false);</code></p>
<ul>
<li><p>otherWindow</p>
<p>​    其他窗口的一个引用，比如<code>iframe的</code>contentWindow<code>属性、执行</code>window.open<code>返回的窗口对象、或者是命名过或数值索引的</code>window.frames`。</p>
</li>
<li><p>message</p>
<p>​    将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。</p>
</li>
<li><p>targetOrigin</p>
<p>​    通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*“（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用<code>postMessage</code>传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的orign属性完全一致，来防止密码被恶意的第三方截获。<strong>如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是*。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</strong></p>
</li>
<li><p><code>transfer</code> 可选</p>
<p>​    是一串和message 同时传递的 Transferable对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</p>
</li>
</ul>
<p><img src="https://s2.ax1x.com/2019/10/13/uxy77Q.png" alt="主窗口"><br><img src="https://s2.ax1x.com/2019/10/13/uxyqts.png" alt="另一个窗口"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主页面</span></span><br><span class="line"><span class="keyword">var</span> $openNew = $(<span class="string">'#openNew'</span>); <span class="comment">// 打开新窗口的按钮</span></span><br><span class="line"><span class="keyword">var</span> $sendText = $(<span class="string">'.send-text'</span>); <span class="comment">// 发送input内容的按钮</span></span><br><span class="line"><span class="keyword">var</span> $content = $(<span class="string">'.content'</span>); <span class="comment">// 输入文字内容的input</span></span><br><span class="line"><span class="keyword">var</span> popup = <span class="literal">null</span>; <span class="comment">// 目标窗口的引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击打开新窗口</span></span><br><span class="line">$openNew.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    popup = <span class="built_in">window</span>.open(<span class="string">'https://sluggishpj.github.io/staticPages/index.html'</span>); <span class="comment">// 新窗口的引用，稍后发消息要用到</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        popup.postMessage(<span class="string">'连接上了'</span>, <span class="string">'https://sluggishpj.github.io'</span>); <span class="comment">// 过2s发送第一条消息</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击发送按钮发送</span></span><br><span class="line">$(<span class="string">'.send'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = $sendText.val();</span><br><span class="line">    popup.postMessage(text, <span class="string">'https://sluggishpj.github.io'</span>); <span class="comment">// 发送到目标窗口</span></span><br><span class="line">    $(<span class="string">'&lt;p&gt;'</span>).text(<span class="string">'我：'</span> + text).appendTo($content);</span><br><span class="line">    $sendText.val(<span class="string">''</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理别的窗口发送过来的消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMsg</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.origin !== <span class="string">'https://sluggishpj.github.io'</span>) &#123; <span class="comment">// 判断来源是否符合要求</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">'&lt;p&gt;'</span>).text(<span class="string">'对方（'</span> + event.origin + <span class="string">'）: '</span> + event.data).appendTo($content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, receiveMsg, <span class="literal">false</span>); <span class="comment">// 监听别的窗口发送过来的消息事件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从主页面中打开的页面</span></span><br><span class="line"><span class="keyword">var</span> eventSource = <span class="literal">null</span>; <span class="comment">// 目标窗口的引用</span></span><br><span class="line"><span class="keyword">var</span> eventOrigin = <span class="literal">null</span>; <span class="comment">// 目标窗口的协议，主机地址和端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击发送input内文字</span></span><br><span class="line">$(<span class="string">'.send'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = $sendText.val();</span><br><span class="line">    eventSource.postMessage(text, eventOrigin);</span><br><span class="line">    $(<span class="string">'&lt;p&gt;'</span>).text(<span class="string">'我：'</span> + text).appendTo($content);</span><br><span class="line">    $sendText.val(<span class="string">''</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, receiveMsg, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMsg</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    eventOrigin = event.origin; </span><br><span class="line">    eventSource = event.source; <span class="comment">// 保存发消息给本页面的窗口的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eventOrigin !== <span class="string">'http://sluggish.gitee.io'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">'&lt;p&gt;'</span>).text(<span class="string">'对方（'</span> + eventOrigin + <span class="string">'）: '</span> + event.data).appendTo($content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在线演示：<a href="http://sluggish.gitee.io/staticpages/tab-communication/postMessage/" target="_blank" rel="noopener">http://sluggish.gitee.io/staticpages/tab-communication/postMessage/</a></p>
<p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p>
<p>主页面源码：<a href="https://gitee.com/sluggish/staticpages/blob/master/tab-communication/postMessage/index.html" target="_blank" rel="noopener">https://gitee.com/sluggish/staticpages/blob/master/tab-communication/postMessage/index.html</a></p>
<p>次页面源码：<a href="https://github.com/sluggishpj/staticPages/blob/gh-pages/index.html" target="_blank" rel="noopener">https://github.com/sluggishpj/staticPages/blob/gh-pages/index.html</a></p>
<p>MDN上的例子：<a href="https://mdn.github.io/dom-examples/web-storage/index.html" target="_blank" rel="noopener">https://mdn.github.io/dom-examples/web-storage/index.html</a></p>
</blockquote>
<p>​</p>
<h2 id="使用cookies【不支持跨域】"><a href="#使用cookies【不支持跨域】" class="headerlink" title="使用cookies【不支持跨域】"></a>使用cookies【不支持跨域】</h2><p>原理：多个页面共享同样的cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> CookieUtil = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function(name) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span>,</span><br><span class="line">            cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</span><br><span class="line">            cookieValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">';'</span>, cookieStart);</span><br><span class="line">            <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">                cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">            &#125;</span><br><span class="line">            cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieValue;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expires传入的是过期那个日期 或者 距离过期的天数</span></span><br><span class="line">    <span class="keyword">set</span>: function(name, value, expires, path, domain, secure) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value),</span><br><span class="line">            exp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123; <span class="comment">// 具体日期</span></span><br><span class="line">            cookieText += <span class="string">'; expires='</span> + expires.toUTCString();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> expires === <span class="string">'number'</span>) &#123; <span class="comment">// 过期天数</span></span><br><span class="line">            exp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            exp.setTime(exp.getTime() + expires * <span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line">            cookieText += <span class="string">'; expires='</span> + exp.toUTCString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (path) &#123;</span><br><span class="line">            cookieText += <span class="string">'; path='</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">            cookieText += <span class="string">'; domain='</span> + domain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">            cookieText += <span class="string">'; secure'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params">name, path, domain, secure</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set(name, <span class="string">''</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在线演示：<a href="http://sluggish.gitee.io/staticpages/tab-communication/cookies/" target="_blank" rel="noopener">http://sluggish.gitee.io/staticpages/tab-communication/cookies/</a></p>
<p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cookie" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cookie</a></p>
<p>参考书籍：《JavaScript高级程序设计》</p>
</blockquote>
<p>​</p>
<h2 id="使用localStorage【不支持跨域】"><a href="#使用localStorage【不支持跨域】" class="headerlink" title="使用localStorage【不支持跨域】"></a>使用localStorage【不支持跨域】</h2><p>方法：</p>
<ul>
<li>存储数据：localStorage.setItem(key, value)</li>
<li>获取数据：localStorage.getItem(key)</li>
<li>删除特定数据：localStorage.removeItem(key)</li>
<li>清空域名对应的整个存储对象：localStorage.clear()</li>
<li>没有过期时间</li>
</ul>
<blockquote>
<p>在线演示：<a href="http://sluggish.gitee.io/staticpages/tab-communication/localStorage/" target="_blank" rel="noopener">http://sluggish.gitee.io/staticpages/tab-communication/localStorage/</a></p>
<p>参考链接：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage</a></p>
</blockquote>
]]></content>
      <categories>
        <category>综合知识点</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>标签页</tag>
        <tag>窗口</tag>
        <tag>通信</tag>
      </tags>
  </entry>
  <entry>
    <title>understanding-prototype-in-js</title>
    <url>/blog/2018/06/28/understanding-prototype-in-js/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>理清楚 <code>__proto__</code>，<code>prototype</code>，<code>Object.getPrototypeOf/Object.setPrototypeOf</code>，以及<strong>继承与原型</strong>间的关系</p>
<a id="more"></a>



<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><code>__proto__</code>，只有<strong>对象</strong>才有的属性，即<strong>原型</strong>，不建议直接通过 <code>__proto__</code> 获取，建议通过 <code>Object.getPrototype</code> 获取。根据ECMAScript标准，使用 <code>someObject.[[Prototype]]</code> <strong>符号</strong>指代 <code>someObject</code> 的原型 </li>
<li><strong>原型链</strong>是通过 <code>[[Prototype]]</code> 不断向上连接</li>
<li><code>prototype</code>，只有<strong>函数</strong>才有的属性，默认为空对象<code>{}</code>。对象也可以手动设置其值，但跟普通的键没区别</li>
<li><code>Object.setPrototypeOf(A, B)</code>，将A的原型设置为B，等价于 <code>A.__proto__ = B</code></li>
<li><code>Object.getPrototypeOf(A)</code>，获取A的原型的<strong>标准</strong>方法<ul>
<li>当原型不为 <code>null</code> 时，等价于 <code>A.__proto__</code> </li>
<li>当原型为 <code>null</code> 时，通过 <code>obj.__proto__</code> 获取到的值为 <code>undefined</code>，但通过 <code>Object.getPrototypeOf(obj)</code>获取到的指为 <code>null</code></li>
</ul>
</li>
<li><code>__proto__ </code> 可以直接设置对象字面量的原型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pro = &#123;</span><br><span class="line">    name: <span class="string">'NAME'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    __proto__: pro</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// NAME</span></span><br></pre></td></tr></table></figure>



<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><ul>
<li>说明：<code>Shape</code> 是父类，<code>Triangle</code> 是子类，<code>Triangle</code> 继承自 <code>Shape</code> 。图中所有的 <code>__proto__</code> 均指通过 <code>Object.getPrototype</code> 获取得到的原型</li>
<li>注意：当通过 <code>extend</code> 继承时，<code>Triangle.prototype.__proto__ === Shape.prototype</code>，当通过<code>setPrototypeOf</code> 方法继承时，<code>Triangle.prototype.__proto__ === Object.prototype</code></li>
</ul>
<p><img src="https://s2.ax1x.com/2019/10/13/uxRkVO.png" alt="原型图"></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>prototype</tag>
        <tag>__proto__</tag>
        <tag>setPrototypeOf</tag>
        <tag>getPrototypeOf</tag>
      </tags>
  </entry>
  <entry>
    <title>瀑布流布局-动画</title>
    <url>/blog/2017/10/19/waterfall-flow-painting/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇介绍了瀑布流布局的原理，这篇是在添加动画时的总结。<br>以下的<code>.box</code>是要进行布局的div的类名</p>
<a id="more"></a>

<h2 id="transform版本"><a href="#transform版本" class="headerlink" title="transform版本"></a>transform版本</h2><ol>
<li><p>在页面的css中设置绝对定位和transition属性，设置运动时间</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.6s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>绝对定位是为了方便控制div的运动位置，但也为后面埋下一点坑</p>
</blockquote>
</li>
<li><p>在触发页面瀑布流布局时用transform属性代替left和top定位</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 瀑布流函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>oBoxs     图片box数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>oBoxWidth 图片box宽度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>columnNum 图片列数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params">oBoxs, oBoxWidth, columnNum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> columnHeightList = [];</span><br><span class="line">    <span class="keyword">var</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oBoxs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> box = oBoxs[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; columnNum) &#123; <span class="comment">// 第一行图片</span></span><br><span class="line">            columnHeightList.push(box.offsetHeight)</span><br><span class="line">            box.style.transform = <span class="string">'translate('</span> + oBoxWidth * i + <span class="string">'px,0px)'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其余图片</span></span><br><span class="line">            <span class="comment">// 获取高度最低的那一列序号</span></span><br><span class="line">            targetIndex = columnHeightList.indexOf(<span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, columnHeightList));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 改动的地方</span></span><br><span class="line">            box.style.transform = <span class="string">'translate('</span> + targetIndex * oBoxWidth + <span class="string">'px,'</span> + columnHeightList[targetIndex] + <span class="string">'px)'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最低列高度加上该div高度</span></span><br><span class="line">            columnHeightList[targetIndex] += box.offsetHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>动画预览地址：<a href="http://sluggish.gitee.io/staticpages/waterfall/js-animate-ver/index2.html" target="_blank" rel="noopener">http://sluggish.gitee.io/staticpages/waterfall/js-animate-ver/index2.html</a></p>
</blockquote>
</li>
</ol>
<h2 id="改善transform版本"><a href="#改善transform版本" class="headerlink" title="改善transform版本"></a>改善transform版本</h2><ol>
<li><p>从预览demo知，当图片加载越多时，图片下降速度变得越来越快。原因在于每次加载进去的div都是从<code>left:0;top:0</code>运动到目标位置，由于运动时间不变，垂直距离变长，垂直速度也随之加快。</p>
</li>
<li><p>解决方法：修改每次加载进来的图片的top值，同时在waterfall函数中的translate垂直距离应随着top的改变作出对应改变。</p>
</li>
</ol>
<h3 id="加载进来的图片进行处理"><a href="#加载进来的图片进行处理" class="headerlink" title="加载进来的图片进行处理"></a>加载进来的图片进行处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将图片包装成box后，加载到mainDiv中【maindiv是所有box所在的div】。cb是图片加载完的回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">mainDiv, cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟后台数据</span></span><br><span class="line">    <span class="keyword">var</span> imgData = &#123; <span class="attr">data</span>: [&#123; <span class="string">'src'</span>: <span class="string">'1.jpg'</span> &#125;, &#123; <span class="string">'src'</span>: <span class="string">'2.jpg'</span> &#125;, &#123; <span class="string">'src'</span>: <span class="string">'3.jpg'</span> &#125;,&#123; <span class="string">'src'</span>: <span class="string">'4.jpg'</span> &#125;, &#123; <span class="string">'src'</span>: <span class="string">'5.jpg'</span> &#125;, &#123; <span class="string">'src'</span>: <span class="string">'6.jpg'</span> &#125;] &#125;;</span><br><span class="line">    <span class="keyword">var</span> prefix = <span class="string">'../../source/image/'</span>;</span><br><span class="line">    <span class="keyword">var</span> imgLen = imgData.data.length;</span><br><span class="line"></span><br><span class="line">    imgData.data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oPic = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        oPic.className = <span class="string">'pic'</span>;</span><br><span class="line">        <span class="keyword">var</span> oBox = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        oBox.className = <span class="string">'box'</span>;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">        img.src = prefix + val.src;</span><br><span class="line"></span><br><span class="line">        oPic.appendChild(img);</span><br><span class="line">        oBox.appendChild(oPic);</span><br><span class="line">        mainDiv.appendChild(oBox);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop; <span class="comment">//注意解决兼容性</span></span><br><span class="line">        <span class="keyword">var</span> bodyHeight = <span class="built_in">document</span>.documentElement.clientHeight; <span class="comment">//可视区高度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解决图片加载过长时下降速度过快</span></span><br><span class="line">        oBox.style.left = <span class="string">'0'</span>;</span><br><span class="line">        oBox.style.top = <span class="number">20</span>+<span class="string">'px'</span>;</span><br><span class="line">        oBox.style.top = scrollTop-bodyHeight+<span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让所有图片加载完后执行回调，避免新加进来的图片高度获取不到，产生叠加</span></span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!--imgLen) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'执行图片回调'</span>)</span><br><span class="line">                cb();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="waterfall函数改造"><a href="#waterfall函数改造" class="headerlink" title="waterfall函数改造"></a>waterfall函数改造</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 瀑布流函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>oBoxs     图片box数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>oBoxWidth 图片box宽度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>columnNum 图片列数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params">oBoxs, oBoxWidth, columnNum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> columnHeightList = [];</span><br><span class="line">    <span class="keyword">var</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">0</span>; <span class="comment">// 保存要移动的垂直高度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oBoxs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> box = oBoxs[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; columnNum) &#123; <span class="comment">// 第一行图片</span></span><br><span class="line">            columnHeightList.push(box.offsetHeight)</span><br><span class="line">            box.style.transform = <span class="string">'translate('</span> + oBoxWidth * i + <span class="string">'px,0px)'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其余图片</span></span><br><span class="line">            <span class="comment">// 获取高度最低的那一列序号</span></span><br><span class="line">            targetIndex = columnHeightList.indexOf(<span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, columnHeightList));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取要移动的垂直高度</span></span><br><span class="line">            <span class="keyword">var</span> y = columnHeightList[targetIndex]-box.style.top.replace(<span class="string">'px'</span>,<span class="string">''</span>);</span><br><span class="line">            box.style.transform = <span class="string">'translate('</span> + targetIndex * oBoxWidth + <span class="string">'px,'</span> + y + <span class="string">'px)'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// box.style.transform = 'translate(' + targetIndex * oBoxWidth + 'px,' + columnHeightList[targetIndex] + 'px)';</span></span><br><span class="line"></span><br><span class="line">            columnHeightList[targetIndex] += box.offsetHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>动画预览地址：<a href="http://sluggish.gitee.io/staticpages/waterfall/js-animate-ver/index.html" target="_blank" rel="noopener">http://sluggish.gitee.io/staticpages/waterfall/js-animate-ver/index.html</a></p>
</blockquote>
<h2 id="jq版本"><a href="#jq版本" class="headerlink" title="jq版本"></a>jq版本</h2><p>jq版本是使用jq的animate函数进行left和top定位。直接贴waterfall函数代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 瀑布流函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>$oBoxs     图片box数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>oBoxWidth 图片box宽度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>columnNum 图片列数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>i         第i张图片起调整成瀑布流布局</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>columnHeightList 存放列高度的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params">$oBoxs, oBoxWidth, columnNum, i, columnHeightList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> targetIndex = <span class="number">0</span>,</span><br><span class="line">        targetTop = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; $oBoxs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> $box = $($oBoxs[i]);</span><br><span class="line">        <span class="keyword">var</span> boxHeight = <span class="built_in">Math</span>.floor($box[<span class="number">0</span>].offsetHeight);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; columnNum) &#123; <span class="comment">// 第一行</span></span><br><span class="line">            columnHeightList.push(boxHeight)</span><br><span class="line">            $box.css(&#123; <span class="string">'position'</span>: <span class="string">'absolute'</span> &#125;);</span><br><span class="line">            $box.animate(&#123;</span><br><span class="line">                    <span class="string">'left'</span>: <span class="built_in">Math</span>.floor(i * oBoxWidth) + <span class="string">'px'</span>,</span><br><span class="line">                    <span class="string">'top'</span>: <span class="string">'0px'</span></span><br><span class="line">                &#125;,<span class="number">500</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'动画动作完成1！'</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetIndex = columnHeightList.indexOf(<span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, columnHeightList));</span><br><span class="line">            targetTop = columnHeightList[targetIndex];</span><br><span class="line">            <span class="comment">// 注意加单位啊！！！</span></span><br><span class="line">            $box.css(<span class="string">'position'</span>, <span class="string">'absolute'</span>)</span><br><span class="line"></span><br><span class="line">            $box.animate(&#123;</span><br><span class="line">                    <span class="string">'left'</span>: <span class="built_in">Math</span>.floor(targetIndex * oBoxWidth) + <span class="string">'px'</span>,</span><br><span class="line">                    <span class="string">'top'</span>: <span class="built_in">Math</span>.floor(targetTop) + <span class="string">'px'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="number">500</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'动画动作完成2！'</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将所在的列高度加上图片高度</span></span><br><span class="line">            columnHeightList[targetIndex] += boxHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>新增参数i是为了在垂直滚动时，只让新加入的图片进行定位，其他图片定位不变</p>
</blockquote>
<blockquote>
<p>预览地址<a href="http://sluggish.gitee.io/staticpages/waterfall/jq-animate-ver/index.html" target="_blank" rel="noopener">http://sluggish.gitee.io/staticpages/waterfall/jq-animate-ver/index.html</a></p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>加载图片是要在加载完后执行回调，避免新加进来的图片高度没获取到，产生叠加</li>
<li>使用translate后，则div距离页面顶部的高度通过offsetTop获取不到！<br>需要自己封装获取translateX和translateY的值<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取元素的translateX和translateY数值，传入一个dom元素，</span></span><br><span class="line"><span class="comment">// 返回一个对象，含属性transX和transY</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTransform</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> transform = <span class="built_in">window</span>.getComputedStyle(dom).transform;</span><br><span class="line">    <span class="keyword">if</span>(transform == <span class="string">'none'</span>) &#123; <span class="comment">// 没使用transform的情况下</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'tranX'</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="string">'tranY'</span>:<span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// transform值是这种字符串 "matrix(1, 0, 0, 1, 408, 190)"</span></span><br><span class="line">    <span class="keyword">var</span> tempArr = transform.split(<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'transX'</span>: <span class="built_in">parseInt</span>(tempArr[<span class="number">4</span>]),</span><br><span class="line">        <span class="string">'transY'</span>: <span class="built_in">parseInt</span>(tempArr[<span class="number">5</span>].substring(<span class="number">0</span>, tempArr[<span class="number">5</span>].length - <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于matrix，可以参考这篇文章:<a href="http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/" target="_blank" rel="noopener">http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/</a></p>
</blockquote>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>源码地址（源码都做了注释）：<a href="https://gitee.com/sluggish/staticpages/tree/master/waterfall" target="_blank" rel="noopener">https://gitee.com/sluggish/staticpages/tree/master/waterfall</a></p>
</blockquote>
]]></content>
      <categories>
        <category>布局</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>js</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>瀑布流布局-原理</title>
    <url>/blog/2017/10/16/waterfall-flow-principle/</url>
    <content><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>各div宽度一样，高度由内容撑开。所有div紧密排列在一起，效果如下：<br><img src="https://s2.ax1x.com/2019/10/13/uxckVg.png" alt="图片瀑布流布局"></p>
<a id="more"></a>

<p><a href="http://sluggish.gitee.io/staticpages/waterfall/js-static-ver/index.html" target="_blank" rel="noopener">点击在线预览</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>学习了慕课网上的瀑布流布局课程，参考实现了一下，做个总结。</p>
<blockquote>
<p>课程地址：<a href="http://www.imooc.com/learn/101" target="_blank" rel="noopener">http://www.imooc.com/learn/101</a></p>
</blockquote>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>先获取<strong>第一行</strong>中各div高度，保留在数组中，作为各列初始高度。假设一排有<code>n</code>个div</li>
<li>获取各列高度的最小项（数组最小项），将第<code>n+1</code>个div移动到高度最低的列的下方</li>
<li>高度最低的列的高度（数组对应的项）加上第<code>n+1</code>个div的自身高度，n++</li>
<li>重复步骤2，直到所有div排序完毕</li>
</ol>
<p><img src="https://s2.ax1x.com/2019/10/13/uxcDde.png" alt="图片瀑布流布局"><br>图片中1,2,3…是对应div元素在html文档中的排列顺序。</p>
<h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 瀑布流函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>oDivs     页面所有div构成的dom数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>divWidth  每个div的宽度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>columnNum 列数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params">oDivs,divWidth,columnNum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> columnHeightList = []; <span class="comment">// 保存各列高度</span></span><br><span class="line">    <span class="keyword">var</span> targetIndex = <span class="number">0</span>; <span class="comment">// 列高度最低所在的列序号</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; oDivs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> mydiv = oDivs[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; columnNum) &#123;</span><br><span class="line">            columnHeightList.push(mydiv.offsetHeight); <span class="comment">// 保存各列初始高度</span></span><br><span class="line">            mydiv.style.cssText = <span class="string">'position:relative;float:left;'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取高度最低所在的列序号（从0开始）</span></span><br><span class="line">            targetIndex = columnHeightList.indexOf(<span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, columnHeightList));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将div移动到最低列的下方</span></span><br><span class="line">            mydiv.style.cssText = <span class="string">'position:absolute'</span>;</span><br><span class="line">            mydiv.style.left = targetIndex * divWidth + <span class="string">'px'</span>;</span><br><span class="line">            mydiv.style.top = columnHeightList[targetIndex] + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将所在的列高度加上div高度</span></span><br><span class="line">            columnHeightList[targetIndex] += mydiv.offsetHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图片无限加载"><a href="#图片无限加载" class="headerlink" title="图片无限加载"></a>图片无限加载</h2><p>思路是检测当前<code>屏幕滚动的高度</code>和<code>浏览器窗口高度</code>之和 跟 <code>最低图片的具页面顶部高度</code>比较，满足一定条件便加载图片。<br><img src="https://s2.ax1x.com/2019/10/13/uxcfL8.png" alt="图片无线加载"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面滚动时触发</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lastDiv = oDivs[oDivs.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> lastDivTop = lastDiv.offsetTop; <span class="comment">// 距离页面顶部的高度</span></span><br><span class="line">    <span class="keyword">var</span> lastDivHeight = lastDiv.offsetHeight; <span class="comment">// 自身高度</span></span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop; <span class="comment">//注意解决兼容性</span></span><br><span class="line">    <span class="keyword">var</span> bodyHeight = <span class="built_in">document</span>.documentElement.clientHeight; <span class="comment">//可视区高度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载图片的条件</span></span><br><span class="line">    <span class="keyword">if</span> ((scrollTop + bodyHeight) &gt; (lastDivTop + lastDivHeight / <span class="number">2</span>)) &#123;</span><br><span class="line">      <span class="comment">// 加载图片代码...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li>在js中设置元素样式记得加单位</li>
<li>后续会实现JS动画版和CSS3版本</li>
</ol>
]]></content>
      <categories>
        <category>布局</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>js</tag>
        <tag>瀑布流布局</tag>
      </tags>
  </entry>
</search>
